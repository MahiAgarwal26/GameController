
button_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800817c  0800817c  0000917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d8  080081d8  0000a104  2**0
                  CONTENTS
  4 .ARM          00000008  080081d8  080081d8  000091d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081e0  080081e0  0000a104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e0  080081e0  000091e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081e4  080081e4  000091e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  080081e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a104  2**0
                  CONTENTS
 10 .bss          00000af0  20000104  20000104  0000a104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bf4  20000bf4  0000a104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014868  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358e  00000000  00000000  0001e99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e23  00000000  00000000  000231b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279b6  00000000  00000000  00023fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178dd  00000000  00000000  0004b989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea750  00000000  00000000  00063266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d9b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d68  00000000  00000000  0014d9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00152764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000104 	.word	0x20000104
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008164 	.word	0x08008164

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000108 	.word	0x20000108
 80001e8:	08008164 	.word	0x08008164

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_ADC_ConvCpltCallback>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

	joystickReportContainer.left = (uint8_t) adcBuf[0] - 128;
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <HAL_ADC_ConvCpltCallback+0x30>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	3b80      	subs	r3, #128	@ 0x80
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <HAL_ADC_ConvCpltCallback+0x34>)
 80004f0:	705a      	strb	r2, [r3, #1]
	joystickReportContainer.right = (uint8_t) adcBuf[1] - 128;
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <HAL_ADC_ConvCpltCallback+0x30>)
 80004f4:	785b      	ldrb	r3, [r3, #1]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	3b80      	subs	r3, #128	@ 0x80
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_ADC_ConvCpltCallback+0x34>)
 80004fe:	709a      	strb	r2, [r3, #2]
};
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20000210 	.word	0x20000210
 8000510:	20000214 	.word	0x20000214

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb34 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f856 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f98e 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f96c 	bl	8000800 <MX_DMA_Init>
  MX_ADC1_Init();
 8000528:	f000 f8ba 	bl	80006a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800052c:	f000 f91a 	bl	8000764 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000530:	f007 f9b4 	bl	800789c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNEL);
 8000534:	2202      	movs	r2, #2
 8000536:	491d      	ldr	r1, [pc, #116]	@ (80005ac <main+0x98>)
 8000538:	481d      	ldr	r0, [pc, #116]	@ (80005b0 <main+0x9c>)
 800053a:	f000 fd0d 	bl	8000f58 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800053e:	481d      	ldr	r0, [pc, #116]	@ (80005b4 <main+0xa0>)
 8000540:	f003 fe32 	bl	80041a8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  btn1 = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000548:	481b      	ldr	r0, [pc, #108]	@ (80005b8 <main+0xa4>)
 800054a:	f001 ff1b 	bl	8002384 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf0c      	ite	eq
 8000554:	2301      	moveq	r3, #1
 8000556:	2300      	movne	r3, #0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <main+0xa8>)
 800055e:	701a      	strb	r2, [r3, #0]
	  btn2 = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000560:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000564:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <main+0xa4>)
 8000566:	f001 ff0d 	bl	8002384 <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf0c      	ite	eq
 8000570:	2301      	moveq	r3, #1
 8000572:	2300      	movne	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <main+0xac>)
 800057a:	701a      	strb	r2, [r3, #0]

	  joystickReportContainer.buttons = (btn1<<1) | (btn2);
 800057c:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <main+0xa8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	b25a      	sxtb	r2, r3
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <main+0xac>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b25b      	sxtb	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b25b      	sxtb	r3, r3
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <main+0xb0>)
 8000596:	701a      	strb	r2, [r3, #0]

	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&joystickReportContainer, 3);
 8000598:	2203      	movs	r2, #3
 800059a:	490a      	ldr	r1, [pc, #40]	@ (80005c4 <main+0xb0>)
 800059c:	480a      	ldr	r0, [pc, #40]	@ (80005c8 <main+0xb4>)
 800059e:	f005 fdf3 	bl	8006188 <USBD_HID_SendReport>

	  HAL_Delay(10);
 80005a2:	200a      	movs	r0, #10
 80005a4:	f000 fb60 	bl	8000c68 <HAL_Delay>
  {
 80005a8:	bf00      	nop
 80005aa:	e7cb      	b.n	8000544 <main+0x30>
 80005ac:	20000210 	.word	0x20000210
 80005b0:	20000120 	.word	0x20000120
 80005b4:	200001c8 	.word	0x200001c8
 80005b8:	40020400 	.word	0x40020400
 80005bc:	20000212 	.word	0x20000212
 80005c0:	20000213 	.word	0x20000213
 80005c4:	20000214 	.word	0x20000214
 80005c8:	20000220 	.word	0x20000220

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fd96 	bl	800810c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	@ 0xa8
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f003 f8e9 	bl	8003828 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f93a 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fb4a 	bl	8003d18 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f923 	bl	80008d4 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b2:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <MX_ADC1_Init+0xc0>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006c0:	4b26      	ldr	r3, [pc, #152]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b23      	ldr	r3, [pc, #140]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b21      	ldr	r3, [pc, #132]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80006ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_ADC1_Init+0xbc>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <MX_ADC1_Init+0xbc>)
 8000708:	f000 fad2 	bl	8000cb0 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000712:	f000 f8df 	bl	80008d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800071e:	2307      	movs	r3, #7
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_ADC1_Init+0xbc>)
 8000728:	f000 fd44 	bl	80011b4 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000732:	f000 f8cf 	bl	80008d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000736:	2301      	movs	r3, #1
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <MX_ADC1_Init+0xbc>)
 8000744:	f000 fd36 	bl	80011b4 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800074e:	f000 f8c1 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000120 	.word	0x20000120
 8000760:	40012000 	.word	0x40012000

08000764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_TIM3_Init+0x94>)
 8000782:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <MX_TIM3_Init+0x98>)
 8000784:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_TIM3_Init+0x94>)
 8000788:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800078c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_TIM3_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_TIM3_Init+0x94>)
 8000796:	2263      	movs	r2, #99	@ 0x63
 8000798:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_TIM3_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_TIM3_Init+0x94>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a6:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <MX_TIM3_Init+0x94>)
 80007a8:	f003 fcae 	bl	8004108 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f88f 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_TIM3_Init+0x94>)
 80007c4:	f003 fd58 	bl	8004278 <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 f881 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007d2:	2320      	movs	r3, #32
 80007d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_TIM3_Init+0x94>)
 80007e0:	f003 ff58 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007ea:	f000 f873 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001c8 	.word	0x200001c8
 80007fc:	40000400 	.word	0x40000400

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_DMA_Init+0x3c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a0b      	ldr	r2, [pc, #44]	@ (800083c <MX_DMA_Init+0x3c>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_DMA_Init+0x3c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2038      	movs	r0, #56	@ 0x38
 8000828:	f001 f859 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800082c:	2038      	movs	r0, #56	@ 0x38
 800082e:	f001 f872 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_GPIO_Init+0x8c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <MX_GPIO_Init+0x8c>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_GPIO_Init+0x8c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_GPIO_Init+0x8c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <MX_GPIO_Init+0x8c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_GPIO_Init+0x8c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_GPIO_Init+0x8c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <MX_GPIO_Init+0x8c>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_GPIO_Init+0x8c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_GPIO_Init+0x90>)
 80008c0:	f001 fbb4 	bl	800202c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	@ (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	@ (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a32      	ldr	r2, [pc, #200]	@ (8000a18 <HAL_ADC_MspInit+0xe8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d15e      	bne.n	8000a10 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <HAL_ADC_MspInit+0xec>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <HAL_ADC_MspInit+0xec>)
 800095c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <HAL_ADC_MspInit+0xec>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <HAL_ADC_MspInit+0xec>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a29      	ldr	r2, [pc, #164]	@ (8000a1c <HAL_ADC_MspInit+0xec>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <HAL_ADC_MspInit+0xec>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800098a:	2303      	movs	r3, #3
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4820      	ldr	r0, [pc, #128]	@ (8000a20 <HAL_ADC_MspInit+0xf0>)
 800099e:	f001 fb45 	bl	800202c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009a4:	4a20      	ldr	r2, [pc, #128]	@ (8000a28 <HAL_ADC_MspInit+0xf8>)
 80009a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009e4:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009e6:	f000 ffb1 	bl	800194c <HAL_DMA_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80009f0:	f7ff ff70 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_ADC_MspInit+0xf4>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2012      	movs	r0, #18
 8000a06:	f000 ff6a 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a0a:	2012      	movs	r0, #18
 8000a0c:	f000 ff83 	bl	8001916 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	20000168 	.word	0x20000168
 8000a28:	40026410 	.word	0x40026410

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <HAL_TIM_Base_MspInit+0x3c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10d      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_TIM_Base_MspInit+0x40>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_TIM_Base_MspInit+0x40>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_TIM_Base_MspInit+0x40>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 f8af 	bl	8000c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <ADC_IRQHandler+0x10>)
 8000ad6:	f000 f92e 	bl	8000d36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000120 	.word	0x20000120

08000ae4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <DMA2_Stream0_IRQHandler+0x10>)
 8000aea:	f001 f835 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000168 	.word	0x20000168

08000af8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <OTG_FS_IRQHandler+0x10>)
 8000afe:	f001 fd9d 	bl	800263c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200006fc 	.word	0x200006fc

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f007 fadd 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fcd7 	bl	8000514 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000b74:	080081e8 	.word	0x080081e8
  ldr r2, =_sbss
 8000b78:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000b7c:	20000bf4 	.word	0x20000bf4

08000b80 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <CAN1_RX0_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_Init+0x40>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_Init+0x40>)
 8000b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <HAL_Init+0x40>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 fe8b 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 f808 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fe92 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_InitTick+0x54>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x58>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fea3 	bl	8001932 <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00e      	b.n	8000c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d80a      	bhi.n	8000c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 fe6b 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c08:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <HAL_InitTick+0x5c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000218 	.word	0x20000218

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000218 	.word	0x20000218

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff ffee 	bl	8000c50 <HAL_GetTick>
 8000c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c80:	d005      	beq.n	8000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_Delay+0x44>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8e:	bf00      	nop
 8000c90:	f7ff ffde 	bl	8000c50 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8f7      	bhi.n	8000c90 <HAL_Delay+0x28>
  {
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e033      	b.n	8000d2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fe2e 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d118      	bne.n	8000d20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cf6:	f023 0302 	bic.w	r3, r3, #2
 8000cfa:	f043 0202 	orr.w	r2, r3, #2
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 fb88 	bl	8001418 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f023 0303 	bic.w	r3, r3, #3
 8000d16:	f043 0201 	orr.w	r2, r3, #1
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d1e:	e001      	b.n	8000d24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d049      	beq.n	8000e00 <HAL_ADC_IRQHandler+0xca>
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d046      	beq.n	8000e00 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d12b      	bne.n	8000df0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d127      	bne.n	8000df0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d119      	bne.n	8000df0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0220 	bic.w	r2, r2, #32
 8000dca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f043 0201 	orr.w	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fb73 	bl	80004dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f06f 0212 	mvn.w	r2, #18
 8000dfe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d057      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0x190>
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d054      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d139      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e48:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d124      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11d      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d119      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e90:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d105      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 fc2c 	bl	8001714 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f06f 020c 	mvn.w	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d017      	beq.n	8000f0c <HAL_ADC_IRQHandler+0x1d6>
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d014      	beq.n	8000f0c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10d      	bne.n	8000f0c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f945 	bl	800118c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f06f 0201 	mvn.w	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f1a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d015      	beq.n	8000f4e <HAL_ADC_IRQHandler+0x218>
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d012      	beq.n	8000f4e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2c:	f043 0202 	orr.w	r2, r3, #2
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f06f 0220 	mvn.w	r2, #32
 8000f3c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f92e 	bl	80011a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f06f 0220 	mvn.w	r2, #32
 8000f4c:	601a      	str	r2, [r3, #0]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Start_DMA+0x1e>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e0e9      	b.n	800114a <HAL_ADC_Start_DMA+0x1f2>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d018      	beq.n	8000fbe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0201 	orr.w	r2, r2, #1
 8000f9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9c:	4b6d      	ldr	r3, [pc, #436]	@ (8001154 <HAL_ADC_Start_DMA+0x1fc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a6d      	ldr	r2, [pc, #436]	@ (8001158 <HAL_ADC_Start_DMA+0x200>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9a      	lsrs	r2, r3, #18
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fcc:	d107      	bne.n	8000fde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fdc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	f040 80a1 	bne.w	8001130 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001018:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800102c:	d106      	bne.n	800103c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f023 0206 	bic.w	r2, r3, #6
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	645a      	str	r2, [r3, #68]	@ 0x44
 800103a:	e002      	b.n	8001042 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800104a:	4b44      	ldr	r3, [pc, #272]	@ (800115c <HAL_ADC_Start_DMA+0x204>)
 800104c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001052:	4a43      	ldr	r2, [pc, #268]	@ (8001160 <HAL_ADC_Start_DMA+0x208>)
 8001054:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800105a:	4a42      	ldr	r2, [pc, #264]	@ (8001164 <HAL_ADC_Start_DMA+0x20c>)
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	4a41      	ldr	r2, [pc, #260]	@ (8001168 <HAL_ADC_Start_DMA+0x210>)
 8001064:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800106e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800107e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800108e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	334c      	adds	r3, #76	@ 0x4c
 800109a:	4619      	mov	r1, r3
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f000 fd02 	bl	8001aa8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d12a      	bne.n	8001106 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a2d      	ldr	r2, [pc, #180]	@ (800116c <HAL_ADC_Start_DMA+0x214>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d015      	beq.n	80010e6 <HAL_ADC_Start_DMA+0x18e>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a2c      	ldr	r2, [pc, #176]	@ (8001170 <HAL_ADC_Start_DMA+0x218>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d105      	bne.n	80010d0 <HAL_ADC_Start_DMA+0x178>
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <HAL_ADC_Start_DMA+0x204>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00a      	beq.n	80010e6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <HAL_ADC_Start_DMA+0x21c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d136      	bne.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_ADC_Start_DMA+0x204>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d130      	bne.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d129      	bne.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	e020      	b.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a18      	ldr	r2, [pc, #96]	@ (800116c <HAL_ADC_Start_DMA+0x214>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d11b      	bne.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d114      	bne.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	e00b      	b.n	8001148 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f043 0210 	orr.w	r2, r3, #16
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000
 8001158:	431bde83 	.word	0x431bde83
 800115c:	40012300 	.word	0x40012300
 8001160:	08001611 	.word	0x08001611
 8001164:	080016cb 	.word	0x080016cb
 8001168:	080016e7 	.word	0x080016e7
 800116c:	40012000 	.word	0x40012000
 8001170:	40012100 	.word	0x40012100
 8001174:	40012200 	.word	0x40012200

08001178 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1c>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e113      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x244>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b09      	cmp	r3, #9
 80011de:	d925      	bls.n	800122c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68d9      	ldr	r1, [r3, #12]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	3b1e      	subs	r3, #30
 80011f6:	2207      	movs	r2, #7
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43da      	mvns	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	400a      	ands	r2, r1
 8001204:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68d9      	ldr	r1, [r3, #12]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	4603      	mov	r3, r0
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4403      	add	r3, r0
 800121e:	3b1e      	subs	r3, #30
 8001220:	409a      	lsls	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	e022      	b.n	8001272 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6919      	ldr	r1, [r3, #16]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	2207      	movs	r2, #7
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	400a      	ands	r2, r1
 800124e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6919      	ldr	r1, [r3, #16]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	4603      	mov	r3, r0
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4403      	add	r3, r0
 8001268:	409a      	lsls	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d824      	bhi.n	80012c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b05      	subs	r3, #5
 800128c:	221f      	movs	r2, #31
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b05      	subs	r3, #5
 80012b6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c2:	e04c      	b.n	800135e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	d824      	bhi.n	8001316 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b23      	subs	r3, #35	@ 0x23
 80012de:	221f      	movs	r2, #31
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43da      	mvns	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	400a      	ands	r2, r1
 80012ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b23      	subs	r3, #35	@ 0x23
 8001308:	fa00 f203 	lsl.w	r2, r0, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	631a      	str	r2, [r3, #48]	@ 0x30
 8001314:	e023      	b.n	800135e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	3b41      	subs	r3, #65	@ 0x41
 8001328:	221f      	movs	r2, #31
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3b41      	subs	r3, #65	@ 0x41
 8001352:	fa00 f203 	lsl.w	r2, r0, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800135e:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <HAL_ADC_ConfigChannel+0x250>)
 8001360:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a28      	ldr	r2, [pc, #160]	@ (8001408 <HAL_ADC_ConfigChannel+0x254>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d10f      	bne.n	800138c <HAL_ADC_ConfigChannel+0x1d8>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d10b      	bne.n	800138c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_ADC_ConfigChannel+0x254>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x23a>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <HAL_ADC_ConfigChannel+0x258>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_ADC_ConfigChannel+0x1f4>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b11      	cmp	r3, #17
 80013a6:	d122      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_ADC_ConfigChannel+0x258>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d111      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_ADC_ConfigChannel+0x25c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_ADC_ConfigChannel+0x260>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9a      	lsrs	r2, r3, #18
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40012300 	.word	0x40012300
 8001408:	40012000 	.word	0x40012000
 800140c:	10000012 	.word	0x10000012
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83

08001418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001420:	4b79      	ldr	r3, [pc, #484]	@ (8001608 <ADC_Init+0x1f0>)
 8001422:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	431a      	orrs	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800144c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	021a      	lsls	r2, r3, #8
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6859      	ldr	r1, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014aa:	4a58      	ldr	r2, [pc, #352]	@ (800160c <ADC_Init+0x1f4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d022      	beq.n	80014f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6899      	ldr	r1, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	e00f      	b.n	8001516 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001514:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0202 	bic.w	r2, r2, #2
 8001524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e1b      	ldrb	r3, [r3, #24]
 8001530:	005a      	lsls	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01b      	beq.n	800157c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001552:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001562:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6859      	ldr	r1, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	3b01      	subs	r3, #1
 8001570:	035a      	lsls	r2, r3, #13
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	e007      	b.n	800158c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800158a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800159a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	051a      	lsls	r2, r3, #20
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015ce:	025a      	lsls	r2, r3, #9
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	029a      	lsls	r2, r3, #10
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40012300 	.word	0x40012300
 800160c:	0f000001 	.word	0x0f000001

08001610 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001626:	2b00      	cmp	r3, #0
 8001628:	d13c      	bne.n	80016a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d12b      	bne.n	800169c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001648:	2b00      	cmp	r3, #0
 800164a:	d127      	bne.n	800169c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001664:	2b00      	cmp	r3, #0
 8001666:	d119      	bne.n	800169c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0220 	bic.w	r2, r2, #32
 8001676:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7fe ff1d 	bl	80004dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016a2:	e00e      	b.n	80016c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fd75 	bl	80011a0 <HAL_ADC_ErrorCallback>
}
 80016b6:	e004      	b.n	80016c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff fd4d 	bl	8001178 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2240      	movs	r2, #64	@ 0x40
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f043 0204 	orr.w	r2, r3, #4
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fd4a 	bl	80011a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	@ (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	@ (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff29 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff3e 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff31 	bl	800178c <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff f97a 	bl	8000c50 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e099      	b.n	8001a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001988:	e00f      	b.n	80019aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff f961 	bl	8000c50 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d908      	bls.n	80019aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e078      	b.n	8001a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e8      	bne.n	800198a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <HAL_DMA_Init+0x158>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d117      	bne.n	8001a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fa6f 	bl	8001f34 <DMA_CheckFifoParam>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e016      	b.n	8001a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa26 	bl	8001ec8 <DMA_CalcBaseAndBitshift>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	223f      	movs	r2, #63	@ 0x3f
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	f010803f 	.word	0xf010803f

08001aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_Start_IT+0x26>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e040      	b.n	8001b50 <HAL_DMA_Start_IT+0xa8>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12f      	bne.n	8001b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f9b8 	bl	8001e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	223f      	movs	r2, #63	@ 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0216 	orr.w	r2, r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e005      	b.n	8001b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b64:	4b8e      	ldr	r3, [pc, #568]	@ (8001da0 <HAL_DMA_IRQHandler+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	@ (8001da4 <HAL_DMA_IRQHandler+0x24c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	2208      	movs	r2, #8
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c34:	2210      	movs	r2, #16
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2210      	movs	r2, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e01f      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2220      	movs	r2, #32
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 808f 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8087 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	2220      	movs	r2, #32
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d136      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x1da>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	223f      	movs	r2, #63	@ 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
        }
        return;
 8001d6e:	e079      	b.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e02c      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000
 8001da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e01e      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d307      	bcc.n	8001e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x2cc>
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e64:	bf00      	nop
    }
  }
}
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	d108      	bne.n	8001eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eaa:	e007      	b.n	8001ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b10      	subs	r3, #16
 8001ed8:	4a14      	ldr	r2, [pc, #80]	@ (8001f2c <DMA_CalcBaseAndBitshift+0x64>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d909      	bls.n	8001f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f08:	e007      	b.n	8001f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	aaaaaaab 	.word	0xaaaaaaab
 8001f30:	080081d0 	.word	0x080081d0

08001f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d856      	bhi.n	8002002 <DMA_CheckFifoParam+0xce>
 8001f54:	a201      	add	r2, pc, #4	@ (adr r2, 8001f5c <DMA_CheckFifoParam+0x28>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f7f 	.word	0x08001f7f
 8001f64:	08001f6d 	.word	0x08001f6d
 8001f68:	08002003 	.word	0x08002003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e043      	b.n	8002006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f86:	d140      	bne.n	800200a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8c:	e03d      	b.n	800200a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f96:	d121      	bne.n	8001fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d837      	bhi.n	800200e <DMA_CheckFifoParam+0xda>
 8001f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <DMA_CheckFifoParam+0x70>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbb 	.word	0x08001fbb
 8001fac:	08001fb5 	.word	0x08001fb5
 8001fb0:	08001fcd 	.word	0x08001fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e030      	b.n	800201c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d025      	beq.n	8002012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fca:	e022      	b.n	8002012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fd4:	d11f      	bne.n	8002016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fda:	e01c      	b.n	8002016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d903      	bls.n	8001fea <DMA_CheckFifoParam+0xb6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe8:	e018      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      break;
 8001fee:	e015      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e00b      	b.n	800201a <DMA_CheckFifoParam+0xe6>
      break;
 8002002:	bf00      	nop
 8002004:	e00a      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e008      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e006      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e004      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;   
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
    }
  } 
  
  return status; 
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e177      	b.n	8002338 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8166 	bne.w	8002332 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80c0 	beq.w	8002332 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <HAL_GPIO_Init+0x324>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	4a65      	ldr	r2, [pc, #404]	@ (8002350 <HAL_GPIO_Init+0x324>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_GPIO_Init+0x324>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a61      	ldr	r2, [pc, #388]	@ (8002354 <HAL_GPIO_Init+0x328>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a58      	ldr	r2, [pc, #352]	@ (8002358 <HAL_GPIO_Init+0x32c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d037      	beq.n	800226a <HAL_GPIO_Init+0x23e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a57      	ldr	r2, [pc, #348]	@ (800235c <HAL_GPIO_Init+0x330>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_GPIO_Init+0x23a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_GPIO_Init+0x334>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02b      	beq.n	8002262 <HAL_GPIO_Init+0x236>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a55      	ldr	r2, [pc, #340]	@ (8002364 <HAL_GPIO_Init+0x338>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d025      	beq.n	800225e <HAL_GPIO_Init+0x232>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a54      	ldr	r2, [pc, #336]	@ (8002368 <HAL_GPIO_Init+0x33c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x22e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a53      	ldr	r2, [pc, #332]	@ (800236c <HAL_GPIO_Init+0x340>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x22a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_GPIO_Init+0x344>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x226>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a51      	ldr	r2, [pc, #324]	@ (8002374 <HAL_GPIO_Init+0x348>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x222>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a50      	ldr	r2, [pc, #320]	@ (8002378 <HAL_GPIO_Init+0x34c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x21e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4f      	ldr	r2, [pc, #316]	@ (800237c <HAL_GPIO_Init+0x350>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x21a>
 8002242:	2309      	movs	r3, #9
 8002244:	e012      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002246:	230a      	movs	r3, #10
 8002248:	e010      	b.n	800226c <HAL_GPIO_Init+0x240>
 800224a:	2308      	movs	r3, #8
 800224c:	e00e      	b.n	800226c <HAL_GPIO_Init+0x240>
 800224e:	2307      	movs	r3, #7
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002252:	2306      	movs	r3, #6
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x240>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x240>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x240>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	@ (8002354 <HAL_GPIO_Init+0x328>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_GPIO_Init+0x354>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a34      	ldr	r2, [pc, #208]	@ (8002380 <HAL_GPIO_Init+0x354>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <HAL_GPIO_Init+0x354>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a29      	ldr	r2, [pc, #164]	@ (8002380 <HAL_GPIO_Init+0x354>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <HAL_GPIO_Init+0x354>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1f      	ldr	r2, [pc, #124]	@ (8002380 <HAL_GPIO_Init+0x354>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_GPIO_Init+0x354>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a14      	ldr	r2, [pc, #80]	@ (8002380 <HAL_GPIO_Init+0x354>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae84 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40022000 	.word	0x40022000
 800237c:	40022400 	.word	0x40022400
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e101      	b.n	80025ca <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f005 fb91 	bl	8007b08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f4:	d102      	bne.n	80023fc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fada 	bl	80049ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7c1a      	ldrb	r2, [r3, #16]
 800240e:	f88d 2000 	strb.w	r2, [sp]
 8002412:	3304      	adds	r3, #4
 8002414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002416:	f002 f9b9 	bl	800478c <USB_CoreInit>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0ce      	b.n	80025ca <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fad2 	bl	80049dc <USB_SetCurrentMode>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0bf      	b.n	80025ca <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e04a      	b.n	80024e6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3315      	adds	r3, #21
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3314      	adds	r3, #20
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	b298      	uxth	r0, r3
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	332e      	adds	r3, #46	@ 0x2e
 800248c:	4602      	mov	r2, r0
 800248e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3318      	adds	r3, #24
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	331c      	adds	r3, #28
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3320      	adds	r3, #32
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3324      	adds	r3, #36	@ 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	3301      	adds	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d3af      	bcc.n	8002450 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e044      	b.n	8002580 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	3301      	adds	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	791b      	ldrb	r3, [r3, #4]
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	429a      	cmp	r2, r3
 8002588:	d3b5      	bcc.n	80024f6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7c1a      	ldrb	r2, [r3, #16]
 8002592:	f88d 2000 	strb.w	r2, [sp]
 8002596:	3304      	adds	r3, #4
 8002598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259a:	f002 fa6b 	bl	8004a74 <USB_DevInit>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e00c      	b.n	80025ca <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fab5 	bl	8005b32 <USB_DevDisconnect>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_PCD_Start+0x1c>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e022      	b.n	8002634 <HAL_PCD_Start+0x62>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f002 f9bc 	bl	8004998 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fa63 	bl	8005af0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b08d      	sub	sp, #52	@ 0x34
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fb21 	bl	8005c9a <USB_GetMode>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 848c 	bne.w	8002f78 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fa85 	bl	8005b74 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8482 	beq.w	8002f76 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fa72 	bl	8005b74 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d107      	bne.n	80026aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 0202 	and.w	r2, r2, #2
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fa60 	bl	8005b74 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d161      	bne.n	8002782 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0210 	bic.w	r2, r2, #16
 80026cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	0c5b      	lsrs	r3, r3, #17
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d124      	bne.n	8002744 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d035      	beq.n	8002772 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6a38      	ldr	r0, [r7, #32]
 800271a:	f003 f897 	bl	800584c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272a:	441a      	add	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273c:	441a      	add	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	e016      	b.n	8002772 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	0c5b      	lsrs	r3, r3, #17
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	2b06      	cmp	r3, #6
 800274e:	d110      	bne.n	8002772 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002756:	2208      	movs	r2, #8
 8002758:	4619      	mov	r1, r3
 800275a:	6a38      	ldr	r0, [r7, #32]
 800275c:	f003 f876 	bl	800584c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0210 	orr.w	r2, r2, #16
 8002780:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 f9f4 	bl	8005b74 <USB_ReadInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002792:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002796:	f040 80a7 	bne.w	80028e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 f9f9 	bl	8005b9a <USB_ReadDevAllOutEpInterrupt>
 80027a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027aa:	e099      	b.n	80028e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 808e 	beq.w	80028d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fa1d 	bl	8005c02 <USB_ReadDevOutEPInterrupt>
 80027c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	2301      	movs	r3, #1
 80027e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fe8b 	bl	8003504 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	2308      	movs	r3, #8
 8002808:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800280a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 ff61 	bl	80036d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002828:	461a      	mov	r2, r3
 800282a:	2310      	movs	r3, #16
 800282c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d030      	beq.n	800289a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002840:	2b80      	cmp	r3, #128	@ 0x80
 8002842:	d109      	bne.n	8002858 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002856:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	78db      	ldrb	r3, [r3, #3]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f005 fa46 	bl	8007d14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2302      	movs	r3, #2
 8002898:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	2320      	movs	r3, #32
 80028b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028cc:	461a      	mov	r2, r3
 80028ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	3301      	adds	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f47f af62 	bne.w	80027ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 f941 	bl	8005b74 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028fc:	f040 80db 	bne.w	8002ab6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 f962 	bl	8005bce <USB_ReadDevAllInEpInterrupt>
 800290a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002910:	e0cd      	b.n	8002aae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80c2 	beq.w	8002aa2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f003 f988 	bl	8005c3e <USB_ReadDevInEPInterrupt>
 800292e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d057      	beq.n	80029ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800294e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	69f9      	ldr	r1, [r7, #28]
 8002956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800295a:	4013      	ands	r3, r2
 800295c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2301      	movs	r3, #1
 800296e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	799b      	ldrb	r3, [r3, #6]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d132      	bne.n	80029de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3320      	adds	r3, #32
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4403      	add	r3, r0
 8002998:	331c      	adds	r3, #28
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4419      	add	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	3320      	adds	r3, #32
 80029ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <HAL_PCD_IRQHandler+0x3a2>
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3324      	adds	r3, #36	@ 0x24
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029d6:	461a      	mov	r2, r3
 80029d8:	2101      	movs	r1, #1
 80029da:	f003 f98f 	bl	8005cfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f005 f910 	bl	8007c0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a00:	461a      	mov	r2, r3
 8002a02:	2308      	movs	r3, #8
 8002a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2310      	movs	r3, #16
 8002a20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2340      	movs	r3, #64	@ 0x40
 8002a3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d023      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a4a:	6a38      	ldr	r0, [r7, #32]
 8002a4c:	f002 f976 	bl	8004d3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	3310      	adds	r3, #16
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	78db      	ldrb	r3, [r3, #3]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f005 f95d 	bl	8007d38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fca5 	bl	80033ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f af2e 	bne.w	8002912 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 f85a 	bl	8005b74 <USB_ReadInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aca:	d122      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002af2:	2100      	movs	r1, #0
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fe8b 	bl	8003810 <HAL_PCDEx_LPM_Callback>
 8002afa:	e002      	b.n	8002b02 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f005 f8fb 	bl	8007cf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 f82c 	bl	8005b74 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b26:	d112      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f005 f8b7 	bl	8007cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b4c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 f80e 	bl	8005b74 <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	f040 80b7 	bne.w	8002cd4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2110      	movs	r1, #16
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 f8db 	bl	8004d3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8a:	e046      	b.n	8002c1a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b9e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb0:	0151      	lsls	r1, r2, #5
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bd2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be4:	0151      	lsls	r1, r2, #5
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	440a      	add	r2, r1
 8002bea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bf2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c04:	0151      	lsls	r1, r2, #5
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	440a      	add	r2, r1
 8002c0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c12:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c16:	3301      	adds	r3, #1
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	791b      	ldrb	r3, [r3, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d3b2      	bcc.n	8002b8c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c34:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7bdb      	ldrb	r3, [r3, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c52:	f043 030b 	orr.w	r3, r3, #11
 8002c56:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c68:	f043 030b 	orr.w	r3, r3, #11
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	e015      	b.n	8002c9c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c82:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c96:	f043 030b 	orr.w	r3, r3, #11
 8002c9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002caa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002cae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f003 f81c 	bl	8005cfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 ff4b 	bl	8005b74 <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce8:	d123      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 ffe1 	bl	8005cb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 f898 	bl	8004e2e <USB_GetDevSpeed>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681c      	ldr	r4, [r3, #0]
 8002d0a:	f001 f9f1 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8002d0e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d14:	461a      	mov	r2, r3
 8002d16:	4620      	mov	r0, r4
 8002d18:	f001 fd9c 	bl	8004854 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f004 ff9c 	bl	8007c5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 ff1c 	bl	8005b74 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d10a      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f004 ff79 	bl	8007c3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 0208 	and.w	r2, r2, #8
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 ff07 	bl	8005b74 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6c:	2b80      	cmp	r3, #128	@ 0x80
 8002d6e:	d123      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d80:	e014      	b.n	8002dac <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 faf2 	bl	800338a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	791b      	ldrb	r3, [r3, #4]
 8002db0:	461a      	mov	r2, r3
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d3e4      	bcc.n	8002d82 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fed9 	bl	8005b74 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dcc:	d13c      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd2:	e02b      	b.n	8002e2c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3318      	adds	r3, #24
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d115      	bne.n	8002e26 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	da12      	bge.n	8002e26 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3317      	adds	r3, #23
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fab2 	bl	800338a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	3301      	adds	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	461a      	mov	r2, r3
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d3cd      	bcc.n	8002dd4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fe91 	bl	8005b74 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e5c:	d156      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e62:	e045      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d12e      	bne.n	8002eea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da2b      	bge.n	8002eea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d121      	bne.n	8002eea <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee6:	6053      	str	r3, [r2, #4]
            break;
 8002ee8:	e008      	b.n	8002efc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	3301      	adds	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	791b      	ldrb	r3, [r3, #4]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d3b3      	bcc.n	8002e64 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f002 fe2f 	bl	8005b74 <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f20:	d10a      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f004 ff1a 	bl	8007d5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fe19 	bl	8005b74 <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d115      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f004 ff0a 	bl	8007d78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e000      	b.n	8002f78 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f76:	bf00      	nop
    }
  }
}
 8002f78:	3734      	adds	r7, #52	@ 0x34
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}

08002f7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_PCD_SetAddress+0x1a>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e012      	b.n	8002fbe <HAL_PCD_SetAddress+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fd78 	bl	8005aa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	4608      	mov	r0, r1
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	70fb      	strb	r3, [r7, #3]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	803b      	strh	r3, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da0f      	bge.n	800300c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 020f 	and.w	r2, r3, #15
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	705a      	strb	r2, [r3, #1]
 800300a:	e00f      	b.n	800302c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003038:	883b      	ldrh	r3, [r7, #0]
 800303a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	78ba      	ldrb	r2, [r7, #2]
 8003046:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800305a:	78bb      	ldrb	r3, [r7, #2]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d102      	bne.n	8003066 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_PCD_EP_Open+0xae>
 8003070:	2302      	movs	r3, #2
 8003072:	e00e      	b.n	8003092 <HAL_PCD_EP_Open+0xcc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f001 fef8 	bl	8004e78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003090:	7afb      	ldrb	r3, [r7, #11]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da0f      	bge.n	80030ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	3310      	adds	r3, #16
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e00f      	b.n	80030ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 020f 	and.w	r2, r3, #15
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_PCD_EP_Close+0x6e>
 8003104:	2302      	movs	r3, #2
 8003106:	e00e      	b.n	8003126 <HAL_PCD_EP_Close+0x8c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f001 ff36 	bl	8004f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	460b      	mov	r3, r1
 800313c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	b2da      	uxtb	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	799b      	ldrb	r3, [r3, #6]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d102      	bne.n	800318a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	799b      	ldrb	r3, [r3, #6]
 8003192:	461a      	mov	r2, r3
 8003194:	6979      	ldr	r1, [r7, #20]
 8003196:	f001 ffd3 	bl	8005140 <USB_EPStartXfer>

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	460b      	mov	r3, r1
 80031b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	3310      	adds	r3, #16
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2201      	movs	r2, #1
 80031e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	799b      	ldrb	r3, [r3, #6]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d102      	bne.n	80031fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	799b      	ldrb	r3, [r3, #6]
 8003206:	461a      	mov	r2, r3
 8003208:	6979      	ldr	r1, [r7, #20]
 800320a:	f001 ff99 	bl	8005140 <USB_EPStartXfer>

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	7912      	ldrb	r2, [r2, #4]
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e04f      	b.n	80032d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da0f      	bge.n	800325e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	3310      	adds	r3, #16
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00d      	b.n	800327a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_SetStall+0x82>
 8003296:	2302      	movs	r3, #2
 8003298:	e01d      	b.n	80032d6 <HAL_PCD_EP_SetStall+0xbe>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fb27 	bl	80058fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7999      	ldrb	r1, [r3, #6]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032c6:	461a      	mov	r2, r3
 80032c8:	f002 fd18 	bl	8005cfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	7912      	ldrb	r2, [r2, #4]
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e042      	b.n	8003382 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003300:	2b00      	cmp	r3, #0
 8003302:	da0f      	bge.n	8003324 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	3310      	adds	r3, #16
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	3304      	adds	r3, #4
 800331a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	705a      	strb	r2, [r3, #1]
 8003322:	e00f      	b.n	8003344 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	3304      	adds	r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_PCD_EP_ClrStall+0x86>
 8003360:	2302      	movs	r3, #2
 8003362:	e00e      	b.n	8003382 <HAL_PCD_EP_ClrStall+0xa4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	4618      	mov	r0, r3
 8003374:	f002 fb30 	bl	80059d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da0c      	bge.n	80033b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	3310      	adds	r3, #16
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e00c      	b.n	80033d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	3304      	adds	r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 f94f 	bl	800567c <USB_EPStopXfer>
 80033de:	4603      	mov	r3, r0
 80033e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033e2:	7afb      	ldrb	r3, [r7, #11]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3310      	adds	r3, #16
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d901      	bls.n	8003424 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e06b      	b.n	80034fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	429a      	cmp	r2, r3
 8003438:	d902      	bls.n	8003440 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	3303      	adds	r3, #3
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003448:	e02a      	b.n	80034a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	429a      	cmp	r2, r3
 800345e:	d902      	bls.n	8003466 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3303      	adds	r3, #3
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68d9      	ldr	r1, [r3, #12]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4603      	mov	r3, r0
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f002 f9a4 	bl	80057d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d809      	bhi.n	80034ca <PCD_WriteEmptyTxFifo+0xde>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034be:	429a      	cmp	r2, r3
 80034c0:	d203      	bcs.n	80034ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1bf      	bne.n	800344a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d811      	bhi.n	80034fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	2201      	movs	r2, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	6939      	ldr	r1, [r7, #16]
 80034f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034f6:	4013      	ands	r3, r2
 80034f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	333c      	adds	r3, #60	@ 0x3c
 800351c:	3304      	adds	r3, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	799b      	ldrb	r3, [r3, #6]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d17b      	bne.n	8003632 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d015      	beq.n	8003570 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4a61      	ldr	r2, [pc, #388]	@ (80036cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	f240 80b9 	bls.w	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80b3 	beq.w	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003566:	461a      	mov	r2, r3
 8003568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	e0a7      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003586:	461a      	mov	r2, r3
 8003588:	2320      	movs	r3, #32
 800358a:	6093      	str	r3, [r2, #8]
 800358c:	e098      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 8093 	bne.w	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	4a4b      	ldr	r2, [pc, #300]	@ (80036cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d90f      	bls.n	80035c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b8:	461a      	mov	r2, r3
 80035ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035be:	6093      	str	r3, [r2, #8]
 80035c0:	e07e      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	0159      	lsls	r1, r3, #5
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ee:	1ad2      	subs	r2, r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d114      	bne.n	8003624 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800360c:	461a      	mov	r2, r3
 800360e:	2101      	movs	r1, #1
 8003610:	f002 fb74 	bl	8005cfc <USB_EP0_OutStart>
 8003614:	e006      	b.n	8003624 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	441a      	add	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f004 fad2 	bl	8007bd4 <HAL_PCD_DataOutStageCallback>
 8003630:	e046      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4a26      	ldr	r2, [pc, #152]	@ (80036d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d124      	bne.n	8003684 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003650:	461a      	mov	r2, r3
 8003652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003656:	6093      	str	r3, [r2, #8]
 8003658:	e032      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	2320      	movs	r3, #32
 8003674:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f004 faa9 	bl	8007bd4 <HAL_PCD_DataOutStageCallback>
 8003682:	e01d      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d114      	bne.n	80036b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036ac:	461a      	mov	r2, r3
 80036ae:	2100      	movs	r1, #0
 80036b0:	f002 fb24 	bl	8005cfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f004 fa8a 	bl	8007bd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	4f54300a 	.word	0x4f54300a
 80036d0:	4f54310a 	.word	0x4f54310a

080036d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	333c      	adds	r3, #60	@ 0x3c
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a15      	ldr	r2, [pc, #84]	@ (800375c <PCD_EP_OutSetupPacket_int+0x88>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d90e      	bls.n	8003728 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003720:	461a      	mov	r2, r3
 8003722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003726:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f004 fa41 	bl	8007bb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <PCD_EP_OutSetupPacket_int+0x88>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d90c      	bls.n	8003750 <PCD_EP_OutSetupPacket_int+0x7c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	799b      	ldrb	r3, [r3, #6]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d108      	bne.n	8003750 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003748:	461a      	mov	r2, r3
 800374a:	2101      	movs	r1, #1
 800374c:	f002 fad6 	bl	8005cfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	4f54300a 	.word	0x4f54300a

08003760 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
 800376c:	4613      	mov	r3, r2
 800376e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800377e:	883b      	ldrh	r3, [r7, #0]
 8003780:	0419      	lsls	r1, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	430a      	orrs	r2, r1
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
 800378c:	e028      	b.n	80037e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e00d      	b.n	80037be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	3340      	adds	r3, #64	@ 0x40
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	4413      	add	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	3301      	adds	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3ec      	bcc.n	80037a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037c8:	883b      	ldrh	r3, [r7, #0]
 80037ca:	0418      	lsls	r0, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	4302      	orrs	r2, r0
 80037d8:	3340      	adds	r3, #64	@ 0x40
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e267      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d075      	beq.n	8003932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003846:	4b88      	ldr	r3, [pc, #544]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b04      	cmp	r3, #4
 8003850:	d00c      	beq.n	800386c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b85      	ldr	r3, [pc, #532]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800385a:	2b08      	cmp	r3, #8
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b82      	ldr	r3, [pc, #520]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386a:	d10b      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05b      	beq.n	8003930 <HAL_RCC_OscConfig+0x108>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d157      	bne.n	8003930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e242      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x74>
 800388e:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a75      	ldr	r2, [pc, #468]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0xb0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x98>
 80038a6:	4b70      	ldr	r3, [pc, #448]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xb0>
 80038c0:	4b69      	ldr	r3, [pc, #420]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b66      	ldr	r3, [pc, #408]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a65      	ldr	r2, [pc, #404]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd f9b6 	bl	8000c50 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd f9b2 	bl	8000c50 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e207      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0xc0>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd f9a2 	bl	8000c50 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fd f99e 	bl	8000c50 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	@ 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1f3      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0xe8>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394a:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003952:	2b08      	cmp	r3, #8
 8003954:	d11c      	bne.n	8003990 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b44      	ldr	r3, [pc, #272]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x152>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1c7      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4937      	ldr	r1, [pc, #220]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	e03a      	b.n	8003a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003998:	4b34      	ldr	r3, [pc, #208]	@ (8003a6c <HAL_RCC_OscConfig+0x244>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd f957 	bl	8000c50 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fd f953 	bl	8000c50 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1a8      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4925      	ldr	r1, [pc, #148]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039da:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <HAL_RCC_OscConfig+0x244>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fd f936 	bl	8000c50 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e8:	f7fd f932 	bl	8000c50 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e187      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d036      	beq.n	8003a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <HAL_RCC_OscConfig+0x248>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd f916 	bl	8000c50 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fd f912 	bl	8000c50 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e167      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x200>
 8003a46:	e01b      	b.n	8003a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_RCC_OscConfig+0x248>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4e:	f7fd f8ff 	bl	8000c50 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e00e      	b.n	8003a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fd f8fb 	bl	8000c50 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d907      	bls.n	8003a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e150      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470000 	.word	0x42470000
 8003a70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	4b88      	ldr	r3, [pc, #544]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ea      	bne.n	8003a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8097 	beq.w	8003bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a92:	4b81      	ldr	r3, [pc, #516]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b7a      	ldr	r3, [pc, #488]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	4b77      	ldr	r3, [pc, #476]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aca:	4b74      	ldr	r3, [pc, #464]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a73      	ldr	r2, [pc, #460]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd f8bb 	bl	8000c50 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fd f8b7 	bl	8000c50 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e10c      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2ea>
 8003b04:	4b64      	ldr	r3, [pc, #400]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a63      	ldr	r2, [pc, #396]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x324>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x30c>
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b26:	4b5c      	ldr	r3, [pc, #368]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0x324>
 8003b34:	4b58      	ldr	r3, [pc, #352]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	4a57      	ldr	r2, [pc, #348]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b40:	4b55      	ldr	r3, [pc, #340]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a54      	ldr	r2, [pc, #336]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 0304 	bic.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd f87c 	bl	8000c50 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd f878 	bl	8000c50 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0cb      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	4b49      	ldr	r3, [pc, #292]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ee      	beq.n	8003b5c <HAL_RCC_OscConfig+0x334>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fd f866 	bl	8000c50 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fd f862 	bl	8000c50 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0b5      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ee      	bne.n	8003b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b39      	ldr	r3, [pc, #228]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	4a38      	ldr	r2, [pc, #224]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80a1 	beq.w	8003d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc6:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d05c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d141      	bne.n	8003c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b31      	ldr	r3, [pc, #196]	@ (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd f836 	bl	8000c50 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd f832 	bl	8000c50 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e087      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	4b27      	ldr	r3, [pc, #156]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	491b      	ldr	r1, [pc, #108]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd f80b 	bl	8000c50 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd f807 	bl	8000c50 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e05c      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c50:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x416>
 8003c5c:	e054      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fc fff4 	bl	8000c50 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fc fff0 	bl	8000c50 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e045      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x444>
 8003c8a:	e03d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e038      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_RCC_OscConfig+0x4ec>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d121      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d11a      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d111      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b68      	ldr	r3, [pc, #416]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d90c      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b65      	ldr	r3, [pc, #404]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a58      	ldr	r2, [pc, #352]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a52      	ldr	r2, [pc, #328]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d044      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e067      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b37      	ldr	r3, [pc, #220]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4934      	ldr	r1, [pc, #208]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fc ff22 	bl	8000c50 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fc ff1e 	bl	8000c50 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b25      	ldr	r3, [pc, #148]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d20c      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f821 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fe82 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023c00 	.word	0x40023c00
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	080081c0 	.word	0x080081c0
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000004 	.word	0x20000004

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b094      	sub	sp, #80	@ 0x50
 8003eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efc:	4b79      	ldr	r3, [pc, #484]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d00d      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x40>
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	f200 80e1 	bhi.w	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f16:	e0db      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b73      	ldr	r3, [pc, #460]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f1c:	e0db      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1e:	4b73      	ldr	r3, [pc, #460]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f22:	e0d8      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f24:	4b6f      	ldr	r3, [pc, #444]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	2200      	movs	r2, #0
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f04f 0000 	mov.w	r0, #0
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f68:	0150      	lsls	r0, r2, #5
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4621      	mov	r1, r4
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f92:	4651      	mov	r1, sl
 8003f94:	018a      	lsls	r2, r1, #6
 8003f96:	4651      	mov	r1, sl
 8003f98:	ebb2 0801 	subs.w	r8, r2, r1
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb6:	4690      	mov	r8, r2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb18 0303 	adds.w	r3, r8, r3
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	eb49 0303 	adc.w	r3, r9, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	024b      	lsls	r3, r1, #9
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	024a      	lsls	r2, r1, #9
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ff4:	f7fc f8fa 	bl	80001ec <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	e058      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b38      	ldr	r3, [pc, #224]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	2200      	movs	r2, #0
 800400a:	4618      	mov	r0, r3
 800400c:	4611      	mov	r1, r2
 800400e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402e:	0150      	lsls	r0, r2, #5
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4641      	mov	r1, r8
 8004036:	ebb2 0a01 	subs.w	sl, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800404c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004054:	ebb2 040a 	subs.w	r4, r2, sl
 8004058:	eb63 050b 	sbc.w	r5, r3, fp
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	00eb      	lsls	r3, r5, #3
 8004066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406a:	00e2      	lsls	r2, r4, #3
 800406c:	4614      	mov	r4, r2
 800406e:	461d      	mov	r5, r3
 8004070:	4643      	mov	r3, r8
 8004072:	18e3      	adds	r3, r4, r3
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	464b      	mov	r3, r9
 8004078:	eb45 0303 	adc.w	r3, r5, r3
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800408a:	4629      	mov	r1, r5
 800408c:	028b      	lsls	r3, r1, #10
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004094:	4621      	mov	r1, r4
 8004096:	028a      	lsls	r2, r1, #10
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	61fa      	str	r2, [r7, #28]
 80040a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a8:	f7fc f8a0 	bl	80001ec <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3750      	adds	r7, #80	@ 0x50
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e041      	b.n	800419e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc fc7c 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 f95e 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e046      	b.n	800424e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a23      	ldr	r2, [pc, #140]	@ (800425c <HAL_TIM_Base_Start+0xb4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041da:	d01d      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004260 <HAL_TIM_Base_Start+0xb8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <HAL_TIM_Base_Start+0xbc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004268 <HAL_TIM_Base_Start+0xc0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <HAL_TIM_Base_Start+0xc4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <HAL_TIM_Base_Start+0xc8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIM_Base_Start+0x70>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <HAL_TIM_Base_Start+0xcc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d111      	bne.n	800423c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b06      	cmp	r3, #6
 8004228:	d010      	beq.n	800424c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	e007      	b.n	800424c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40010000 	.word	0x40010000
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40000c00 	.word	0x40000c00
 800426c:	40010400 	.word	0x40010400
 8004270:	40014000 	.word	0x40014000
 8004274:	40001800 	.word	0x40001800

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x1c>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b4      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x186>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd4>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	f000 8086 	beq.w	80043ea <HAL_TIM_ConfigClockSource+0x172>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b70      	cmp	r3, #112	@ 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa6>
 80042e8:	2b70      	cmp	r3, #112	@ 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b60      	cmp	r3, #96	@ 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x11a>
 80042f0:	2b60      	cmp	r3, #96	@ 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b50      	cmp	r3, #80	@ 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xfa>
 80042f8:	2b50      	cmp	r3, #80	@ 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b40      	cmp	r3, #64	@ 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	f000 f991 	bl	8004654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04f      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	f000 f97a 	bl	8004654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	461a      	mov	r2, r3
 8004380:	f000 f8ee 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	@ 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f947 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 8004390:	e02c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 f90d 	bl	80045be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	@ 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f937 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 f8ce 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	@ 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f927 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 f91e 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 80043e2:	e003      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a46      	ldr	r2, [pc, #280]	@ (8004534 <TIM_Base_SetConfig+0x12c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a43      	ldr	r2, [pc, #268]	@ (8004538 <TIM_Base_SetConfig+0x130>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a42      	ldr	r2, [pc, #264]	@ (800453c <TIM_Base_SetConfig+0x134>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a41      	ldr	r2, [pc, #260]	@ (8004540 <TIM_Base_SetConfig+0x138>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a40      	ldr	r2, [pc, #256]	@ (8004544 <TIM_Base_SetConfig+0x13c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a35      	ldr	r2, [pc, #212]	@ (8004534 <TIM_Base_SetConfig+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004468:	d027      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a32      	ldr	r2, [pc, #200]	@ (8004538 <TIM_Base_SetConfig+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d023      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a31      	ldr	r2, [pc, #196]	@ (800453c <TIM_Base_SetConfig+0x134>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01f      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a30      	ldr	r2, [pc, #192]	@ (8004540 <TIM_Base_SetConfig+0x138>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2f      	ldr	r2, [pc, #188]	@ (8004544 <TIM_Base_SetConfig+0x13c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d017      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2e      	ldr	r2, [pc, #184]	@ (8004548 <TIM_Base_SetConfig+0x140>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2d      	ldr	r2, [pc, #180]	@ (800454c <TIM_Base_SetConfig+0x144>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00f      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2c      	ldr	r2, [pc, #176]	@ (8004550 <TIM_Base_SetConfig+0x148>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004554 <TIM_Base_SetConfig+0x14c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004558 <TIM_Base_SetConfig+0x150>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a29      	ldr	r2, [pc, #164]	@ (800455c <TIM_Base_SetConfig+0x154>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a10      	ldr	r2, [pc, #64]	@ (8004534 <TIM_Base_SetConfig+0x12c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_Base_SetConfig+0xf8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a12      	ldr	r2, [pc, #72]	@ (8004544 <TIM_Base_SetConfig+0x13c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d103      	bne.n	8004508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	611a      	str	r2, [r3, #16]
  }
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40010000 	.word	0x40010000
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800
 8004540:	40000c00 	.word	0x40000c00
 8004544:	40010400 	.word	0x40010400
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800
 8004554:	40001800 	.word	0x40001800
 8004558:	40001c00 	.word	0x40001c00
 800455c:	40002000 	.word	0x40002000

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f023 0210 	bic.w	r2, r3, #16
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	031b      	lsls	r3, r3, #12
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	f043 0307 	orr.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	431a      	orrs	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e05a      	b.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f8:	d01d      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1b      	ldr	r2, [pc, #108]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40010400 	.word	0x40010400
 8004784:	40014000 	.word	0x40014000
 8004788:	40001800 	.word	0x40001800

0800478c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800478c:	b084      	sub	sp, #16
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	f107 001c 	add.w	r0, r7, #28
 800479a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800479e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d123      	bne.n	80047ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80047ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 fae8 	bl	8005db8 <USB_CoreReset>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e01b      	b.n	8004826 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f001 fadc 	bl	8005db8 <USB_CoreReset>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004804:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
 8004818:	e005      	b.n	8004826 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004826:	7fbb      	ldrb	r3, [r7, #30]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10b      	bne.n	8004844 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f043 0206 	orr.w	r2, r3, #6
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004850:	b004      	add	sp, #16
 8004852:	4770      	bx	lr

08004854 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d165      	bne.n	8004934 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4a41      	ldr	r2, [pc, #260]	@ (8004970 <USB_SetTurnaroundTime+0x11c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d906      	bls.n	800487e <USB_SetTurnaroundTime+0x2a>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a40      	ldr	r2, [pc, #256]	@ (8004974 <USB_SetTurnaroundTime+0x120>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d202      	bcs.n	800487e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004878:	230f      	movs	r3, #15
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e062      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4a3c      	ldr	r2, [pc, #240]	@ (8004974 <USB_SetTurnaroundTime+0x120>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d306      	bcc.n	8004894 <USB_SetTurnaroundTime+0x40>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a3b      	ldr	r2, [pc, #236]	@ (8004978 <USB_SetTurnaroundTime+0x124>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d202      	bcs.n	8004894 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800488e:	230e      	movs	r3, #14
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e057      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4a38      	ldr	r2, [pc, #224]	@ (8004978 <USB_SetTurnaroundTime+0x124>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d306      	bcc.n	80048aa <USB_SetTurnaroundTime+0x56>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4a37      	ldr	r2, [pc, #220]	@ (800497c <USB_SetTurnaroundTime+0x128>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d202      	bcs.n	80048aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048a4:	230d      	movs	r3, #13
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e04c      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a33      	ldr	r2, [pc, #204]	@ (800497c <USB_SetTurnaroundTime+0x128>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d306      	bcc.n	80048c0 <USB_SetTurnaroundTime+0x6c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a32      	ldr	r2, [pc, #200]	@ (8004980 <USB_SetTurnaroundTime+0x12c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d802      	bhi.n	80048c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048ba:	230c      	movs	r3, #12
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e041      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004980 <USB_SetTurnaroundTime+0x12c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d906      	bls.n	80048d6 <USB_SetTurnaroundTime+0x82>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004984 <USB_SetTurnaroundTime+0x130>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d802      	bhi.n	80048d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048d0:	230b      	movs	r3, #11
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e036      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004984 <USB_SetTurnaroundTime+0x130>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d906      	bls.n	80048ec <USB_SetTurnaroundTime+0x98>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a29      	ldr	r2, [pc, #164]	@ (8004988 <USB_SetTurnaroundTime+0x134>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d802      	bhi.n	80048ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048e6:	230a      	movs	r3, #10
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e02b      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <USB_SetTurnaroundTime+0x134>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d906      	bls.n	8004902 <USB_SetTurnaroundTime+0xae>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a25      	ldr	r2, [pc, #148]	@ (800498c <USB_SetTurnaroundTime+0x138>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d202      	bcs.n	8004902 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048fc:	2309      	movs	r3, #9
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e020      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a21      	ldr	r2, [pc, #132]	@ (800498c <USB_SetTurnaroundTime+0x138>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d306      	bcc.n	8004918 <USB_SetTurnaroundTime+0xc4>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a20      	ldr	r2, [pc, #128]	@ (8004990 <USB_SetTurnaroundTime+0x13c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d802      	bhi.n	8004918 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004912:	2308      	movs	r3, #8
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e015      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <USB_SetTurnaroundTime+0x13c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d906      	bls.n	800492e <USB_SetTurnaroundTime+0xda>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <USB_SetTurnaroundTime+0x140>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d202      	bcs.n	800492e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004928:	2307      	movs	r3, #7
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e00a      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800492e:	2306      	movs	r3, #6
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e007      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800493a:	2309      	movs	r3, #9
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e001      	b.n	8004944 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004940:	2309      	movs	r3, #9
 8004942:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	029b      	lsls	r3, r3, #10
 8004958:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	00d8acbf 	.word	0x00d8acbf
 8004974:	00e4e1c0 	.word	0x00e4e1c0
 8004978:	00f42400 	.word	0x00f42400
 800497c:	01067380 	.word	0x01067380
 8004980:	011a499f 	.word	0x011a499f
 8004984:	01312cff 	.word	0x01312cff
 8004988:	014ca43f 	.word	0x014ca43f
 800498c:	016e3600 	.word	0x016e3600
 8004990:	01a6ab1f 	.word	0x01a6ab1f
 8004994:	01e84800 	.word	0x01e84800

08004998 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d115      	bne.n	8004a2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	f7fc f92c 	bl	8000c68 <HAL_Delay>
      ms += 10U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	330a      	adds	r3, #10
 8004a14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 f93f 	bl	8005c9a <USB_GetMode>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d01e      	beq.n	8004a60 <USB_SetCurrentMode+0x84>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a26:	d9f0      	bls.n	8004a0a <USB_SetCurrentMode+0x2e>
 8004a28:	e01a      	b.n	8004a60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d115      	bne.n	8004a5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a3c:	200a      	movs	r0, #10
 8004a3e:	f7fc f913 	bl	8000c68 <HAL_Delay>
      ms += 10U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	330a      	adds	r3, #10
 8004a46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 f926 	bl	8005c9a <USB_GetMode>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <USB_SetCurrentMode+0x84>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a58:	d9f0      	bls.n	8004a3c <USB_SetCurrentMode+0x60>
 8004a5a:	e001      	b.n	8004a60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e005      	b.n	8004a6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a64:	d101      	bne.n	8004a6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a74:	b084      	sub	sp, #16
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e009      	b.n	8004aa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3340      	adds	r3, #64	@ 0x40
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b0e      	cmp	r3, #14
 8004aac:	d9f2      	bls.n	8004a94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004aae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11c      	bne.n	8004af0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
 8004aee:	e00b      	b.n	8004b08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10d      	bne.n	8004b38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b24:	2100      	movs	r1, #0
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f968 	bl	8004dfc <USB_SetDevSpeed>
 8004b2c:	e008      	b.n	8004b40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b2e:	2101      	movs	r1, #1
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f963 	bl	8004dfc <USB_SetDevSpeed>
 8004b36:	e003      	b.n	8004b40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b38:	2103      	movs	r1, #3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f95e 	bl	8004dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b40:	2110      	movs	r1, #16
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8fa 	bl	8004d3c <USB_FlushTxFifo>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f924 	bl	8004da0 <USB_FlushRxFifo>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b80:	461a      	mov	r2, r3
 8004b82:	2300      	movs	r3, #0
 8004b84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e043      	b.n	8004c14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba2:	d118      	bne.n	8004bd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e013      	b.n	8004be8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	e008      	b.n	8004be8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	2300      	movs	r3, #0
 8004be6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c06:	461a      	mov	r2, r3
 8004c08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c18:	461a      	mov	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d3b5      	bcc.n	8004b8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e043      	b.n	8004cae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c3c:	d118      	bne.n	8004c70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e013      	b.n	8004c82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c66:	461a      	mov	r2, r3
 8004c68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e008      	b.n	8004c82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3301      	adds	r3, #1
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d3b5      	bcc.n	8004c26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ccc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004cda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f043 0210 	orr.w	r2, r3, #16
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <USB_DevInit+0x2c4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f043 0208 	orr.w	r2, r3, #8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d34:	b004      	add	sp, #16
 8004d36:	4770      	bx	lr
 8004d38:	803c3800 	.word	0x803c3800

08004d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d56:	d901      	bls.n	8004d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e01b      	b.n	8004d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	daf2      	bge.n	8004d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	019b      	lsls	r3, r3, #6
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d80:	d901      	bls.n	8004d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e006      	b.n	8004d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d0f0      	beq.n	8004d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db8:	d901      	bls.n	8004dbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e018      	b.n	8004df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	daf2      	bge.n	8004dac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ddc:	d901      	bls.n	8004de2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e006      	b.n	8004df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d0f0      	beq.n	8004dd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
 8004e52:	e00a      	b.n	8004e6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d002      	beq.n	8004e60 <USB_GetDevSpeed+0x32>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d102      	bne.n	8004e66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e60:	2302      	movs	r3, #2
 8004e62:	75fb      	strb	r3, [r7, #23]
 8004e64:	e001      	b.n	8004e6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e66:	230f      	movs	r3, #15
 8004e68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d13a      	bne.n	8004f0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d155      	bne.n	8004f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	791b      	ldrb	r3, [r3, #4]
 8004ee6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ee8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	059b      	lsls	r3, r3, #22
 8004eee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e036      	b.n	8004f78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d11a      	bne.n	8004f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d161      	bne.n	8005068 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fba:	d11f      	bne.n	8004ffc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800501c:	4013      	ands	r3, r2
 800501e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005040:	4013      	ands	r3, r2
 8005042:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	0159      	lsls	r1, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	440b      	add	r3, r1
 800505a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505e:	4619      	mov	r1, r3
 8005060:	4b35      	ldr	r3, [pc, #212]	@ (8005138 <USB_DeactivateEndpoint+0x1b0>)
 8005062:	4013      	ands	r3, r2
 8005064:	600b      	str	r3, [r1, #0]
 8005066:	e060      	b.n	800512a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800507a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800507e:	d11f      	bne.n	80050c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800509a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800509e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	43db      	mvns	r3, r3
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e0:	4013      	ands	r3, r2
 80050e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	43db      	mvns	r3, r3
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0159      	lsls	r1, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	440b      	add	r3, r1
 800511e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005122:	4619      	mov	r1, r3
 8005124:	4b05      	ldr	r3, [pc, #20]	@ (800513c <USB_DeactivateEndpoint+0x1b4>)
 8005126:	4013      	ands	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	ec337800 	.word	0xec337800
 800513c:	eff37800 	.word	0xeff37800

08005140 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	@ 0x28
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b01      	cmp	r3, #1
 800515e:	f040 817f 	bne.w	8005460 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d132      	bne.n	80051d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005184:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005188:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800518c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051c8:	0cdb      	lsrs	r3, r3, #19
 80051ca:	04db      	lsls	r3, r3, #19
 80051cc:	6113      	str	r3, [r2, #16]
 80051ce:	e097      	b.n	8005300 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ea:	0cdb      	lsrs	r3, r3, #19
 80051ec:	04db      	lsls	r3, r3, #19
 80051ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800520a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800520e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005212:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11a      	bne.n	8005250 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d903      	bls.n	800522e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005248:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800524c:	6113      	str	r3, [r2, #16]
 800524e:	e044      	b.n	80052da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4413      	add	r3, r2
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	8afb      	ldrh	r3, [r7, #22]
 8005276:	04d9      	lsls	r1, r3, #19
 8005278:	4ba4      	ldr	r3, [pc, #656]	@ (800550c <USB_EPStartXfer+0x3cc>)
 800527a:	400b      	ands	r3, r1
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	0148      	lsls	r0, r1, #5
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	4401      	add	r1, r0
 8005284:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005288:	4313      	orrs	r3, r2
 800528a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d122      	bne.n	80052da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80052b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	8afb      	ldrh	r3, [r7, #22]
 80052c4:	075b      	lsls	r3, r3, #29
 80052c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	0148      	lsls	r0, r1, #5
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	4401      	add	r1, r0
 80052d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052d6:	4313      	orrs	r3, r2
 80052d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	0148      	lsls	r0, r1, #5
 80052f4:	69f9      	ldr	r1, [r7, #28]
 80052f6:	4401      	add	r1, r0
 80052f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052fc:	4313      	orrs	r3, r2
 80052fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d14b      	bne.n	800539e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	791b      	ldrb	r3, [r3, #4]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d128      	bne.n	800537c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d110      	bne.n	800535c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e00f      	b.n	800537c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005396:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e166      	b.n	800566c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	791b      	ldrb	r3, [r3, #4]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d015      	beq.n	80053f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 814e 	beq.w	800566c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80053f0:	e13c      	b.n	800566c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d110      	bne.n	8005424 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00f      	b.n	8005444 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005442:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68d9      	ldr	r1, [r3, #12]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781a      	ldrb	r2, [r3, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	b298      	uxth	r0, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	4603      	mov	r3, r0
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f9b9 	bl	80057d0 <USB_WritePacket>
 800545e:	e105      	b.n	800566c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800547a:	0cdb      	lsrs	r3, r3, #19
 800547c:	04db      	lsls	r3, r3, #19
 800547e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800549a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800549e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d132      	bne.n	8005510 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d8:	69b9      	ldr	r1, [r7, #24]
 80054da:	0148      	lsls	r0, r1, #5
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	4401      	add	r1, r0
 80054e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054e4:	4313      	orrs	r3, r2
 80054e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005502:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005506:	6113      	str	r3, [r2, #16]
 8005508:	e062      	b.n	80055d0 <USB_EPStartXfer+0x490>
 800550a:	bf00      	nop
 800550c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d123      	bne.n	8005560 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552e:	69b9      	ldr	r1, [r7, #24]
 8005530:	0148      	lsls	r0, r1, #5
 8005532:	69f9      	ldr	r1, [r7, #28]
 8005534:	4401      	add	r1, r0
 8005536:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800555c:	6113      	str	r3, [r2, #16]
 800555e:	e037      	b.n	80055d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4413      	add	r3, r2
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	8afa      	ldrh	r2, [r7, #22]
 800557c:	fb03 f202 	mul.w	r2, r3, r2
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	04d9      	lsls	r1, r3, #19
 8005596:	4b38      	ldr	r3, [pc, #224]	@ (8005678 <USB_EPStartXfer+0x538>)
 8005598:	400b      	ands	r3, r1
 800559a:	69b9      	ldr	r1, [r7, #24]
 800559c:	0148      	lsls	r0, r1, #5
 800559e:	69f9      	ldr	r1, [r7, #28]
 80055a0:	4401      	add	r1, r0
 80055a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055a6:	4313      	orrs	r3, r2
 80055a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	0148      	lsls	r0, r1, #5
 80055c4:	69f9      	ldr	r1, [r7, #28]
 80055c6:	4401      	add	r1, r0
 80055c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055cc:	4313      	orrs	r3, r2
 80055ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10d      	bne.n	80055f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ee:	460a      	mov	r2, r1
 80055f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	791b      	ldrb	r3, [r3, #4]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d128      	bne.n	800564c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d110      	bne.n	800562c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005624:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e00f      	b.n	800564c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800564a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	0151      	lsls	r1, r2, #5
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	440a      	add	r2, r1
 8005662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005666:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800566a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	1ff80000 	.word	0x1ff80000

0800567c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d14a      	bne.n	8005730 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b2:	f040 8086 	bne.w	80057c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f242 7210 	movw	r2, #10000	@ 0x2710
 800570a:	4293      	cmp	r3, r2
 800570c:	d902      	bls.n	8005714 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
          break;
 8005712:	e056      	b.n	80057c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800572c:	d0e7      	beq.n	80056fe <USB_EPStopXfer+0x82>
 800572e:	e048      	b.n	80057c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005748:	d13b      	bne.n	80057c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005768:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800576c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800578c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3301      	adds	r3, #1
 8005796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800579e:	4293      	cmp	r3, r2
 80057a0:	d902      	bls.n	80057a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
          break;
 80057a6:	e00c      	b.n	80057c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c0:	d0e7      	beq.n	8005792 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	@ 0x24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4611      	mov	r1, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	460b      	mov	r3, r1
 80057e0:	71fb      	strb	r3, [r7, #7]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d123      	bne.n	800583e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057f6:	88bb      	ldrh	r3, [r7, #4]
 80057f8:	3303      	adds	r3, #3
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e018      	b.n	8005836 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	031a      	lsls	r2, r3, #12
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005810:	461a      	mov	r2, r3
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	3301      	adds	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3301      	adds	r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	3301      	adds	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3e2      	bcc.n	8005804 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3724      	adds	r7, #36	@ 0x24
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800584c:	b480      	push	{r7}
 800584e:	b08b      	sub	sp, #44	@ 0x2c
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	b29b      	uxth	r3, r3
 8005868:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	e014      	b.n	80058a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	601a      	str	r2, [r3, #0]
    pDest++;
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	3301      	adds	r3, #1
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	3301      	adds	r3, #1
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	3301      	adds	r3, #1
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	3301      	adds	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	3301      	adds	r3, #1
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3e6      	bcc.n	8005878 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058aa:	8bfb      	ldrh	r3, [r7, #30]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01e      	beq.n	80058ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ba:	461a      	mov	r2, r3
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	701a      	strb	r2, [r3, #0]
      i++;
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	3301      	adds	r3, #1
 80058da:	623b      	str	r3, [r7, #32]
      pDest++;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	3301      	adds	r3, #1
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058e2:	8bfb      	ldrh	r3, [r7, #30]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058e8:	8bfb      	ldrh	r3, [r7, #30]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1ea      	bne.n	80058c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	372c      	adds	r7, #44	@ 0x2c
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d12c      	bne.n	8005972 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	db12      	blt.n	8005950 <USB_EPSetStall+0x54>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00f      	beq.n	8005950 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800594e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800596a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e02b      	b.n	80059ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	db12      	blt.n	80059aa <USB_EPSetStall+0xae>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00f      	beq.n	80059aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d128      	bne.n	8005a46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	791b      	ldrb	r3, [r3, #4]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d003      	beq.n	8005a24 <USB_EPClearStall+0x4c>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	791b      	ldrb	r3, [r3, #4]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d138      	bne.n	8005a96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e027      	b.n	8005a96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d003      	beq.n	8005a76 <USB_EPClearStall+0x9e>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	791b      	ldrb	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d10f      	bne.n	8005a96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ac6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005ad8:	68f9      	ldr	r1, [r7, #12]
 8005ada:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b1e:	f023 0302 	bic.w	r3, r3, #2
 8005b22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	0c1b      	lsrs	r3, r3, #16
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	b29b      	uxth	r3, r3
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c30:	68bb      	ldr	r3, [r7, #8]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	01db      	lsls	r3, r3, #7
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	460b      	mov	r3, r1
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	333c      	adds	r3, #60	@ 0x3c
 8005d12:	3304      	adds	r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4a26      	ldr	r2, [pc, #152]	@ (8005db4 <USB_EP0_OutStart+0xb8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d90a      	bls.n	8005d36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d30:	d101      	bne.n	8005d36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e037      	b.n	8005da6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d64:	f043 0318 	orr.w	r3, r3, #24
 8005d68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10f      	bne.n	8005da4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	4f54300a 	.word	0x4f54300a

08005db8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dd0:	d901      	bls.n	8005dd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e01b      	b.n	8005e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	daf2      	bge.n	8005dc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f043 0201 	orr.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfa:	d901      	bls.n	8005e00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e006      	b.n	8005e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d0f0      	beq.n	8005dee <USB_CoreReset+0x36>

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005e28:	2010      	movs	r0, #16
 8005e2a:	f002 f92b 	bl	8008084 <USBD_static_malloc>
 8005e2e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	32b0      	adds	r2, #176	@ 0xb0
 8005e40:	2100      	movs	r1, #0
 8005e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e46:	2302      	movs	r3, #2
 8005e48:	e048      	b.n	8005edc <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	32b0      	adds	r2, #176	@ 0xb0
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	32b0      	adds	r2, #176	@ 0xb0
 8005e64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7c1b      	ldrb	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005e76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee4 <USBD_HID_Init+0xc8>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	3326      	adds	r3, #38	@ 0x26
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e00c      	b.n	8005eac <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <USBD_HID_Init+0xc8>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	3326      	adds	r3, #38	@ 0x26
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <USBD_HID_Init+0xc8>)
 8005eae:	7819      	ldrb	r1, [r3, #0]
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 ffd4 	bl	8007e62 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <USBD_HID_Init+0xc8>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3324      	adds	r3, #36	@ 0x24
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	200000b2 	.word	0x200000b2

08005ee8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f74 <USBD_HID_DeInit+0x8c>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 ffd7 	bl	8007eae <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005f00:	4b1c      	ldr	r3, [pc, #112]	@ (8005f74 <USBD_HID_DeInit+0x8c>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3324      	adds	r3, #36	@ 0x24
 8005f16:	2200      	movs	r2, #0
 8005f18:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005f1a:	4b16      	ldr	r3, [pc, #88]	@ (8005f74 <USBD_HID_DeInit+0x8c>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f003 020f 	and.w	r2, r3, #15
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3326      	adds	r3, #38	@ 0x26
 8005f30:	2200      	movs	r2, #0
 8005f32:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	32b0      	adds	r2, #176	@ 0xb0
 8005f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	32b0      	adds	r2, #176	@ 0xb0
 8005f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f002 f8a3 	bl	80080a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	32b0      	adds	r2, #176	@ 0xb0
 8005f64:	2100      	movs	r1, #0
 8005f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200000b2 	.word	0x200000b2

08005f78 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	32b0      	adds	r2, #176	@ 0xb0
 8005f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f90:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e0e8      	b.n	8006176 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d046      	beq.n	800603e <USBD_HID_Setup+0xc6>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	f040 80d8 	bne.w	8006166 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	3b02      	subs	r3, #2
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d836      	bhi.n	800602e <USBD_HID_Setup+0xb6>
 8005fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc8 <USBD_HID_Setup+0x50>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	0800601f 	.word	0x0800601f
 8005fcc:	08005fff 	.word	0x08005fff
 8005fd0:	0800602f 	.word	0x0800602f
 8005fd4:	0800602f 	.word	0x0800602f
 8005fd8:	0800602f 	.word	0x0800602f
 8005fdc:	0800602f 	.word	0x0800602f
 8005fe0:	0800602f 	.word	0x0800602f
 8005fe4:	0800602f 	.word	0x0800602f
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08005ff1 	.word	0x08005ff1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	885b      	ldrh	r3, [r3, #2]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]
          break;
 8005ffc:	e01e      	b.n	800603c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fbe5 	bl	80077d4 <USBD_CtlSendData>
          break;
 800600a:	e017      	b.n	800603c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	885b      	ldrh	r3, [r3, #2]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	b29b      	uxth	r3, r3
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
          break;
 800601c:	e00e      	b.n	800603c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	2201      	movs	r2, #1
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fbd4 	bl	80077d4 <USBD_CtlSendData>
          break;
 800602c:	e006      	b.n	800603c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fb52 	bl	80076da <USBD_CtlError>
          ret = USBD_FAIL;
 8006036:	2303      	movs	r3, #3
 8006038:	75fb      	strb	r3, [r7, #23]
          break;
 800603a:	bf00      	nop
      }
      break;
 800603c:	e09a      	b.n	8006174 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b0b      	cmp	r3, #11
 8006044:	f200 8086 	bhi.w	8006154 <USBD_HID_Setup+0x1dc>
 8006048:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <USBD_HID_Setup+0xd8>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006081 	.word	0x08006081
 8006054:	08006163 	.word	0x08006163
 8006058:	08006155 	.word	0x08006155
 800605c:	08006155 	.word	0x08006155
 8006060:	08006155 	.word	0x08006155
 8006064:	08006155 	.word	0x08006155
 8006068:	080060ab 	.word	0x080060ab
 800606c:	08006155 	.word	0x08006155
 8006070:	08006155 	.word	0x08006155
 8006074:	08006155 	.word	0x08006155
 8006078:	08006103 	.word	0x08006103
 800607c:	0800612d 	.word	0x0800612d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b03      	cmp	r3, #3
 800608a:	d107      	bne.n	800609c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800608c:	f107 030a 	add.w	r3, r7, #10
 8006090:	2202      	movs	r2, #2
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fb9d 	bl	80077d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800609a:	e063      	b.n	8006164 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fb1b 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	75fb      	strb	r3, [r7, #23]
          break;
 80060a8:	e05c      	b.n	8006164 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	885b      	ldrh	r3, [r3, #2]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b22      	cmp	r3, #34	@ 0x22
 80060b4:	d108      	bne.n	80060c8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	88db      	ldrh	r3, [r3, #6]
 80060ba:	2b32      	cmp	r3, #50	@ 0x32
 80060bc:	bf28      	it	cs
 80060be:	2332      	movcs	r3, #50	@ 0x32
 80060c0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80060c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <USBD_HID_Setup+0x208>)
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	e015      	b.n	80060f4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	885b      	ldrh	r3, [r3, #2]
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b21      	cmp	r3, #33	@ 0x21
 80060d2:	d108      	bne.n	80060e6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80060d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006184 <USBD_HID_Setup+0x20c>)
 80060d6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	88db      	ldrh	r3, [r3, #6]
 80060dc:	2b09      	cmp	r3, #9
 80060de:	bf28      	it	cs
 80060e0:	2309      	movcs	r3, #9
 80060e2:	82bb      	strh	r3, [r7, #20]
 80060e4:	e006      	b.n	80060f4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 faf6 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 80060ee:	2303      	movs	r3, #3
 80060f0:	75fb      	strb	r3, [r7, #23]
            break;
 80060f2:	e037      	b.n	8006164 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80060f4:	8abb      	ldrh	r3, [r7, #20]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6939      	ldr	r1, [r7, #16]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fb6a 	bl	80077d4 <USBD_CtlSendData>
          break;
 8006100:	e030      	b.n	8006164 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b03      	cmp	r3, #3
 800610c:	d107      	bne.n	800611e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3308      	adds	r3, #8
 8006112:	2201      	movs	r2, #1
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fb5c 	bl	80077d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800611c:	e022      	b.n	8006164 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 fada 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 8006126:	2303      	movs	r3, #3
 8006128:	75fb      	strb	r3, [r7, #23]
          break;
 800612a:	e01b      	b.n	8006164 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b03      	cmp	r3, #3
 8006136:	d106      	bne.n	8006146 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	885b      	ldrh	r3, [r3, #2]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006144:	e00e      	b.n	8006164 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fac6 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 800614e:	2303      	movs	r3, #3
 8006150:	75fb      	strb	r3, [r7, #23]
          break;
 8006152:	e007      	b.n	8006164 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fabf 	bl	80076da <USBD_CtlError>
          ret = USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	75fb      	strb	r3, [r7, #23]
          break;
 8006160:	e000      	b.n	8006164 <USBD_HID_Setup+0x1ec>
          break;
 8006162:	bf00      	nop
      }
      break;
 8006164:	e006      	b.n	8006174 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 fab6 	bl	80076da <USBD_CtlError>
      ret = USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	75fb      	strb	r3, [r7, #23]
      break;
 8006172:	bf00      	nop
  }

  return (uint8_t)ret;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000080 	.word	0x20000080
 8006184:	20000068 	.word	0x20000068

08006188 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	32b0      	adds	r2, #176	@ 0xb0
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e014      	b.n	80061da <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d10d      	bne.n	80061d8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	7b1b      	ldrb	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2201      	movs	r2, #1
 80061c8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <USBD_HID_SendReport+0x5c>)
 80061cc:	7819      	ldrb	r1, [r3, #0]
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f001 ff13 	bl	8007ffe <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200000b2 	.word	0x200000b2

080061e8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80061f0:	2181      	movs	r1, #129	@ 0x81
 80061f2:	4809      	ldr	r0, [pc, #36]	@ (8006218 <USBD_HID_GetFSCfgDesc+0x30>)
 80061f4:	f000 fc3b 	bl	8006a6e <USBD_GetEpDesc>
 80061f8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	220a      	movs	r2, #10
 8006204:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2222      	movs	r2, #34	@ 0x22
 800620a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800620c:	4b02      	ldr	r3, [pc, #8]	@ (8006218 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000044 	.word	0x20000044

0800621c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006224:	2181      	movs	r1, #129	@ 0x81
 8006226:	4809      	ldr	r0, [pc, #36]	@ (800624c <USBD_HID_GetHSCfgDesc+0x30>)
 8006228:	f000 fc21 	bl	8006a6e <USBD_GetEpDesc>
 800622c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2207      	movs	r2, #7
 8006238:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2222      	movs	r2, #34	@ 0x22
 800623e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006240:	4b02      	ldr	r3, [pc, #8]	@ (800624c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000044 	.word	0x20000044

08006250 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006258:	2181      	movs	r1, #129	@ 0x81
 800625a:	4809      	ldr	r0, [pc, #36]	@ (8006280 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800625c:	f000 fc07 	bl	8006a6e <USBD_GetEpDesc>
 8006260:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	220a      	movs	r2, #10
 800626c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2222      	movs	r2, #34	@ 0x22
 8006272:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006274:	4b02      	ldr	r3, [pc, #8]	@ (8006280 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000044 	.word	0x20000044

08006284 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	32b0      	adds	r2, #176	@ 0xb0
 800629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629e:	2200      	movs	r2, #0
 80062a0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	220a      	movs	r2, #10
 80062bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80062be:	4b03      	ldr	r3, [pc, #12]	@ (80062cc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	20000074 	.word	0x20000074

080062d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e01f      	b.n	8006328 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	79fa      	ldrb	r2, [r7, #7]
 800631a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f001 fd39 	bl	8007d94 <USBD_LL_Init>
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	e025      	b.n	8006394 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32ae      	adds	r2, #174	@ 0xae
 800635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	32ae      	adds	r2, #174	@ 0xae
 800636e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	f107 020e 	add.w	r2, r7, #14
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fd41 	bl	8007e2c <USBD_LL_Start>
 80063aa:	4603      	mov	r3, r0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	4611      	mov	r1, r2
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	4611      	mov	r1, r2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f90c 	bl	8007666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800645c:	461a      	mov	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2b02      	cmp	r3, #2
 8006470:	d01a      	beq.n	80064a8 <USBD_LL_SetupStage+0x72>
 8006472:	2b02      	cmp	r3, #2
 8006474:	d822      	bhi.n	80064bc <USBD_LL_SetupStage+0x86>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <USBD_LL_SetupStage+0x4a>
 800647a:	2b01      	cmp	r3, #1
 800647c:	d00a      	beq.n	8006494 <USBD_LL_SetupStage+0x5e>
 800647e:	e01d      	b.n	80064bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fb63 	bl	8006b54 <USBD_StdDevReq>
 800648e:	4603      	mov	r3, r0
 8006490:	73fb      	strb	r3, [r7, #15]
      break;
 8006492:	e020      	b.n	80064d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fbcb 	bl	8006c38 <USBD_StdItfReq>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]
      break;
 80064a6:	e016      	b.n	80064d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc2d 	bl	8006d10 <USBD_StdEPReq>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ba:	e00c      	b.n	80064d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fd0e 	bl	8007eec <USBD_LL_StallEP>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	bf00      	nop
  }

  return ret;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	460b      	mov	r3, r1
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d16e      	bne.n	80065d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80064fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006506:	2b03      	cmp	r3, #3
 8006508:	f040 8098 	bne.w	800663c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d913      	bls.n	8006540 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	1ad2      	subs	r2, r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	4293      	cmp	r3, r2
 8006530:	bf28      	it	cs
 8006532:	4613      	movcs	r3, r2
 8006534:	461a      	mov	r2, r3
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 f977 	bl	800782c <USBD_CtlContinueRx>
 800653e:	e07d      	b.n	800663c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2b02      	cmp	r3, #2
 800654c:	d014      	beq.n	8006578 <USBD_LL_DataOutStage+0x98>
 800654e:	2b02      	cmp	r3, #2
 8006550:	d81d      	bhi.n	800658e <USBD_LL_DataOutStage+0xae>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <USBD_LL_DataOutStage+0x7c>
 8006556:	2b01      	cmp	r3, #1
 8006558:	d003      	beq.n	8006562 <USBD_LL_DataOutStage+0x82>
 800655a:	e018      	b.n	800658e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	75bb      	strb	r3, [r7, #22]
            break;
 8006560:	e018      	b.n	8006594 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006568:	b2db      	uxtb	r3, r3
 800656a:	4619      	mov	r1, r3
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fa64 	bl	8006a3a <USBD_CoreFindIF>
 8006572:	4603      	mov	r3, r0
 8006574:	75bb      	strb	r3, [r7, #22]
            break;
 8006576:	e00d      	b.n	8006594 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800657e:	b2db      	uxtb	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fa66 	bl	8006a54 <USBD_CoreFindEP>
 8006588:	4603      	mov	r3, r0
 800658a:	75bb      	strb	r3, [r7, #22]
            break;
 800658c:	e002      	b.n	8006594 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	75bb      	strb	r3, [r7, #22]
            break;
 8006592:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006594:	7dbb      	ldrb	r3, [r7, #22]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d119      	bne.n	80065ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d113      	bne.n	80065ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80065a6:	7dba      	ldrb	r2, [r7, #22]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	32ae      	adds	r2, #174	@ 0xae
 80065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80065b6:	7dba      	ldrb	r2, [r7, #22]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065be:	7dba      	ldrb	r2, [r7, #22]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	32ae      	adds	r2, #174	@ 0xae
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f001 f93d 	bl	800784e <USBD_CtlSendStatus>
 80065d4:	e032      	b.n	800663c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4619      	mov	r1, r3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fa37 	bl	8006a54 <USBD_CoreFindEP>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
 80065ec:	2bff      	cmp	r3, #255	@ 0xff
 80065ee:	d025      	beq.n	800663c <USBD_LL_DataOutStage+0x15c>
 80065f0:	7dbb      	ldrb	r3, [r7, #22]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d122      	bne.n	800663c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d117      	bne.n	8006632 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006602:	7dba      	ldrb	r2, [r7, #22]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	32ae      	adds	r2, #174	@ 0xae
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00f      	beq.n	8006632 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006612:	7dba      	ldrb	r2, [r7, #22]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800661a:	7dba      	ldrb	r2, [r7, #22]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	32ae      	adds	r2, #174	@ 0xae
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	7afa      	ldrb	r2, [r7, #11]
 8006628:	4611      	mov	r1, r2
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	4798      	blx	r3
 800662e:	4603      	mov	r3, r0
 8006630:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	e000      	b.n	800663e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	460b      	mov	r3, r1
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d16f      	bne.n	800673a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3314      	adds	r3, #20
 800665e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006666:	2b02      	cmp	r3, #2
 8006668:	d15a      	bne.n	8006720 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	429a      	cmp	r2, r3
 8006674:	d914      	bls.n	80066a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	461a      	mov	r2, r3
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f001 f8bc 	bl	800780a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006692:	2300      	movs	r3, #0
 8006694:	2200      	movs	r2, #0
 8006696:	2100      	movs	r1, #0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f001 fcd1 	bl	8008040 <USBD_LL_PrepareReceive>
 800669e:	e03f      	b.n	8006720 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d11c      	bne.n	80066e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d316      	bcc.n	80066e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d20f      	bcs.n	80066e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066c6:	2200      	movs	r2, #0
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f001 f89d 	bl	800780a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066d8:	2300      	movs	r3, #0
 80066da:	2200      	movs	r2, #0
 80066dc:	2100      	movs	r1, #0
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f001 fcae 	bl	8008040 <USBD_LL_PrepareReceive>
 80066e4:	e01c      	b.n	8006720 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d10f      	bne.n	8006712 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006712:	2180      	movs	r1, #128	@ 0x80
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f001 fbe9 	bl	8007eec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f001 f8aa 	bl	8007874 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d03a      	beq.n	80067a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff fe42 	bl	80063b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006738:	e032      	b.n	80067a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006740:	b2db      	uxtb	r3, r3
 8006742:	4619      	mov	r1, r3
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f985 	bl	8006a54 <USBD_CoreFindEP>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2bff      	cmp	r3, #255	@ 0xff
 8006752:	d025      	beq.n	80067a0 <USBD_LL_DataInStage+0x15a>
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d122      	bne.n	80067a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d11c      	bne.n	80067a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006766:	7dfa      	ldrb	r2, [r7, #23]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	32ae      	adds	r2, #174	@ 0xae
 800676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d014      	beq.n	80067a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006776:	7dfa      	ldrb	r2, [r7, #23]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800677e:	7dfa      	ldrb	r2, [r7, #23]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	32ae      	adds	r2, #174	@ 0xae
 8006784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	7afa      	ldrb	r2, [r7, #11]
 800678c:	4611      	mov	r1, r2
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	4798      	blx	r3
 8006792:	4603      	mov	r3, r0
 8006794:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006796:	7dbb      	ldrb	r3, [r7, #22]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800679c:	7dbb      	ldrb	r3, [r7, #22]
 800679e:	e000      	b.n	80067a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d014      	beq.n	8006810 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6852      	ldr	r2, [r2, #4]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	4611      	mov	r1, r2
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006810:	2340      	movs	r3, #64	@ 0x40
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fb23 	bl	8007e62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2240      	movs	r2, #64	@ 0x40
 8006828:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800682c:	2340      	movs	r3, #64	@ 0x40
 800682e:	2200      	movs	r2, #0
 8006830:	2180      	movs	r1, #128	@ 0x80
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fb15 	bl	8007e62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2240      	movs	r2, #64	@ 0x40
 8006842:	621a      	str	r2, [r3, #32]

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b04      	cmp	r3, #4
 8006880:	d006      	beq.n	8006890 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006888:	b2da      	uxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2204      	movs	r2, #4
 8006894:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d106      	bne.n	80068c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d110      	bne.n	800690c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	32ae      	adds	r2, #174	@ 0xae
 800692c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e01c      	b.n	8006972 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d115      	bne.n	8006970 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	32ae      	adds	r2, #174	@ 0xae
 800694e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32ae      	adds	r2, #174	@ 0xae
 8006962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4611      	mov	r1, r2
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	32ae      	adds	r2, #174	@ 0xae
 8006990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	e01c      	b.n	80069d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d115      	bne.n	80069d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32ae      	adds	r2, #174	@ 0xae
 80069b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32ae      	adds	r2, #174	@ 0xae
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	4611      	mov	r1, r2
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00e      	beq.n	8006a30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6852      	ldr	r2, [r2, #4]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	4611      	mov	r1, r2
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	885b      	ldrh	r3, [r3, #2]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d91f      	bls.n	8006ad4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a9a:	e013      	b.n	8006ac4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a9c:	f107 030a 	add.w	r3, r7, #10
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6978      	ldr	r0, [r7, #20]
 8006aa4:	f000 f81b 	bl	8006ade <USBD_GetNextDesc>
 8006aa8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d108      	bne.n	8006ac4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	789b      	ldrb	r3, [r3, #2]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d008      	beq.n	8006ad2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	885b      	ldrh	r3, [r3, #2]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	897b      	ldrh	r3, [r7, #10]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d8e5      	bhi.n	8006a9c <USBD_GetEpDesc+0x2e>
 8006ad0:	e000      	b.n	8006ad4 <USBD_GetEpDesc+0x66>
          break;
 8006ad2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ad4:	693b      	ldr	r3, [r7, #16]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	7812      	ldrb	r2, [r2, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b087      	sub	sp, #28
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b34:	8a3b      	ldrh	r3, [r7, #16]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	b21a      	sxth	r2, r3
 8006b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b44:	89fb      	ldrh	r3, [r7, #14]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	d005      	beq.n	8006b7a <USBD_StdDevReq+0x26>
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d857      	bhi.n	8006c22 <USBD_StdDevReq+0xce>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00f      	beq.n	8006b96 <USBD_StdDevReq+0x42>
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d153      	bne.n	8006c22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	32ae      	adds	r2, #174	@ 0xae
 8006b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	e04a      	b.n	8006c2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b09      	cmp	r3, #9
 8006b9c:	d83b      	bhi.n	8006c16 <USBD_StdDevReq+0xc2>
 8006b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <USBD_StdDevReq+0x50>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006c17 	.word	0x08006c17
 8006bb0:	08006c03 	.word	0x08006c03
 8006bb4:	08006c17 	.word	0x08006c17
 8006bb8:	08006bd7 	.word	0x08006bd7
 8006bbc:	08006bcd 	.word	0x08006bcd
 8006bc0:	08006c17 	.word	0x08006c17
 8006bc4:	08006bef 	.word	0x08006bef
 8006bc8:	08006be1 	.word	0x08006be1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa3c 	bl	800704c <USBD_GetDescriptor>
          break;
 8006bd4:	e024      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fba1 	bl	8007320 <USBD_SetAddress>
          break;
 8006bde:	e01f      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fbe0 	bl	80073a8 <USBD_SetConfig>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
          break;
 8006bec:	e018      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fc83 	bl	80074fc <USBD_GetConfig>
          break;
 8006bf6:	e013      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fcb4 	bl	8007568 <USBD_GetStatus>
          break;
 8006c00:	e00e      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fce3 	bl	80075d0 <USBD_SetFeature>
          break;
 8006c0a:	e009      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd07 	bl	8007622 <USBD_ClrFeature>
          break;
 8006c14:	e004      	b.n	8006c20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fd5e 	bl	80076da <USBD_CtlError>
          break;
 8006c1e:	bf00      	nop
      }
      break;
 8006c20:	e004      	b.n	8006c2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fd58 	bl	80076da <USBD_CtlError>
      break;
 8006c2a:	bf00      	nop
  }

  return ret;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c4e:	2b40      	cmp	r3, #64	@ 0x40
 8006c50:	d005      	beq.n	8006c5e <USBD_StdItfReq+0x26>
 8006c52:	2b40      	cmp	r3, #64	@ 0x40
 8006c54:	d852      	bhi.n	8006cfc <USBD_StdItfReq+0xc4>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <USBD_StdItfReq+0x26>
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d14e      	bne.n	8006cfc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d840      	bhi.n	8006cee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	889b      	ldrh	r3, [r3, #4]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d836      	bhi.n	8006ce4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	889b      	ldrh	r3, [r3, #4]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff fedb 	bl	8006a3a <USBD_CoreFindIF>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2bff      	cmp	r3, #255	@ 0xff
 8006c8c:	d01d      	beq.n	8006cca <USBD_StdItfReq+0x92>
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11a      	bne.n	8006cca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c94:	7bba      	ldrb	r2, [r7, #14]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32ae      	adds	r2, #174	@ 0xae
 8006c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00f      	beq.n	8006cc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006ca4:	7bba      	ldrb	r2, [r7, #14]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006cac:	7bba      	ldrb	r2, [r7, #14]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	32ae      	adds	r2, #174	@ 0xae
 8006cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cc2:	e004      	b.n	8006cce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cc8:	e001      	b.n	8006cce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d110      	bne.n	8006cf8 <USBD_StdItfReq+0xc0>
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10d      	bne.n	8006cf8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fdb6 	bl	800784e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ce2:	e009      	b.n	8006cf8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fcf7 	bl	80076da <USBD_CtlError>
          break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fcf2 	bl	80076da <USBD_CtlError>
          break;
 8006cf6:	e000      	b.n	8006cfa <USBD_StdItfReq+0xc2>
          break;
 8006cf8:	bf00      	nop
      }
      break;
 8006cfa:	e004      	b.n	8006d06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fceb 	bl	80076da <USBD_CtlError>
      break;
 8006d04:	bf00      	nop
  }

  return ret;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	889b      	ldrh	r3, [r3, #4]
 8006d22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d2c:	2b40      	cmp	r3, #64	@ 0x40
 8006d2e:	d007      	beq.n	8006d40 <USBD_StdEPReq+0x30>
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	f200 817f 	bhi.w	8007034 <USBD_StdEPReq+0x324>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d02a      	beq.n	8006d90 <USBD_StdEPReq+0x80>
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	f040 817a 	bne.w	8007034 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff fe85 	bl	8006a54 <USBD_CoreFindEP>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d4e:	7b7b      	ldrb	r3, [r7, #13]
 8006d50:	2bff      	cmp	r3, #255	@ 0xff
 8006d52:	f000 8174 	beq.w	800703e <USBD_StdEPReq+0x32e>
 8006d56:	7b7b      	ldrb	r3, [r7, #13]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f040 8170 	bne.w	800703e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d5e:	7b7a      	ldrb	r2, [r7, #13]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d66:	7b7a      	ldrb	r2, [r7, #13]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	32ae      	adds	r2, #174	@ 0xae
 8006d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8163 	beq.w	800703e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d78:	7b7a      	ldrb	r2, [r7, #13]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32ae      	adds	r2, #174	@ 0xae
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d8e:	e156      	b.n	800703e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d008      	beq.n	8006daa <USBD_StdEPReq+0x9a>
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	f300 8145 	bgt.w	8007028 <USBD_StdEPReq+0x318>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 809b 	beq.w	8006eda <USBD_StdEPReq+0x1ca>
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d03c      	beq.n	8006e22 <USBD_StdEPReq+0x112>
 8006da8:	e13e      	b.n	8007028 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d002      	beq.n	8006dbc <USBD_StdEPReq+0xac>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d016      	beq.n	8006de8 <USBD_StdEPReq+0xd8>
 8006dba:	e02c      	b.n	8006e16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <USBD_StdEPReq+0xce>
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b80      	cmp	r3, #128	@ 0x80
 8006dc6:	d00a      	beq.n	8006dde <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f88d 	bl	8007eec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	@ 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f889 	bl	8007eec <USBD_LL_StallEP>
 8006dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ddc:	e020      	b.n	8006e20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc7a 	bl	80076da <USBD_CtlError>
              break;
 8006de6:	e01b      	b.n	8006e20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	885b      	ldrh	r3, [r3, #2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10e      	bne.n	8006e0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00b      	beq.n	8006e0e <USBD_StdEPReq+0xfe>
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b80      	cmp	r3, #128	@ 0x80
 8006dfa:	d008      	beq.n	8006e0e <USBD_StdEPReq+0xfe>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f86f 	bl	8007eec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fd1d 	bl	800784e <USBD_CtlSendStatus>

              break;
 8006e14:	e004      	b.n	8006e20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc5e 	bl	80076da <USBD_CtlError>
              break;
 8006e1e:	bf00      	nop
          }
          break;
 8006e20:	e107      	b.n	8007032 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d002      	beq.n	8006e34 <USBD_StdEPReq+0x124>
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d016      	beq.n	8006e60 <USBD_StdEPReq+0x150>
 8006e32:	e04b      	b.n	8006ecc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <USBD_StdEPReq+0x146>
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b80      	cmp	r3, #128	@ 0x80
 8006e3e:	d00a      	beq.n	8006e56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f851 	bl	8007eec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e4a:	2180      	movs	r1, #128	@ 0x80
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f84d 	bl	8007eec <USBD_LL_StallEP>
 8006e52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e54:	e040      	b.n	8006ed8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc3e 	bl	80076da <USBD_CtlError>
              break;
 8006e5e:	e03b      	b.n	8006ed8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d136      	bne.n	8006ed6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 f857 	bl	8007f2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fce6 	bl	800784e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fde4 	bl	8006a54 <USBD_CoreFindEP>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e90:	7b7b      	ldrb	r3, [r7, #13]
 8006e92:	2bff      	cmp	r3, #255	@ 0xff
 8006e94:	d01f      	beq.n	8006ed6 <USBD_StdEPReq+0x1c6>
 8006e96:	7b7b      	ldrb	r3, [r7, #13]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d11c      	bne.n	8006ed6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ea4:	7b7a      	ldrb	r2, [r7, #13]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32ae      	adds	r2, #174	@ 0xae
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006eb4:	7b7a      	ldrb	r2, [r7, #13]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32ae      	adds	r2, #174	@ 0xae
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006eca:	e004      	b.n	8006ed6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc03 	bl	80076da <USBD_CtlError>
              break;
 8006ed4:	e000      	b.n	8006ed8 <USBD_StdEPReq+0x1c8>
              break;
 8006ed6:	bf00      	nop
          }
          break;
 8006ed8:	e0ab      	b.n	8007032 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d002      	beq.n	8006eec <USBD_StdEPReq+0x1dc>
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d032      	beq.n	8006f50 <USBD_StdEPReq+0x240>
 8006eea:	e097      	b.n	800701c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <USBD_StdEPReq+0x1f2>
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b80      	cmp	r3, #128	@ 0x80
 8006ef6:	d004      	beq.n	8006f02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fbed 	bl	80076da <USBD_CtlError>
                break;
 8006f00:	e091      	b.n	8007026 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da0b      	bge.n	8006f22 <USBD_StdEPReq+0x212>
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	3310      	adds	r3, #16
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3304      	adds	r3, #4
 8006f20:	e00b      	b.n	8006f3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2202      	movs	r2, #2
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fc43 	bl	80077d4 <USBD_CtlSendData>
              break;
 8006f4e:	e06a      	b.n	8007026 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	da11      	bge.n	8006f7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	3324      	adds	r3, #36	@ 0x24
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d117      	bne.n	8006fa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fbb0 	bl	80076da <USBD_CtlError>
                  break;
 8006f7a:	e054      	b.n	8007026 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	f003 020f 	and.w	r2, r3, #15
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb9d 	bl	80076da <USBD_CtlError>
                  break;
 8006fa0:	e041      	b.n	8007026 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da0b      	bge.n	8006fc2 <USBD_StdEPReq+0x2b2>
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	3310      	adds	r3, #16
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	e00b      	b.n	8006fda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3304      	adds	r3, #4
 8006fda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <USBD_StdEPReq+0x2d8>
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b80      	cmp	r3, #128	@ 0x80
 8006fe6:	d103      	bne.n	8006ff0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e00e      	b.n	800700e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 ffb7 	bl	8007f68 <USBD_LL_IsStallEP>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e002      	b.n	800700e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2202      	movs	r2, #2
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fbdd 	bl	80077d4 <USBD_CtlSendData>
              break;
 800701a:	e004      	b.n	8007026 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb5b 	bl	80076da <USBD_CtlError>
              break;
 8007024:	bf00      	nop
          }
          break;
 8007026:	e004      	b.n	8007032 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb55 	bl	80076da <USBD_CtlError>
          break;
 8007030:	bf00      	nop
      }
      break;
 8007032:	e005      	b.n	8007040 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fb4f 	bl	80076da <USBD_CtlError>
      break;
 800703c:	e000      	b.n	8007040 <USBD_StdEPReq+0x330>
      break;
 800703e:	bf00      	nop
  }

  return ret;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	2b06      	cmp	r3, #6
 800706e:	f200 8128 	bhi.w	80072c2 <USBD_GetDescriptor+0x276>
 8007072:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <USBD_GetDescriptor+0x2c>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007095 	.word	0x08007095
 800707c:	080070ad 	.word	0x080070ad
 8007080:	080070ed 	.word	0x080070ed
 8007084:	080072c3 	.word	0x080072c3
 8007088:	080072c3 	.word	0x080072c3
 800708c:	08007263 	.word	0x08007263
 8007090:	0800728f 	.word	0x0800728f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
      break;
 80070aa:	e112      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10d      	bne.n	80070d0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	f107 0208 	add.w	r2, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	2202      	movs	r2, #2
 80070cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070ce:	e100      	b.n	80072d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	f107 0208 	add.w	r2, r7, #8
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	2202      	movs	r2, #2
 80070e8:	701a      	strb	r2, [r3, #0]
      break;
 80070ea:	e0f2      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	885b      	ldrh	r3, [r3, #2]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	f200 80ac 	bhi.w	8007250 <USBD_GetDescriptor+0x204>
 80070f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <USBD_GetDescriptor+0xb4>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007119 	.word	0x08007119
 8007104:	0800714d 	.word	0x0800714d
 8007108:	08007181 	.word	0x08007181
 800710c:	080071b5 	.word	0x080071b5
 8007110:	080071e9 	.word	0x080071e9
 8007114:	0800721d 	.word	0x0800721d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713a:	e091      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 facb 	bl	80076da <USBD_CtlError>
            err++;
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	3301      	adds	r3, #1
 8007148:	72fb      	strb	r3, [r7, #11]
          break;
 800714a:	e089      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	7c12      	ldrb	r2, [r2, #16]
 8007164:	f107 0108 	add.w	r1, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716e:	e077      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fab1 	bl	80076da <USBD_CtlError>
            err++;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	3301      	adds	r3, #1
 800717c:	72fb      	strb	r3, [r7, #11]
          break;
 800717e:	e06f      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7c12      	ldrb	r2, [r2, #16]
 8007198:	f107 0108 	add.w	r1, r7, #8
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
 80071a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a2:	e05d      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa97 	bl	80076da <USBD_CtlError>
            err++;
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3301      	adds	r3, #1
 80071b0:	72fb      	strb	r3, [r7, #11]
          break;
 80071b2:	e055      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e043      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa7d 	bl	80076da <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e03b      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e029      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa63 	bl	80076da <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e021      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e00f      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa49 	bl	80076da <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e007      	b.n	8007260 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa41 	bl	80076da <USBD_CtlError>
          err++;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	3301      	adds	r3, #1
 800725c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800725e:	bf00      	nop
      }
      break;
 8007260:	e037      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	7c1b      	ldrb	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007272:	f107 0208 	add.w	r2, r7, #8
 8007276:	4610      	mov	r0, r2
 8007278:	4798      	blx	r3
 800727a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800727c:	e029      	b.n	80072d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa2a 	bl	80076da <USBD_CtlError>
        err++;
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	3301      	adds	r3, #1
 800728a:	72fb      	strb	r3, [r7, #11]
      break;
 800728c:	e021      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7c1b      	ldrb	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10d      	bne.n	80072b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729e:	f107 0208 	add.w	r2, r7, #8
 80072a2:	4610      	mov	r0, r2
 80072a4:	4798      	blx	r3
 80072a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	2207      	movs	r2, #7
 80072ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072b0:	e00f      	b.n	80072d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa10 	bl	80076da <USBD_CtlError>
        err++;
 80072ba:	7afb      	ldrb	r3, [r7, #11]
 80072bc:	3301      	adds	r3, #1
 80072be:	72fb      	strb	r3, [r7, #11]
      break;
 80072c0:	e007      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa08 	bl	80076da <USBD_CtlError>
      err++;
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	3301      	adds	r3, #1
 80072ce:	72fb      	strb	r3, [r7, #11]
      break;
 80072d0:	bf00      	nop
  }

  if (err != 0U)
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11e      	bne.n	8007316 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	88db      	ldrh	r3, [r3, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d016      	beq.n	800730e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88da      	ldrh	r2, [r3, #6]
 80072ea:	893b      	ldrh	r3, [r7, #8]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bf28      	it	cs
 80072f0:	4613      	movcs	r3, r2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072f6:	893b      	ldrh	r3, [r7, #8]
 80072f8:	461a      	mov	r2, r3
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa69 	bl	80077d4 <USBD_CtlSendData>
 8007302:	e009      	b.n	8007318 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9e7 	bl	80076da <USBD_CtlError>
 800730c:	e004      	b.n	8007318 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa9d 	bl	800784e <USBD_CtlSendStatus>
 8007314:	e000      	b.n	8007318 <USBD_GetDescriptor+0x2cc>
    return;
 8007316:	bf00      	nop
  }
}
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	889b      	ldrh	r3, [r3, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d131      	bne.n	8007396 <USBD_SetAddress+0x76>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	88db      	ldrh	r3, [r3, #6]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d12d      	bne.n	8007396 <USBD_SetAddress+0x76>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007340:	d829      	bhi.n	8007396 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	885b      	ldrh	r3, [r3, #2]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b03      	cmp	r3, #3
 8007358:	d104      	bne.n	8007364 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9bc 	bl	80076da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007362:	e01d      	b.n	80073a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7bfa      	ldrb	r2, [r7, #15]
 8007368:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fe25 	bl	8007fc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa69 	bl	800784e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	e009      	b.n	80073a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	e004      	b.n	80073a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f99e 	bl	80076da <USBD_CtlError>
  }
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	4b4e      	ldr	r3, [pc, #312]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073c0:	4b4d      	ldr	r3, [pc, #308]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d905      	bls.n	80073d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f985 	bl	80076da <USBD_CtlError>
    return USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e08c      	b.n	80074ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d002      	beq.n	80073e6 <USBD_SetConfig+0x3e>
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d029      	beq.n	8007438 <USBD_SetConfig+0x90>
 80073e4:	e075      	b.n	80074d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073e6:	4b44      	ldr	r3, [pc, #272]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d020      	beq.n	8007430 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073ee:	4b42      	ldr	r3, [pc, #264]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f8:	4b3f      	ldr	r3, [pc, #252]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fe ffe3 	bl	80063ca <USBD_SetClassConfig>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f962 	bl	80076da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800741e:	e065      	b.n	80074ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fa14 	bl	800784e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2203      	movs	r2, #3
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800742e:	e05d      	b.n	80074ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa0c 	bl	800784e <USBD_CtlSendStatus>
      break;
 8007436:	e059      	b.n	80074ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007438:	4b2f      	ldr	r3, [pc, #188]	@ (80074f8 <USBD_SetConfig+0x150>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d112      	bne.n	8007466 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007448:	4b2b      	ldr	r3, [pc, #172]	@ (80074f8 <USBD_SetConfig+0x150>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007452:	4b29      	ldr	r3, [pc, #164]	@ (80074f8 <USBD_SetConfig+0x150>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7fe ffd2 	bl	8006402 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9f5 	bl	800784e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007464:	e042      	b.n	80074ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007466:	4b24      	ldr	r3, [pc, #144]	@ (80074f8 <USBD_SetConfig+0x150>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d02a      	beq.n	80074ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fe ffc0 	bl	8006402 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007482:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <USBD_SetConfig+0x150>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800748c:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <USBD_SetConfig+0x150>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fe ff99 	bl	80063ca <USBD_SetClassConfig>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f918 	bl	80076da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe ffa5 	bl	8006402 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074c0:	e014      	b.n	80074ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9c3 	bl	800784e <USBD_CtlSendStatus>
      break;
 80074c8:	e010      	b.n	80074ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f9bf 	bl	800784e <USBD_CtlSendStatus>
      break;
 80074d0:	e00c      	b.n	80074ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f900 	bl	80076da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074da:	4b07      	ldr	r3, [pc, #28]	@ (80074f8 <USBD_SetConfig+0x150>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fe ff8e 	bl	8006402 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074e6:	2303      	movs	r3, #3
 80074e8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ea:	bf00      	nop
  }

  return ret;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000021c 	.word	0x2000021c

080074fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	88db      	ldrh	r3, [r3, #6]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d004      	beq.n	8007518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8e2 	bl	80076da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007516:	e023      	b.n	8007560 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	dc02      	bgt.n	800752a <USBD_GetConfig+0x2e>
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc03      	bgt.n	8007530 <USBD_GetConfig+0x34>
 8007528:	e015      	b.n	8007556 <USBD_GetConfig+0x5a>
 800752a:	2b03      	cmp	r3, #3
 800752c:	d00b      	beq.n	8007546 <USBD_GetConfig+0x4a>
 800752e:	e012      	b.n	8007556 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3308      	adds	r3, #8
 800753a:	2201      	movs	r2, #1
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f948 	bl	80077d4 <USBD_CtlSendData>
        break;
 8007544:	e00c      	b.n	8007560 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2201      	movs	r2, #1
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f940 	bl	80077d4 <USBD_CtlSendData>
        break;
 8007554:	e004      	b.n	8007560 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8be 	bl	80076da <USBD_CtlError>
        break;
 800755e:	bf00      	nop
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	2b02      	cmp	r3, #2
 800757e:	d81e      	bhi.n	80075be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	88db      	ldrh	r3, [r3, #6]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d004      	beq.n	8007592 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8a5 	bl	80076da <USBD_CtlError>
        break;
 8007590:	e01a      	b.n	80075c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	330c      	adds	r3, #12
 80075b2:	2202      	movs	r2, #2
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f90c 	bl	80077d4 <USBD_CtlSendData>
      break;
 80075bc:	e004      	b.n	80075c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f88a 	bl	80076da <USBD_CtlError>
      break;
 80075c6:	bf00      	nop
  }
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	885b      	ldrh	r3, [r3, #2]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d107      	bne.n	80075f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f92f 	bl	800784e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075f0:	e013      	b.n	800761a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d10b      	bne.n	8007612 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	889b      	ldrh	r3, [r3, #4]
 80075fe:	0a1b      	lsrs	r3, r3, #8
 8007600:	b29b      	uxth	r3, r3
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f91f 	bl	800784e <USBD_CtlSendStatus>
}
 8007610:	e003      	b.n	800761a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f860 	bl	80076da <USBD_CtlError>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	2b02      	cmp	r3, #2
 8007638:	d80b      	bhi.n	8007652 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	885b      	ldrh	r3, [r3, #2]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10c      	bne.n	800765c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8ff 	bl	800784e <USBD_CtlSendStatus>
      }
      break;
 8007650:	e004      	b.n	800765c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f840 	bl	80076da <USBD_CtlError>
      break;
 800765a:	e000      	b.n	800765e <USBD_ClrFeature+0x3c>
      break;
 800765c:	bf00      	nop
  }
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff fa40 	bl	8006b16 <SWAPBYTE>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff fa33 	bl	8006b16 <SWAPBYTE>
 80076b0:	4603      	mov	r3, r0
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff fa26 	bl	8006b16 <SWAPBYTE>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	80da      	strh	r2, [r3, #6]
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e4:	2180      	movs	r1, #128	@ 0x80
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc00 	bl	8007eec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076ec:	2100      	movs	r1, #0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fbfc 	bl	8007eec <USBD_LL_StallEP>
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d042      	beq.n	8007798 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007716:	6938      	ldr	r0, [r7, #16]
 8007718:	f000 f842 	bl	80077a0 <USBD_GetLen>
 800771c:	4603      	mov	r3, r0
 800771e:	3301      	adds	r3, #1
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007726:	d808      	bhi.n	800773a <USBD_GetString+0x3e>
 8007728:	6938      	ldr	r0, [r7, #16]
 800772a:	f000 f839 	bl	80077a0 <USBD_GetLen>
 800772e:	4603      	mov	r3, r0
 8007730:	3301      	adds	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	e001      	b.n	800773e <USBD_GetString+0x42>
 800773a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
  idx++;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	3301      	adds	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	2203      	movs	r2, #3
 800775c:	701a      	strb	r2, [r3, #0]
  idx++;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	3301      	adds	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007764:	e013      	b.n	800778e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	4413      	add	r3, r2
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3301      	adds	r3, #1
 8007776:	613b      	str	r3, [r7, #16]
    idx++;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	3301      	adds	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	4413      	add	r3, r2
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
    idx++;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	3301      	adds	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e7      	bne.n	8007766 <USBD_GetString+0x6a>
 8007796:	e000      	b.n	800779a <USBD_GetString+0x9e>
    return;
 8007798:	bf00      	nop
  }
}
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077b0:	e005      	b.n	80077be <USBD_GetLen+0x1e>
  {
    len++;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	3301      	adds	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f5      	bne.n	80077b2 <USBD_GetLen+0x12>
  }

  return len;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	2100      	movs	r1, #0
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fbff 	bl	8007ffe <USBD_LL_Transmit>

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	2100      	movs	r1, #0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fbee 	bl	8007ffe <USBD_LL_Transmit>

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fbfe 	bl	8008040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2204      	movs	r2, #4
 800785a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800785e:	2300      	movs	r3, #0
 8007860:	2200      	movs	r2, #0
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbca 	bl	8007ffe <USBD_LL_Transmit>

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2205      	movs	r2, #5
 8007880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007884:	2300      	movs	r3, #0
 8007886:	2200      	movs	r2, #0
 8007888:	2100      	movs	r1, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fbd8 	bl	8008040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078a0:	2200      	movs	r2, #0
 80078a2:	490e      	ldr	r1, [pc, #56]	@ (80078dc <MX_USB_DEVICE_Init+0x40>)
 80078a4:	480e      	ldr	r0, [pc, #56]	@ (80078e0 <MX_USB_DEVICE_Init+0x44>)
 80078a6:	f7fe fd13 	bl	80062d0 <USBD_Init>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078b0:	f7f9 f810 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80078b4:	490b      	ldr	r1, [pc, #44]	@ (80078e4 <MX_USB_DEVICE_Init+0x48>)
 80078b6:	480a      	ldr	r0, [pc, #40]	@ (80078e0 <MX_USB_DEVICE_Init+0x44>)
 80078b8:	f7fe fd3a 	bl	8006330 <USBD_RegisterClass>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078c2:	f7f9 f807 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078c6:	4806      	ldr	r0, [pc, #24]	@ (80078e0 <MX_USB_DEVICE_Init+0x44>)
 80078c8:	f7fe fd68 	bl	800639c <USBD_Start>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80078d2:	f7f8 ffff 	bl	80008d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078d6:	bf00      	nop
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	200000b4 	.word	0x200000b4
 80078e0:	20000220 	.word	0x20000220
 80078e4:	2000000c 	.word	0x2000000c

080078e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2212      	movs	r2, #18
 80078f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078fa:	4b03      	ldr	r3, [pc, #12]	@ (8007908 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	200000d0 	.word	0x200000d0

0800790c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2204      	movs	r2, #4
 800791c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800791e:	4b03      	ldr	r3, [pc, #12]	@ (800792c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	200000e4 	.word	0x200000e4

08007930 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	4907      	ldr	r1, [pc, #28]	@ (8007964 <USBD_FS_ProductStrDescriptor+0x34>)
 8007946:	4808      	ldr	r0, [pc, #32]	@ (8007968 <USBD_FS_ProductStrDescriptor+0x38>)
 8007948:	f7ff fed8 	bl	80076fc <USBD_GetString>
 800794c:	e004      	b.n	8007958 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4904      	ldr	r1, [pc, #16]	@ (8007964 <USBD_FS_ProductStrDescriptor+0x34>)
 8007952:	4805      	ldr	r0, [pc, #20]	@ (8007968 <USBD_FS_ProductStrDescriptor+0x38>)
 8007954:	f7ff fed2 	bl	80076fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007958:	4b02      	ldr	r3, [pc, #8]	@ (8007964 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	200004fc 	.word	0x200004fc
 8007968:	0800817c 	.word	0x0800817c

0800796c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	4904      	ldr	r1, [pc, #16]	@ (800798c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800797c:	4804      	ldr	r0, [pc, #16]	@ (8007990 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800797e:	f7ff febd 	bl	80076fc <USBD_GetString>
  return USBD_StrDesc;
 8007982:	4b02      	ldr	r3, [pc, #8]	@ (800798c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200004fc 	.word	0x200004fc
 8007990:	08008190 	.word	0x08008190

08007994 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	221a      	movs	r2, #26
 80079a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079a6:	f000 f843 	bl	8007a30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079aa:	4b02      	ldr	r3, [pc, #8]	@ (80079b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	200000e8 	.word	0x200000e8

080079b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	6039      	str	r1, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d105      	bne.n	80079d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4907      	ldr	r1, [pc, #28]	@ (80079ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80079ce:	4808      	ldr	r0, [pc, #32]	@ (80079f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079d0:	f7ff fe94 	bl	80076fc <USBD_GetString>
 80079d4:	e004      	b.n	80079e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	4904      	ldr	r1, [pc, #16]	@ (80079ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80079da:	4805      	ldr	r0, [pc, #20]	@ (80079f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079dc:	f7ff fe8e 	bl	80076fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80079e0:	4b02      	ldr	r3, [pc, #8]	@ (80079ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200004fc 	.word	0x200004fc
 80079f0:	080081a4 	.word	0x080081a4

080079f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	4907      	ldr	r1, [pc, #28]	@ (8007a28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a0a:	4808      	ldr	r0, [pc, #32]	@ (8007a2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a0c:	f7ff fe76 	bl	80076fc <USBD_GetString>
 8007a10:	e004      	b.n	8007a1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4904      	ldr	r1, [pc, #16]	@ (8007a28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a16:	4805      	ldr	r0, [pc, #20]	@ (8007a2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a18:	f7ff fe70 	bl	80076fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a1c:	4b02      	ldr	r3, [pc, #8]	@ (8007a28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200004fc 	.word	0x200004fc
 8007a2c:	080081b0 	.word	0x080081b0

08007a30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a36:	4b0f      	ldr	r3, [pc, #60]	@ (8007a74 <Get_SerialNum+0x44>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a78 <Get_SerialNum+0x48>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a42:	4b0e      	ldr	r3, [pc, #56]	@ (8007a7c <Get_SerialNum+0x4c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a56:	2208      	movs	r2, #8
 8007a58:	4909      	ldr	r1, [pc, #36]	@ (8007a80 <Get_SerialNum+0x50>)
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f814 	bl	8007a88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a60:	2204      	movs	r2, #4
 8007a62:	4908      	ldr	r1, [pc, #32]	@ (8007a84 <Get_SerialNum+0x54>)
 8007a64:	68b8      	ldr	r0, [r7, #8]
 8007a66:	f000 f80f 	bl	8007a88 <IntToUnicode>
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	1fff7a10 	.word	0x1fff7a10
 8007a78:	1fff7a14 	.word	0x1fff7a14
 8007a7c:	1fff7a18 	.word	0x1fff7a18
 8007a80:	200000ea 	.word	0x200000ea
 8007a84:	200000fa 	.word	0x200000fa

08007a88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
 8007a9e:	e027      	b.n	8007af0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	0f1b      	lsrs	r3, r3, #28
 8007aa4:	2b09      	cmp	r3, #9
 8007aa6:	d80b      	bhi.n	8007ac0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	0f1b      	lsrs	r3, r3, #28
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	440b      	add	r3, r1
 8007ab8:	3230      	adds	r2, #48	@ 0x30
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e00a      	b.n	8007ad6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	0f1b      	lsrs	r3, r3, #28
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	4619      	mov	r1, r3
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	440b      	add	r3, r1
 8007ad0:	3237      	adds	r2, #55	@ 0x37
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	3301      	adds	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]
 8007af0:	7dfa      	ldrb	r2, [r7, #23]
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d3d3      	bcc.n	8007aa0 <IntToUnicode+0x18>
  }
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
	...

08007b08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	@ 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b10:	f107 0314 	add.w	r3, r7, #20
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	605a      	str	r2, [r3, #4]
 8007b1a:	609a      	str	r2, [r3, #8]
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b28:	d13a      	bne.n	8007ba0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b32:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	613b      	str	r3, [r7, #16]
 8007b44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b54:	2303      	movs	r3, #3
 8007b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b58:	230a      	movs	r3, #10
 8007b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b5c:	f107 0314 	add.w	r3, r7, #20
 8007b60:	4619      	mov	r1, r3
 8007b62:	4812      	ldr	r0, [pc, #72]	@ (8007bac <HAL_PCD_MspInit+0xa4>)
 8007b64:	f7fa fa62 	bl	800202c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b72:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b82:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b84:	4b08      	ldr	r3, [pc, #32]	@ (8007ba8 <HAL_PCD_MspInit+0xa0>)
 8007b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b90:	2200      	movs	r2, #0
 8007b92:	2100      	movs	r1, #0
 8007b94:	2043      	movs	r0, #67	@ 0x43
 8007b96:	f7f9 fea2 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b9a:	2043      	movs	r0, #67	@ 0x43
 8007b9c:	f7f9 febb 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	3728      	adds	r7, #40	@ 0x28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	40020000 	.word	0x40020000

08007bb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f7fe fc35 	bl	8006436 <USBD_LL_SetupStage>
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007be6:	78fa      	ldrb	r2, [r7, #3]
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	f7fe fc6f 	bl	80064e0 <USBD_LL_DataOutStage>
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3320      	adds	r3, #32
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	4619      	mov	r1, r3
 8007c32:	f7fe fd08 	bl	8006646 <USBD_LL_DataInStage>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe fe42 	bl	80068d6 <USBD_LL_SOF>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c62:	2301      	movs	r3, #1
 8007c64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	79db      	ldrb	r3, [r3, #7]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	e008      	b.n	8007c86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	79db      	ldrb	r3, [r3, #7]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d102      	bne.n	8007c82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
 8007c80:	e001      	b.n	8007c86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c82:	f7f8 fe27 	bl	80008d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c8c:	7bfa      	ldrb	r2, [r7, #15]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fddc 	bl	800684e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fd84 	bl	80067aa <USBD_LL_Reset>
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fdd7 	bl	800686e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7adb      	ldrb	r3, [r3, #11]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <HAL_PCD_SuspendCallback+0x48>)
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	4a03      	ldr	r2, [pc, #12]	@ (8007cf4 <HAL_PCD_SuspendCallback+0x48>)
 8007ce6:	f043 0306 	orr.w	r3, r3, #6
 8007cea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	e000ed00 	.word	0xe000ed00

08007cf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fdcd 	bl	80068a6 <USBD_LL_Resume>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fe25 	bl	800697a <USBD_LL_IsoOUTIncomplete>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d4a:	78fa      	ldrb	r2, [r7, #3]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fde1 	bl	8006916 <USBD_LL_IsoINIncomplete>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fe37 	bl	80069de <USBD_LL_DevConnected>
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fe34 	bl	80069f4 <USBD_LL_DevDisconnected>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d13c      	bne.n	8007e1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007da4:	4a20      	ldr	r2, [pc, #128]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a1e      	ldr	r2, [pc, #120]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007db0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007db4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007db6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007dba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dc2:	4b19      	ldr	r3, [pc, #100]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dc8:	4b17      	ldr	r3, [pc, #92]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dce:	4b16      	ldr	r3, [pc, #88]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007dd4:	4b14      	ldr	r3, [pc, #80]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dda:	4b13      	ldr	r3, [pc, #76]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007de0:	4b11      	ldr	r3, [pc, #68]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007de6:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007dec:	4b0e      	ldr	r3, [pc, #56]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007df2:	480d      	ldr	r0, [pc, #52]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007df4:	f7fa fade 	bl	80023b4 <HAL_PCD_Init>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dfe:	f7f8 fd69 	bl	80008d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e02:	2180      	movs	r1, #128	@ 0x80
 8007e04:	4808      	ldr	r0, [pc, #32]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007e06:	f7fb fcf2 	bl	80037ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e0a:	2240      	movs	r2, #64	@ 0x40
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4806      	ldr	r0, [pc, #24]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007e10:	f7fb fca6 	bl	8003760 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e14:	2280      	movs	r2, #128	@ 0x80
 8007e16:	2101      	movs	r1, #1
 8007e18:	4803      	ldr	r0, [pc, #12]	@ (8007e28 <USBD_LL_Init+0x94>)
 8007e1a:	f7fb fca1 	bl	8003760 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	200006fc 	.word	0x200006fc

08007e2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fa fbc5 	bl	80025d2 <HAL_PCD_Start>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f930 	bl	80080b4 <USBD_Get_USB_Status>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4603      	mov	r3, r0
 8007e72:	70fb      	strb	r3, [r7, #3]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70bb      	strb	r3, [r7, #2]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e8a:	78bb      	ldrb	r3, [r7, #2]
 8007e8c:	883a      	ldrh	r2, [r7, #0]
 8007e8e:	78f9      	ldrb	r1, [r7, #3]
 8007e90:	f7fb f899 	bl	8002fc6 <HAL_PCD_EP_Open>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f90a 	bl	80080b4 <USBD_Get_USB_Status>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ec8:	78fa      	ldrb	r2, [r7, #3]
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fb f8e4 	bl	800309a <HAL_PCD_EP_Close>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 f8eb 	bl	80080b4 <USBD_Get_USB_Status>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f06:	78fa      	ldrb	r2, [r7, #3]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fb f984 	bl	8003218 <HAL_PCD_EP_SetStall>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f8cc 	bl	80080b4 <USBD_Get_USB_Status>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f44:	78fa      	ldrb	r2, [r7, #3]
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fb f9c8 	bl	80032de <HAL_PCD_EP_ClrStall>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f8ad 	bl	80080b4 <USBD_Get_USB_Status>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da0b      	bge.n	8007f9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	3316      	adds	r3, #22
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	e00b      	b.n	8007fb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007fb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fa ffcd 	bl	8002f7e <HAL_PCD_SetAddress>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f862 	bl	80080b4 <USBD_Get_USB_Status>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b086      	sub	sp, #24
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
 800800a:	460b      	mov	r3, r1
 800800c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800801c:	7af9      	ldrb	r1, [r7, #11]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	f7fb f8bf 	bl	80031a4 <HAL_PCD_EP_Transmit>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	4618      	mov	r0, r3
 800802e:	f000 f841 	bl	80080b4 <USBD_Get_USB_Status>
 8008032:	4603      	mov	r3, r0
 8008034:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008036:	7dbb      	ldrb	r3, [r7, #22]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	460b      	mov	r3, r1
 800804e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800805e:	7af9      	ldrb	r1, [r7, #11]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	f7fb f863 	bl	800312e <HAL_PCD_EP_Receive>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f820 	bl	80080b4 <USBD_Get_USB_Status>
 8008074:	4603      	mov	r3, r0
 8008076:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008078:	7dbb      	ldrb	r3, [r7, #22]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800808c:	4b03      	ldr	r3, [pc, #12]	@ (800809c <USBD_static_malloc+0x18>)
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000be0 	.word	0x20000be0

080080a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]

}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d817      	bhi.n	80080f8 <USBD_Get_USB_Status+0x44>
 80080c8:	a201      	add	r2, pc, #4	@ (adr r2, 80080d0 <USBD_Get_USB_Status+0x1c>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	080080e7 	.word	0x080080e7
 80080d8:	080080ed 	.word	0x080080ed
 80080dc:	080080f3 	.word	0x080080f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
    break;
 80080e4:	e00b      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ea:	e008      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
    break;
 80080f0:	e005      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080f2:	2303      	movs	r3, #3
 80080f4:	73fb      	strb	r3, [r7, #15]
    break;
 80080f6:	e002      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	73fb      	strb	r3, [r7, #15]
    break;
 80080fc:	bf00      	nop
  }
  return usb_status;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <memset>:
 800810c:	4402      	add	r2, r0
 800810e:	4603      	mov	r3, r0
 8008110:	4293      	cmp	r3, r2
 8008112:	d100      	bne.n	8008116 <memset+0xa>
 8008114:	4770      	bx	lr
 8008116:	f803 1b01 	strb.w	r1, [r3], #1
 800811a:	e7f9      	b.n	8008110 <memset+0x4>

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4d0d      	ldr	r5, [pc, #52]	@ (8008154 <__libc_init_array+0x38>)
 8008120:	4c0d      	ldr	r4, [pc, #52]	@ (8008158 <__libc_init_array+0x3c>)
 8008122:	1b64      	subs	r4, r4, r5
 8008124:	10a4      	asrs	r4, r4, #2
 8008126:	2600      	movs	r6, #0
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	4d0b      	ldr	r5, [pc, #44]	@ (800815c <__libc_init_array+0x40>)
 800812e:	4c0c      	ldr	r4, [pc, #48]	@ (8008160 <__libc_init_array+0x44>)
 8008130:	f000 f818 	bl	8008164 <_init>
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	2600      	movs	r6, #0
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	080081e0 	.word	0x080081e0
 8008158:	080081e0 	.word	0x080081e0
 800815c:	080081e0 	.word	0x080081e0
 8008160:	080081e4 	.word	0x080081e4

08008164 <_init>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr

08008170 <_fini>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr
