
button_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080088c0  080088c0  000098c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008938  08008938  0000a120  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008938  08008938  00009938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008940  08008940  0000a120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008940  08008940  00009940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008944  08008944  00009944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08008948  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a120  2**0
                  CONTENTS
 10 .bss          00000b24  20000120  20000120  0000a120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c44  20000c44  0000a120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001543f  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037f8  00000000  00000000  0001f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00022d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f8f  00000000  00000000  00024068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183c8  00000000  00000000  0004bff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eadf3  00000000  00000000  000643bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f1b2  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000e54  00000000  00000000  0014f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e4c  00000000  00000000  0015004c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  00154e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000120 	.word	0x20000120
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080088a8 	.word	0x080088a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000124 	.word	0x20000124
 80001e8:	080088a8 	.word	0x080088a8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_ADC_ConvCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  game_controller.left_x = adcBuf[0];
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_ADC_ConvCpltCallback+0x40>)
 8000528:	709a      	strb	r2, [r3, #2]
  game_controller.left_y = adcBuf[1];
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <HAL_ADC_ConvCpltCallback+0x3c>)
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_ADC_ConvCpltCallback+0x40>)
 8000532:	70da      	strb	r2, [r3, #3]
  game_controller.right_x = adcBuf[2];
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000536:	789b      	ldrb	r3, [r3, #2]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <HAL_ADC_ConvCpltCallback+0x40>)
 800053c:	711a      	strb	r2, [r3, #4]
  game_controller.right_y = adcBuf[3];
 800053e:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <HAL_ADC_ConvCpltCallback+0x40>)
 8000546:	715a      	strb	r2, [r3, #5]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	20000234 	.word	0x20000234
 8000558:	2000013c 	.word	0x2000013c

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fcd0 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f918 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 fa6c 	bl	8000a44 <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 fa4a 	bl	8000a04 <MX_DMA_Init>
  MX_ADC1_Init();
 8000570:	f000 f97c 	bl	800086c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000574:	f000 f9f8 	bl	8000968 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000578:	f007 fd00 	bl	8007f7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, NUM_ADC_CHANNEL);
 800057c:	2204      	movs	r2, #4
 800057e:	4973      	ldr	r1, [pc, #460]	@ (800074c <main+0x1f0>)
 8000580:	4873      	ldr	r0, [pc, #460]	@ (8000750 <main+0x1f4>)
 8000582:	f000 fea9 	bl	80012d8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000586:	4873      	ldr	r0, [pc, #460]	@ (8000754 <main+0x1f8>)
 8000588:	f003 ffe8 	bl	800455c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    btn1 = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 800058c:	2104      	movs	r1, #4
 800058e:	4872      	ldr	r0, [pc, #456]	@ (8000758 <main+0x1fc>)
 8000590:	f002 f8b8 	bl	8002704 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b70      	ldr	r3, [pc, #448]	@ (800075c <main+0x200>)
 800059a:	701a      	strb	r2, [r3, #0]
    btn2 = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 800059c:	2110      	movs	r1, #16
 800059e:	486e      	ldr	r0, [pc, #440]	@ (8000758 <main+0x1fc>)
 80005a0:	f002 f8b0 	bl	8002704 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b6d      	ldr	r3, [pc, #436]	@ (8000760 <main+0x204>)
 80005aa:	701a      	strb	r2, [r3, #0]
    btn3 = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 80005ac:	2120      	movs	r1, #32
 80005ae:	486a      	ldr	r0, [pc, #424]	@ (8000758 <main+0x1fc>)
 80005b0:	f002 f8a8 	bl	8002704 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b6a      	ldr	r3, [pc, #424]	@ (8000764 <main+0x208>)
 80005ba:	701a      	strb	r2, [r3, #0]
    btn4 = HAL_GPIO_ReadPin(button_4_GPIO_Port, button_4_Pin);
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	4866      	ldr	r0, [pc, #408]	@ (8000758 <main+0x1fc>)
 80005c0:	f002 f8a0 	bl	8002704 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b67      	ldr	r3, [pc, #412]	@ (8000768 <main+0x20c>)
 80005ca:	701a      	strb	r2, [r3, #0]
    btn5 = HAL_GPIO_ReadPin(button_5_GPIO_Port, button_5_Pin);
 80005cc:	2108      	movs	r1, #8
 80005ce:	4862      	ldr	r0, [pc, #392]	@ (8000758 <main+0x1fc>)
 80005d0:	f002 f898 	bl	8002704 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b64      	ldr	r3, [pc, #400]	@ (800076c <main+0x210>)
 80005da:	701a      	strb	r2, [r3, #0]
    btn6 = HAL_GPIO_ReadPin(button_6_GPIO_Port, button_6_Pin);
 80005dc:	2101      	movs	r1, #1
 80005de:	4864      	ldr	r0, [pc, #400]	@ (8000770 <main+0x214>)
 80005e0:	f002 f890 	bl	8002704 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b62      	ldr	r3, [pc, #392]	@ (8000774 <main+0x218>)
 80005ea:	701a      	strb	r2, [r3, #0]
    btn7 = HAL_GPIO_ReadPin(button_7_GPIO_Port, button_7_Pin);
 80005ec:	2102      	movs	r1, #2
 80005ee:	4860      	ldr	r0, [pc, #384]	@ (8000770 <main+0x214>)
 80005f0:	f002 f888 	bl	8002704 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b5f      	ldr	r3, [pc, #380]	@ (8000778 <main+0x21c>)
 80005fa:	701a      	strb	r2, [r3, #0]
    btn8 = HAL_GPIO_ReadPin(button_8_GPIO_Port, button_8_Pin);
 80005fc:	2104      	movs	r1, #4
 80005fe:	485c      	ldr	r0, [pc, #368]	@ (8000770 <main+0x214>)
 8000600:	f002 f880 	bl	8002704 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b5c      	ldr	r3, [pc, #368]	@ (800077c <main+0x220>)
 800060a:	701a      	strb	r2, [r3, #0]
    btn9 = HAL_GPIO_ReadPin(button_9_GPIO_Port, button_9_Pin);
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	485c      	ldr	r0, [pc, #368]	@ (8000780 <main+0x224>)
 8000610:	f002 f878 	bl	8002704 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b5a      	ldr	r3, [pc, #360]	@ (8000784 <main+0x228>)
 800061a:	701a      	strb	r2, [r3, #0]
    btn10 = HAL_GPIO_ReadPin(button_10_GPIO_Port, button_10_Pin);
 800061c:	2101      	movs	r1, #1
 800061e:	485a      	ldr	r0, [pc, #360]	@ (8000788 <main+0x22c>)
 8000620:	f002 f870 	bl	8002704 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b58      	ldr	r3, [pc, #352]	@ (800078c <main+0x230>)
 800062a:	701a      	strb	r2, [r3, #0]


    game_controller.buttons = 0;
 800062c:	4b58      	ldr	r3, [pc, #352]	@ (8000790 <main+0x234>)
 800062e:	2200      	movs	r2, #0
 8000630:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn1 << 0;
 8000632:	4b4a      	ldr	r3, [pc, #296]	@ (800075c <main+0x200>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	4b55      	ldr	r3, [pc, #340]	@ (8000790 <main+0x234>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b21a      	sxth	r2, r3
 8000640:	b20b      	sxth	r3, r1
 8000642:	4313      	orrs	r3, r2
 8000644:	b21b      	sxth	r3, r3
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b51      	ldr	r3, [pc, #324]	@ (8000790 <main+0x234>)
 800064a:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn2 << 1;
 800064c:	4b44      	ldr	r3, [pc, #272]	@ (8000760 <main+0x204>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	0059      	lsls	r1, r3, #1
 8000654:	4b4e      	ldr	r3, [pc, #312]	@ (8000790 <main+0x234>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b21a      	sxth	r2, r3
 800065a:	b20b      	sxth	r3, r1
 800065c:	4313      	orrs	r3, r2
 800065e:	b21b      	sxth	r3, r3
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b4b      	ldr	r3, [pc, #300]	@ (8000790 <main+0x234>)
 8000664:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn3 << 2;
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <main+0x208>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	0099      	lsls	r1, r3, #2
 800066e:	4b48      	ldr	r3, [pc, #288]	@ (8000790 <main+0x234>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	b21a      	sxth	r2, r3
 8000674:	b20b      	sxth	r3, r1
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b44      	ldr	r3, [pc, #272]	@ (8000790 <main+0x234>)
 800067e:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn4 << 3;
 8000680:	4b39      	ldr	r3, [pc, #228]	@ (8000768 <main+0x20c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	00d9      	lsls	r1, r3, #3
 8000688:	4b41      	ldr	r3, [pc, #260]	@ (8000790 <main+0x234>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	b21a      	sxth	r2, r3
 800068e:	b20b      	sxth	r3, r1
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <main+0x234>)
 8000698:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn5 << 4;
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <main+0x210>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	0119      	lsls	r1, r3, #4
 80006a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000790 <main+0x234>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	b20b      	sxth	r3, r1
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <main+0x234>)
 80006b2:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn6 << 5;
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <main+0x218>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	0159      	lsls	r1, r3, #5
 80006bc:	4b34      	ldr	r3, [pc, #208]	@ (8000790 <main+0x234>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	b20b      	sxth	r3, r1
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b31      	ldr	r3, [pc, #196]	@ (8000790 <main+0x234>)
 80006cc:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn7 << 6;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <main+0x21c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	0199      	lsls	r1, r3, #6
 80006d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000790 <main+0x234>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	b21a      	sxth	r2, r3
 80006dc:	b20b      	sxth	r3, r1
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <main+0x234>)
 80006e6:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn8 << 7;
 80006e8:	4b24      	ldr	r3, [pc, #144]	@ (800077c <main+0x220>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	01d9      	lsls	r1, r3, #7
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <main+0x234>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	b20b      	sxth	r3, r1
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <main+0x234>)
 8000700:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn9 << 8;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <main+0x228>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	0219      	lsls	r1, r3, #8
 800070a:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <main+0x234>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	b21a      	sxth	r2, r3
 8000710:	b20b      	sxth	r3, r1
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <main+0x234>)
 800071a:	801a      	strh	r2, [r3, #0]
    game_controller.buttons |= btn10 << 9;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <main+0x230>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	0259      	lsls	r1, r3, #9
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <main+0x234>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	b20b      	sxth	r3, r1
 800072c:	4313      	orrs	r3, r2
 800072e:	b21b      	sxth	r3, r3
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <main+0x234>)
 8000734:	801a      	strh	r2, [r3, #0]

    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&game_controller, sizeof(game_controller));
 8000736:	2206      	movs	r2, #6
 8000738:	4915      	ldr	r1, [pc, #84]	@ (8000790 <main+0x234>)
 800073a:	4816      	ldr	r0, [pc, #88]	@ (8000794 <main+0x238>)
 800073c:	f005 ff92 	bl	8006664 <USBD_CUSTOM_HID_SendReport>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f000 fc51 	bl	8000fe8 <HAL_Delay>
  {
 8000746:	bf00      	nop
 8000748:	e720      	b.n	800058c <main+0x30>
 800074a:	bf00      	nop
 800074c:	20000234 	.word	0x20000234
 8000750:	20000144 	.word	0x20000144
 8000754:	200001ec 	.word	0x200001ec
 8000758:	40021000 	.word	0x40021000
 800075c:	20000238 	.word	0x20000238
 8000760:	20000239 	.word	0x20000239
 8000764:	2000023a 	.word	0x2000023a
 8000768:	2000023b 	.word	0x2000023b
 800076c:	2000023c 	.word	0x2000023c
 8000770:	40021400 	.word	0x40021400
 8000774:	2000023d 	.word	0x2000023d
 8000778:	2000023e 	.word	0x2000023e
 800077c:	2000023f 	.word	0x2000023f
 8000780:	40020000 	.word	0x40020000
 8000784:	20000240 	.word	0x20000240
 8000788:	40021800 	.word	0x40021800
 800078c:	20000241 	.word	0x20000241
 8000790:	2000013c 	.word	0x2000013c
 8000794:	2000024c 	.word	0x2000024c

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	@ 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 f852 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	@ (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a21      	ldr	r2, [pc, #132]	@ (8000868 <SystemClock_Config+0xd0>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800080c:	23a8      	movs	r3, #168	@ 0xa8
 800080e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000814:	2307      	movs	r3, #7
 8000816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f9dd 	bl	8003bdc <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 f9da 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000838:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2105      	movs	r1, #5
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fc3e 	bl	80040cc <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000856:	f000 f9c3 	bl	8000be0 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	@ 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087e:	4b38      	ldr	r3, [pc, #224]	@ (8000960 <MX_ADC1_Init+0xf4>)
 8000880:	4a38      	ldr	r2, [pc, #224]	@ (8000964 <MX_ADC1_Init+0xf8>)
 8000882:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <MX_ADC1_Init+0xf4>)
 8000886:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800088c:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <MX_ADC1_Init+0xf4>)
 800088e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000892:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000894:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <MX_ADC1_Init+0xf4>)
 8000896:	2201      	movs	r2, #1
 8000898:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <MX_ADC1_Init+0xf4>)
 800089c:	2200      	movs	r2, #0
 800089e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d2:	4823      	ldr	r0, [pc, #140]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008d4:	f000 fbac 	bl	8001030 <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80008de:	f000 f97f 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008ea:	2307      	movs	r3, #7
 80008ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	481b      	ldr	r0, [pc, #108]	@ (8000960 <MX_ADC1_Init+0xf4>)
 80008f4:	f000 fe1e 	bl	8001534 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80008fe:	f000 f96f 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000902:	2303      	movs	r3, #3
 8000904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4814      	ldr	r0, [pc, #80]	@ (8000960 <MX_ADC1_Init+0xf4>)
 8000910:	f000 fe10 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800091a:	f000 f961 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800091e:	2308      	movs	r3, #8
 8000920:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000922:	2303      	movs	r3, #3
 8000924:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_ADC1_Init+0xf4>)
 800092c:	f000 fe02 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000936:	f000 f953 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800093a:	2305      	movs	r3, #5
 800093c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800093e:	2304      	movs	r3, #4
 8000940:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_ADC1_Init+0xf4>)
 8000948:	f000 fdf4 	bl	8001534 <HAL_ADC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000952:	f000 f945 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000144 	.word	0x20000144
 8000964:	40012000 	.word	0x40012000

08000968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_TIM3_Init+0x94>)
 8000986:	4a1e      	ldr	r2, [pc, #120]	@ (8000a00 <MX_TIM3_Init+0x98>)
 8000988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_TIM3_Init+0x94>)
 800098c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_TIM3_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_TIM3_Init+0x94>)
 800099a:	2263      	movs	r2, #99	@ 0x63
 800099c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_TIM3_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_TIM3_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009aa:	4814      	ldr	r0, [pc, #80]	@ (80009fc <MX_TIM3_Init+0x94>)
 80009ac:	f003 fd86 	bl	80044bc <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f913 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_TIM3_Init+0x94>)
 80009c8:	f003 fe30 	bl	800462c <HAL_TIM_ConfigClockSource>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 f905 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009d6:	2320      	movs	r3, #32
 80009d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_TIM3_Init+0x94>)
 80009e4:	f004 f830 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009ee:	f000 f8f7 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001ec 	.word	0x200001ec
 8000a00:	40000400 	.word	0x40000400

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_DMA_Init+0x3c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <MX_DMA_Init+0x3c>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_DMA_Init+0x3c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2038      	movs	r0, #56	@ 0x38
 8000a2c:	f001 f917 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a30:	2038      	movs	r0, #56	@ 0x38
 8000a32:	f001 f930 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	@ 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a59      	ldr	r2, [pc, #356]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b57      	ldr	r3, [pc, #348]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b53      	ldr	r3, [pc, #332]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a52      	ldr	r2, [pc, #328]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a80:	f043 0320 	orr.w	r3, r3, #32
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b50      	ldr	r3, [pc, #320]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b49      	ldr	r3, [pc, #292]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b45      	ldr	r3, [pc, #276]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a44      	ldr	r2, [pc, #272]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b42      	ldr	r3, [pc, #264]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b37      	ldr	r3, [pc, #220]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a36      	ldr	r2, [pc, #216]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b34      	ldr	r3, [pc, #208]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <MX_GPIO_Init+0x184>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	482a      	ldr	r0, [pc, #168]	@ (8000bcc <MX_GPIO_Init+0x188>)
 8000b24:	f001 fe06 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_1_Pin button_5_Pin button_2_Pin button_3_Pin
                           button_4_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_5_Pin|button_2_Pin|button_3_Pin
 8000b28:	237c      	movs	r3, #124	@ 0x7c
 8000b2a:	61fb      	str	r3, [r7, #28]
                          |button_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4825      	ldr	r0, [pc, #148]	@ (8000bd0 <MX_GPIO_Init+0x18c>)
 8000b3c:	f001 fc36 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : button_6_Pin button_7_Pin button_8_Pin */
  GPIO_InitStruct.Pin = button_6_Pin|button_7_Pin|button_8_Pin;
 8000b40:	2307      	movs	r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4820      	ldr	r0, [pc, #128]	@ (8000bd4 <MX_GPIO_Init+0x190>)
 8000b54:	f001 fc2a 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : button_9_Pin */
  GPIO_InitStruct.Pin = button_9_Pin;
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(button_9_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481b      	ldr	r0, [pc, #108]	@ (8000bd8 <MX_GPIO_Init+0x194>)
 8000b6c:	f001 fc1e 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : button_10_Pin */
  GPIO_InitStruct.Pin = button_10_Pin;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(button_10_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <MX_GPIO_Init+0x198>)
 8000b84:	f001 fc12 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <MX_GPIO_Init+0x188>)
 8000b9e:	f001 fc05 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_led_Pin */
  GPIO_InitStruct.Pin = blue_led_Pin;
 8000ba2:	2380      	movs	r3, #128	@ 0x80
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(blue_led_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_GPIO_Init+0x188>)
 8000bba:	f001 fbf7 	bl	80023ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3730      	adds	r7, #48	@ 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40021400 	.word	0x40021400
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40021800 	.word	0x40021800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a4d      	ldr	r2, [pc, #308]	@ (8000d90 <HAL_ADC_MspInit+0x154>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f040 8093 	bne.w	8000d86 <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	4b4b      	ldr	r3, [pc, #300]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c68:	4a4a      	ldr	r2, [pc, #296]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c70:	4b48      	ldr	r3, [pc, #288]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c84:	4a43      	ldr	r2, [pc, #268]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8c:	4b41      	ldr	r3, [pc, #260]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b36      	ldr	r3, [pc, #216]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbc:	4a35      	ldr	r2, [pc, #212]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <HAL_ADC_MspInit+0x158>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	482d      	ldr	r0, [pc, #180]	@ (8000d98 <HAL_ADC_MspInit+0x15c>)
 8000ce4:	f001 fb62 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8000ce8:	2329      	movs	r3, #41	@ 0x29
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4828      	ldr	r0, [pc, #160]	@ (8000d9c <HAL_ADC_MspInit+0x160>)
 8000cfc:	f001 fb56 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	@ (8000da0 <HAL_ADC_MspInit+0x164>)
 8000d14:	f001 fb4a 	bl	80023ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d1a:	4a23      	ldr	r2, [pc, #140]	@ (8000da8 <HAL_ADC_MspInit+0x16c>)
 8000d1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d5a:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d5c:	f000 ffb6 	bl	8001ccc <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000d66:	f7ff ff3b 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d70:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <HAL_ADC_MspInit+0x168>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2012      	movs	r0, #18
 8000d7c:	f000 ff6f 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d80:	2012      	movs	r0, #18
 8000d82:	f000 ff88 	bl	8001c96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d86:	bf00      	nop
 8000d88:	3730      	adds	r7, #48	@ 0x30
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40012000 	.word	0x40012000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	2000018c 	.word	0x2000018c
 8000da8:	40026410 	.word	0x40026410

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10d      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_TIM_Base_MspInit+0x40>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <HAL_TIM_Base_MspInit+0x40>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <HAL_TIM_Base_MspInit+0x40>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40000400 	.word	0x40000400
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f8af 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <ADC_IRQHandler+0x10>)
 8000e56:	f000 f92e 	bl	80010b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000144 	.word	0x20000144

08000e64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <DMA2_Stream0_IRQHandler+0x10>)
 8000e6a:	f001 f835 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000018c 	.word	0x2000018c

08000e78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <OTG_FS_IRQHandler+0x10>)
 8000e7e:	f001 fdb6 	bl	80029ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000728 	.word	0x20000728

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb4:	f7ff ffea 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8000efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f007 fcbf 	bl	8008860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fb3b 	bl	800055c <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000ef4:	08008948 	.word	0x08008948
  ldr r2, =_sbss
 8000ef8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000efc:	20000c44 	.word	0x20000c44

08000f00 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <CAN1_RX0_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 fe8b 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe58 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fea3 	bl	8001cb2 <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 fe6b 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000244 	.word	0x20000244

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000244 	.word	0x20000244

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e033      	b.n	80010ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fdf4 	bl	8000c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b00      	cmp	r3, #0
 800106c:	d118      	bne.n	80010a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001076:	f023 0302 	bic.w	r3, r3, #2
 800107a:	f043 0202 	orr.w	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fb88 	bl	8001798 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f023 0303 	bic.w	r3, r3, #3
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
 800109e:	e001      	b.n	80010a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d049      	beq.n	8001180 <HAL_ADC_IRQHandler+0xca>
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d046      	beq.n	8001180 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d105      	bne.n	800110a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d12b      	bne.n	8001170 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800111c:	2b00      	cmp	r3, #0
 800111e:	d127      	bne.n	8001170 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001126:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001138:	2b00      	cmp	r3, #0
 800113a:	d119      	bne.n	8001170 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0220 	bic.w	r2, r2, #32
 800114a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f9d1 	bl	8000518 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f06f 0212 	mvn.w	r2, #18
 800117e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d057      	beq.n	8001246 <HAL_ADC_IRQHandler+0x190>
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d054      	beq.n	8001246 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d139      	bne.n	8001236 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12b      	bne.n	8001236 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d124      	bne.n	8001236 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d11d      	bne.n	8001236 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d119      	bne.n	8001236 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001210:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fc2c 	bl	8001a94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f06f 020c 	mvn.w	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001254:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d017      	beq.n	800128c <HAL_ADC_IRQHandler+0x1d6>
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d014      	beq.n	800128c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10d      	bne.n	800128c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f945 	bl	800150c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f06f 0201 	mvn.w	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800129a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d015      	beq.n	80012ce <HAL_ADC_IRQHandler+0x218>
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d012      	beq.n	80012ce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f043 0202 	orr.w	r2, r3, #2
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f06f 0220 	mvn.w	r2, #32
 80012bc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f92e 	bl	8001520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0220 	mvn.w	r2, #32
 80012cc:	601a      	str	r2, [r3, #0]
  }
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Start_DMA+0x1e>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e0e9      	b.n	80014ca <HAL_ADC_Start_DMA+0x1f2>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d018      	beq.n	800133e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800131c:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <HAL_ADC_Start_DMA+0x1fc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6d      	ldr	r2, [pc, #436]	@ (80014d8 <HAL_ADC_Start_DMA+0x200>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9a      	lsrs	r2, r3, #18
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001330:	e002      	b.n	8001338 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	3b01      	subs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800134c:	d107      	bne.n	800135e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800135c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80a1 	bne.w	80014b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001398:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013ac:	d106      	bne.n	80013bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f023 0206 	bic.w	r2, r3, #6
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80013ba:	e002      	b.n	80013c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ca:	4b44      	ldr	r3, [pc, #272]	@ (80014dc <HAL_ADC_Start_DMA+0x204>)
 80013cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d2:	4a43      	ldr	r2, [pc, #268]	@ (80014e0 <HAL_ADC_Start_DMA+0x208>)
 80013d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013da:	4a42      	ldr	r2, [pc, #264]	@ (80014e4 <HAL_ADC_Start_DMA+0x20c>)
 80013dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e2:	4a41      	ldr	r2, [pc, #260]	@ (80014e8 <HAL_ADC_Start_DMA+0x210>)
 80013e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80013fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800140e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	334c      	adds	r3, #76	@ 0x4c
 800141a:	4619      	mov	r1, r3
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f000 fd02 	bl	8001e28 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12a      	bne.n	8001486 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2d      	ldr	r2, [pc, #180]	@ (80014ec <HAL_ADC_Start_DMA+0x214>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d015      	beq.n	8001466 <HAL_ADC_Start_DMA+0x18e>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2c      	ldr	r2, [pc, #176]	@ (80014f0 <HAL_ADC_Start_DMA+0x218>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d105      	bne.n	8001450 <HAL_ADC_Start_DMA+0x178>
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <HAL_ADC_Start_DMA+0x204>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00a      	beq.n	8001466 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <HAL_ADC_Start_DMA+0x21c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d136      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <HAL_ADC_Start_DMA+0x204>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d130      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d129      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e020      	b.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <HAL_ADC_Start_DMA+0x214>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d11b      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d114      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	e00b      	b.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f043 0210 	orr.w	r2, r3, #16
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	40012300 	.word	0x40012300
 80014e0:	08001991 	.word	0x08001991
 80014e4:	08001a4b 	.word	0x08001a4b
 80014e8:	08001a67 	.word	0x08001a67
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40012100 	.word	0x40012100
 80014f4:	40012200 	.word	0x40012200

080014f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1c>
 800154c:	2302      	movs	r3, #2
 800154e:	e113      	b.n	8001778 <HAL_ADC_ConfigChannel+0x244>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d925      	bls.n	80015ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	3b1e      	subs	r3, #30
 8001576:	2207      	movs	r2, #7
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	400a      	ands	r2, r1
 8001584:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4403      	add	r3, r0
 800159e:	3b1e      	subs	r3, #30
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	e022      	b.n	80015f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6919      	ldr	r1, [r3, #16]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	2207      	movs	r2, #7
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4403      	add	r3, r0
 80015e8:	409a      	lsls	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d824      	bhi.n	8001644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b05      	subs	r3, #5
 800160c:	221f      	movs	r2, #31
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	400a      	ands	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b05      	subs	r3, #5
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	635a      	str	r2, [r3, #52]	@ 0x34
 8001642:	e04c      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d824      	bhi.n	8001696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b23      	subs	r3, #35	@ 0x23
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43da      	mvns	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	400a      	ands	r2, r1
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b23      	subs	r3, #35	@ 0x23
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
 8001694:	e023      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b41      	subs	r3, #65	@ 0x41
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	400a      	ands	r2, r1
 80016b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b41      	subs	r3, #65	@ 0x41
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016de:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_ADC_ConfigChannel+0x250>)
 80016e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <HAL_ADC_ConfigChannel+0x254>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10f      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <HAL_ADC_ConfigChannel+0x254>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	@ (800178c <HAL_ADC_ConfigChannel+0x258>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x1f4>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b11      	cmp	r3, #17
 8001726:	d122      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_ADC_ConfigChannel+0x258>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d111      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_ADC_ConfigChannel+0x25c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a11      	ldr	r2, [pc, #68]	@ (8001794 <HAL_ADC_ConfigChannel+0x260>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9a      	lsrs	r2, r3, #18
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001760:	e002      	b.n	8001768 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40012300 	.word	0x40012300
 8001788:	40012000 	.word	0x40012000
 800178c:	10000012 	.word	0x10000012
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a0:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <ADC_Init+0x1f0>)
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	4a58      	ldr	r2, [pc, #352]	@ (800198c <ADC_Init+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d022      	beq.n	8001876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800183e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	e00f      	b.n	8001896 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0202 	bic.w	r2, r2, #2
 80018a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	035a      	lsls	r2, r3, #13
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	e007      	b.n	800190c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800190a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800191a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	3b01      	subs	r3, #1
 8001928:	051a      	lsls	r2, r3, #20
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800194e:	025a      	lsls	r2, r3, #9
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	029a      	lsls	r2, r3, #10
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012300 	.word	0x40012300
 800198c:	0f000001 	.word	0x0f000001

08001990 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d13c      	bne.n	8001a24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12b      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d127      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d119      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0220 	bic.w	r2, r2, #32
 80019f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7fe fd7b 	bl	8000518 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a22:	e00e      	b.n	8001a42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fd75 	bl	8001520 <HAL_ADC_ErrorCallback>
}
 8001a36:	e004      	b.n	8001a42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a56:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fd4d 	bl	80014f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a72:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f043 0204 	orr.w	r2, r3, #4
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fd4a 	bl	8001520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	@ (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff f97a 	bl	8000fd0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e099      	b.n	8001e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d08:	e00f      	b.n	8001d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0a:	f7ff f961 	bl	8000fd0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d908      	bls.n	8001d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e078      	b.n	8001e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e8      	bne.n	8001d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <HAL_DMA_Init+0x158>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d117      	bne.n	8001dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fa6f 	bl	80022b4 <DMA_CheckFifoParam>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dea:	2301      	movs	r3, #1
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa26 	bl	8002248 <DMA_CalcBaseAndBitshift>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	223f      	movs	r2, #63	@ 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	f010803f 	.word	0xf010803f

08001e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Start_IT+0x26>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e040      	b.n	8001ed0 <HAL_DMA_Start_IT+0xa8>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12f      	bne.n	8001ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f9b8 	bl	80021ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	223f      	movs	r2, #63	@ 0x3f
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0216 	orr.w	r2, r2, #22
 8001e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0208 	orr.w	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e005      	b.n	8001ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8002120 <HAL_DMA_IRQHandler+0x248>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8e      	ldr	r2, [pc, #568]	@ (8002124 <HAL_DMA_IRQHandler+0x24c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808f 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8087 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	223f      	movs	r2, #63	@ 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e079      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d031      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02c      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000
 8002124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e01e      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0210 	bic.w	r2, r2, #16
 8002156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d032      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2205      	movs	r2, #5
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d307      	bcc.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f2      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x2cc>
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021e4:	bf00      	nop
    }
  }
}
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b40      	cmp	r3, #64	@ 0x40
 8002218:	d108      	bne.n	800222c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222a:	e007      	b.n	800223c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b10      	subs	r3, #16
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <DMA_CalcBaseAndBitshift+0x64>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002262:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d909      	bls.n	800228a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58
 8002288:	e007      	b.n	800229a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	aaaaaaab 	.word	0xaaaaaaab
 80022b0:	08008930 	.word	0x08008930

080022b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11f      	bne.n	800230e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d856      	bhi.n	8002382 <DMA_CheckFifoParam+0xce>
 80022d4:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <DMA_CheckFifoParam+0x28>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022ff 	.word	0x080022ff
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002383 	.word	0x08002383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d046      	beq.n	8002386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e043      	b.n	8002386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002306:	d140      	bne.n	800238a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e03d      	b.n	800238a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d121      	bne.n	800235c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d837      	bhi.n	800238e <DMA_CheckFifoParam+0xda>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <DMA_CheckFifoParam+0x70>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233b 	.word	0x0800233b
 800232c:	08002335 	.word	0x08002335
 8002330:	0800234d 	.word	0x0800234d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e030      	b.n	800239c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d025      	beq.n	8002392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234a:	e022      	b.n	8002392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235a:	e01c      	b.n	8002396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d903      	bls.n	800236a <DMA_CheckFifoParam+0xb6>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d003      	beq.n	8002370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002368:	e018      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      break;
 800236e:	e015      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e00b      	b.n	800239a <DMA_CheckFifoParam+0xe6>
      break;
 8002382:	bf00      	nop
 8002384:	e00a      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e008      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e006      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e004      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;   
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
    }
  } 
  
  return status; 
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e177      	b.n	80026b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8166 	bne.w	80026b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80c0 	beq.w	80026b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b66      	ldr	r3, [pc, #408]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b63      	ldr	r3, [pc, #396]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a61      	ldr	r2, [pc, #388]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a58      	ldr	r2, [pc, #352]	@ (80026d8 <HAL_GPIO_Init+0x32c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d037      	beq.n	80025ea <HAL_GPIO_Init+0x23e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a57      	ldr	r2, [pc, #348]	@ (80026dc <HAL_GPIO_Init+0x330>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d031      	beq.n	80025e6 <HAL_GPIO_Init+0x23a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a56      	ldr	r2, [pc, #344]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02b      	beq.n	80025e2 <HAL_GPIO_Init+0x236>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a55      	ldr	r2, [pc, #340]	@ (80026e4 <HAL_GPIO_Init+0x338>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x232>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a54      	ldr	r2, [pc, #336]	@ (80026e8 <HAL_GPIO_Init+0x33c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x22e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a53      	ldr	r2, [pc, #332]	@ (80026ec <HAL_GPIO_Init+0x340>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x22a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_GPIO_Init+0x344>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a51      	ldr	r2, [pc, #324]	@ (80026f4 <HAL_GPIO_Init+0x348>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <HAL_GPIO_Init+0x34c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4f      	ldr	r2, [pc, #316]	@ (80026fc <HAL_GPIO_Init+0x350>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x21a>
 80025c2:	2309      	movs	r3, #9
 80025c4:	e012      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025c6:	230a      	movs	r3, #10
 80025c8:	e010      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ca:	2308      	movs	r3, #8
 80025cc:	e00e      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025d2:	2306      	movs	r3, #6
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3d      	ldr	r3, [pc, #244]	@ (8002700 <HAL_GPIO_Init+0x354>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a29      	ldr	r2, [pc, #164]	@ (8002700 <HAL_GPIO_Init+0x354>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <HAL_GPIO_Init+0x354>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <HAL_GPIO_Init+0x354>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae84 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40022400 	.word	0x40022400
 8002700:	40013c00 	.word	0x40013c00

08002704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e001      	b.n	8002726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af02      	add	r7, sp, #8
 800276c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e101      	b.n	800297c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f005 fd5a 	bl	800824c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a6:	d102      	bne.n	80027ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fadb 	bl	8004d6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7c1a      	ldrb	r2, [r3, #16]
 80027c0:	f88d 2000 	strb.w	r2, [sp]
 80027c4:	3304      	adds	r3, #4
 80027c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c8:	f002 f9ba 	bl	8004b40 <USB_CoreInit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0ce      	b.n	800297c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fad3 	bl	8004d90 <USB_SetCurrentMode>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0bf      	b.n	800297c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e04a      	b.n	8002898 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3315      	adds	r3, #21
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3314      	adds	r3, #20
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	b298      	uxth	r0, r3
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	332e      	adds	r3, #46	@ 0x2e
 800283e:	4602      	mov	r2, r0
 8002840:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3318      	adds	r3, #24
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	331c      	adds	r3, #28
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3320      	adds	r3, #32
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3324      	adds	r3, #36	@ 0x24
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	3301      	adds	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	791b      	ldrb	r3, [r3, #4]
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3af      	bcc.n	8002802 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e044      	b.n	8002932 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	3301      	adds	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	791b      	ldrb	r3, [r3, #4]
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3b5      	bcc.n	80028a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7c1a      	ldrb	r2, [r3, #16]
 8002944:	f88d 2000 	strb.w	r2, [sp]
 8002948:	3304      	adds	r3, #4
 800294a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294c:	f002 fa6c 	bl	8004e28 <USB_DevInit>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00c      	b.n	800297c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fab6 	bl	8005ee6 <USB_DevDisconnect>

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_PCD_Start+0x1c>
 800299c:	2302      	movs	r3, #2
 800299e:	e022      	b.n	80029e6 <HAL_PCD_Start+0x62>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 f9bd 	bl	8004d4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fa64 	bl	8005ea4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ee:	b590      	push	{r4, r7, lr}
 80029f0:	b08d      	sub	sp, #52	@ 0x34
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fb22 	bl	800604e <USB_GetMode>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 848c 	bne.w	800332a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fa86 	bl	8005f28 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8482 	beq.w	8003328 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fa73 	bl	8005f28 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d107      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f002 0202 	and.w	r2, r2, #2
 8002a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 fa61 	bl	8005f28 <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d161      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0210 	bic.w	r2, r2, #16
 8002a7e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002aa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002aaa:	d124      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d035      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6a38      	ldr	r0, [r7, #32]
 8002acc:	f003 f898 	bl	8005c00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002adc:	441a      	add	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aee:	441a      	add	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	615a      	str	r2, [r3, #20]
 8002af4:	e016      	b.n	8002b24 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002afc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b00:	d110      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6a38      	ldr	r0, [r7, #32]
 8002b0e:	f003 f877 	bl	8005c00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1e:	441a      	add	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0210 	orr.w	r2, r2, #16
 8002b32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 f9f5 	bl	8005f28 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b48:	f040 80a7 	bne.w	8002c9a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 f9fa 	bl	8005f4e <USB_ReadDevAllOutEpInterrupt>
 8002b5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b5c:	e099      	b.n	8002c92 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 808e 	beq.w	8002c86 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fa1e 	bl	8005fb6 <USB_ReadDevOutEPInterrupt>
 8002b7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b92:	461a      	mov	r2, r3
 8002b94:	2301      	movs	r3, #1
 8002b96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fe8c 	bl	80038b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2308      	movs	r3, #8
 8002bba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 ff62 	bl	8003a88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2310      	movs	r3, #16
 8002bde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d030      	beq.n	8002c4c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	d109      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c08:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	78db      	ldrb	r3, [r3, #3]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d108      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f005 fc0f 	bl	8008458 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c46:	461a      	mov	r2, r3
 8002c48:	2302      	movs	r3, #2
 8002c4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c62:	461a      	mov	r2, r3
 8002c64:	2320      	movs	r3, #32
 8002c66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af62 	bne.w	8002b5e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 f942 	bl	8005f28 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cae:	f040 80db 	bne.w	8002e68 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 f963 	bl	8005f82 <USB_ReadDevAllInEpInterrupt>
 8002cbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cc2:	e0cd      	b.n	8002e60 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80c2 	beq.w	8002e54 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 f989 	bl	8005ff2 <USB_ReadDevInEPInterrupt>
 8002ce0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d057      	beq.n	8002d9c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69f9      	ldr	r1, [r7, #28]
 8002d08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2301      	movs	r3, #1
 8002d20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	799b      	ldrb	r3, [r3, #6]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d132      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3320      	adds	r3, #32
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4403      	add	r3, r0
 8002d4a:	331c      	adds	r3, #28
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4419      	add	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3320      	adds	r3, #32
 8002d60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d113      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x3a2>
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3324      	adds	r3, #36	@ 0x24
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	f003 f990 	bl	80060b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f005 fad9 	bl	800834e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db2:	461a      	mov	r2, r3
 8002db4:	2308      	movs	r3, #8
 8002db6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dea:	461a      	mov	r2, r3
 8002dec:	2340      	movs	r3, #64	@ 0x40
 8002dee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d023      	beq.n	8002e42 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002dfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dfc:	6a38      	ldr	r0, [r7, #32]
 8002dfe:	f002 f977 	bl	80050f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	78db      	ldrb	r3, [r3, #3]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d108      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f005 fb26 	bl	800847c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2302      	movs	r3, #2
 8002e40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fca5 	bl	800379e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	3301      	adds	r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f47f af2e 	bne.w	8002cc4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 f85b 	bl	8005f28 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e7c:	d122      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fe8c 	bl	8003bc4 <HAL_PCDEx_LPM_Callback>
 8002eac:	e002      	b.n	8002eb4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f005 fac4 	bl	800843c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 f82d 	bl	8005f28 <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed8:	d112      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d102      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f005 fa80 	bl	80083f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002efe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 f80f 	bl	8005f28 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f14:	f040 80b7 	bne.w	8003086 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2110      	movs	r1, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 f8dc 	bl	80050f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3c:	e046      	b.n	8002fcc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f62:	0151      	lsls	r1, r2, #5
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	440a      	add	r2, r1
 8002f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f96:	0151      	lsls	r1, r2, #5
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	440a      	add	r2, r1
 8002f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc8:	3301      	adds	r3, #1
 8002fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	791b      	ldrb	r3, [r3, #4]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d3b2      	bcc.n	8002f3e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7bdb      	ldrb	r3, [r3, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003004:	f043 030b 	orr.w	r3, r3, #11
 8003008:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800301a:	f043 030b 	orr.w	r3, r3, #11
 800301e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003020:	e015      	b.n	800304e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003030:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003034:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003038:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003048:	f043 030b 	orr.w	r3, r3, #11
 800304c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003060:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003070:	461a      	mov	r2, r3
 8003072:	f003 f81d 	bl	80060b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f002 ff4c 	bl	8005f28 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309a:	d123      	bne.n	80030e4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 ffe2 	bl	800606a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 f899 	bl	80051e2 <USB_GetDevSpeed>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681c      	ldr	r4, [r3, #0]
 80030bc:	f001 f9f2 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80030c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030c6:	461a      	mov	r2, r3
 80030c8:	4620      	mov	r0, r4
 80030ca:	f001 fd9d 	bl	8004c08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f005 f965 	bl	800839e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 ff1d 	bl	8005f28 <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d10a      	bne.n	800310e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f005 f942 	bl	8008382 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f002 0208 	and.w	r2, r2, #8
 800310c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f002 ff08 	bl	8005f28 <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	d123      	bne.n	800316a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312e:	2301      	movs	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
 8003132:	e014      	b.n	800315e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 faf2 	bl	800373c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	3301      	adds	r3, #1
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	791b      	ldrb	r3, [r3, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	4293      	cmp	r3, r2
 8003168:	d3e4      	bcc.n	8003134 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 feda 	bl	8005f28 <USB_ReadInterrupts>
 8003174:	4603      	mov	r3, r0
 8003176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800317e:	d13c      	bne.n	80031fa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
 8003184:	e02b      	b.n	80031de <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3318      	adds	r3, #24
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d115      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da12      	bge.n	80031d8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3317      	adds	r3, #23
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fab2 	bl	800373c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	3301      	adds	r3, #1
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	791b      	ldrb	r3, [r3, #4]
 80031e2:	461a      	mov	r2, r3
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d3cd      	bcc.n	8003186 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 fe92 	bl	8005f28 <USB_ReadInterrupts>
 8003204:	4603      	mov	r3, r0
 8003206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800320e:	d156      	bne.n	80032be <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003210:	2301      	movs	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
 8003214:	e045      	b.n	80032a2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d12e      	bne.n	800329c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800323e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003240:	2b00      	cmp	r3, #0
 8003242:	da2b      	bge.n	800329c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003250:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003254:	429a      	cmp	r2, r3
 8003256:	d121      	bne.n	800329c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003294:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003298:	6053      	str	r3, [r2, #4]
            break;
 800329a:	e008      	b.n	80032ae <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	3301      	adds	r3, #1
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d3b3      	bcc.n	8003216 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fe30 	bl	8005f28 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d2:	d10a      	bne.n	80032ea <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f005 f8e3 	bl	80084a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f002 fe1a 	bl	8005f28 <USB_ReadInterrupts>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d115      	bne.n	800332a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f005 f8d3 	bl	80084bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e000      	b.n	800332a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003328:	bf00      	nop
    }
  }
}
 800332a:	3734      	adds	r7, #52	@ 0x34
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}

08003330 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_PCD_SetAddress+0x1a>
 8003346:	2302      	movs	r3, #2
 8003348:	e012      	b.n	8003370 <HAL_PCD_SetAddress+0x40>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fd79 	bl	8005e58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4608      	mov	r0, r1
 8003382:	4611      	mov	r1, r2
 8003384:	461a      	mov	r2, r3
 8003386:	4603      	mov	r3, r0
 8003388:	70fb      	strb	r3, [r7, #3]
 800338a:	460b      	mov	r3, r1
 800338c:	803b      	strh	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da0f      	bge.n	80033be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	3310      	adds	r3, #16
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	705a      	strb	r2, [r3, #1]
 80033bc:	e00f      	b.n	80033de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80033ea:	883b      	ldrh	r3, [r7, #0]
 80033ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	78ba      	ldrb	r2, [r7, #2]
 80033f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800340c:	78bb      	ldrb	r3, [r7, #2]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d102      	bne.n	8003418 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_EP_Open+0xae>
 8003422:	2302      	movs	r3, #2
 8003424:	e00e      	b.n	8003444 <HAL_PCD_EP_Open+0xcc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fef9 	bl	800522c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003442:	7afb      	ldrb	r3, [r7, #11]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	da0f      	bge.n	8003480 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3310      	adds	r3, #16
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	705a      	strb	r2, [r3, #1]
 800347e:	e00f      	b.n	80034a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_PCD_EP_Close+0x6e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e00e      	b.n	80034d8 <HAL_PCD_EP_Close+0x8c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 ff37 	bl	800533c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003522:	7afb      	ldrb	r3, [r7, #11]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	b2da      	uxtb	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	799b      	ldrb	r3, [r3, #6]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	799b      	ldrb	r3, [r3, #6]
 8003544:	461a      	mov	r2, r3
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	f001 ffd4 	bl	80054f4 <USB_EPStartXfer>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	460b      	mov	r3, r1
 8003564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	f003 020f 	and.w	r2, r3, #15
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	3310      	adds	r3, #16
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2201      	movs	r2, #1
 8003594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003596:	7afb      	ldrb	r3, [r7, #11]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	799b      	ldrb	r3, [r3, #6]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6979      	ldr	r1, [r7, #20]
 80035bc:	f001 ff9a 	bl	80054f4 <USB_EPStartXfer>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	7912      	ldrb	r2, [r2, #4]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e04f      	b.n	8003688 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da0f      	bge.n	8003610 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3310      	adds	r3, #16
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	705a      	strb	r2, [r3, #1]
 800360e:	e00d      	b.n	800362c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_PCD_EP_SetStall+0x82>
 8003648:	2302      	movs	r3, #2
 800364a:	e01d      	b.n	8003688 <HAL_PCD_EP_SetStall+0xbe>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f002 fb28 	bl	8005cb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7999      	ldrb	r1, [r3, #6]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003678:	461a      	mov	r2, r3
 800367a:	f002 fd19 	bl	80060b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	7912      	ldrb	r2, [r2, #4]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e042      	b.n	8003734 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da0f      	bge.n	80036d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3310      	adds	r3, #16
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	3304      	adds	r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	705a      	strb	r2, [r3, #1]
 80036d4:	e00f      	b.n	80036f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_PCD_EP_ClrStall+0x86>
 8003712:	2302      	movs	r3, #2
 8003714:	e00e      	b.n	8003734 <HAL_PCD_EP_ClrStall+0xa4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fb31 	bl	8005d8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da0c      	bge.n	800376a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3310      	adds	r3, #16
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e00c      	b.n	8003784 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 f950 	bl	8005a30 <USB_EPStopXfer>
 8003790:	4603      	mov	r3, r0
 8003792:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003794:	7afb      	ldrb	r3, [r7, #11]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08a      	sub	sp, #40	@ 0x28
 80037a2:	af02      	add	r7, sp, #8
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3310      	adds	r3, #16
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d901      	bls.n	80037d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06b      	b.n	80038ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d902      	bls.n	80037f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3303      	adds	r3, #3
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fa:	e02a      	b.n	8003852 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	429a      	cmp	r2, r3
 8003810:	d902      	bls.n	8003818 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3303      	adds	r3, #3
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	4603      	mov	r3, r0
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f002 f9a5 	bl	8005b84 <USB_WritePacket>

    ep->xfer_buff  += len;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d809      	bhi.n	800387c <PCD_WriteEmptyTxFifo+0xde>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003870:	429a      	cmp	r2, r3
 8003872:	d203      	bcs.n	800387c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1bf      	bne.n	80037fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	d811      	bhi.n	80038ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	2201      	movs	r2, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	6939      	ldr	r1, [r7, #16]
 80038a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038a8:	4013      	ands	r3, r2
 80038aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	333c      	adds	r3, #60	@ 0x3c
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	799b      	ldrb	r3, [r3, #6]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d17b      	bne.n	80039e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4a61      	ldr	r2, [pc, #388]	@ (8003a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	f240 80b9 	bls.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80b3 	beq.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003920:	6093      	str	r3, [r2, #8]
 8003922:	e0a7      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	2320      	movs	r3, #32
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e098      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 8093 	bne.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a4b      	ldr	r2, [pc, #300]	@ (8003a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d90f      	bls.n	8003976 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003972:	6093      	str	r3, [r2, #8]
 8003974:	e07e      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	0159      	lsls	r1, r3, #5
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	440b      	add	r3, r1
 8003998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d114      	bne.n	80039d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039c0:	461a      	mov	r2, r3
 80039c2:	2101      	movs	r1, #1
 80039c4:	f002 fb74 	bl	80060b0 <USB_EP0_OutStart>
 80039c8:	e006      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f004 fc9a 	bl	8008318 <HAL_PCD_DataOutStageCallback>
 80039e4:	e046      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d124      	bne.n	8003a38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	e032      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f004 fc71 	bl	8008318 <HAL_PCD_DataOutStageCallback>
 8003a36:	e01d      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d114      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a60:	461a      	mov	r2, r3
 8003a62:	2100      	movs	r1, #0
 8003a64:	f002 fb24 	bl	80060b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f004 fc52 	bl	8008318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	4f54300a 	.word	0x4f54300a
 8003a84:	4f54310a 	.word	0x4f54310a

08003a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	333c      	adds	r3, #60	@ 0x3c
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d90e      	bls.n	8003adc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ada:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f004 fc09 	bl	80082f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d90c      	bls.n	8003b04 <PCD_EP_OutSetupPacket_int+0x7c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	799b      	ldrb	r3, [r3, #6]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003afc:	461a      	mov	r2, r3
 8003afe:	2101      	movs	r1, #1
 8003b00:	f002 fad6 	bl	80060b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	4f54300a 	.word	0x4f54300a

08003b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	4613      	mov	r3, r2
 8003b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	0419      	lsls	r1, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b40:	e028      	b.n	8003b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e00d      	b.n	8003b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3340      	adds	r3, #64	@ 0x40
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3ec      	bcc.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b7c:	883b      	ldrh	r3, [r7, #0]
 8003b7e:	0418      	lsls	r0, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4302      	orrs	r2, r0
 8003b8c:	3340      	adds	r3, #64	@ 0x40
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e267      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bfa:	4b88      	ldr	r3, [pc, #544]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b85      	ldr	r3, [pc, #532]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b82      	ldr	r3, [pc, #520]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b7e      	ldr	r3, [pc, #504]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e242      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a75      	ldr	r2, [pc, #468]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b70      	ldr	r3, [pc, #448]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6d      	ldr	r3, [pc, #436]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b69      	ldr	r3, [pc, #420]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a68      	ldr	r2, [pc, #416]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b66      	ldr	r3, [pc, #408]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a65      	ldr	r2, [pc, #404]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd f99c 	bl	8000fd0 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd f998 	bl	8000fd0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e207      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b5b      	ldr	r3, [pc, #364]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd f988 	bl	8000fd0 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd f984 	bl	8000fd0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1f3      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b51      	ldr	r3, [pc, #324]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b47      	ldr	r3, [pc, #284]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b44      	ldr	r3, [pc, #272]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4937      	ldr	r1, [pc, #220]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd f93d 	bl	8000fd0 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fd f939 	bl	8000fd0 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a8      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4925      	ldr	r1, [pc, #148]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd f91c 	bl	8000fd0 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd f918 	bl	8000fd0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e187      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d036      	beq.n	8003e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd f8fc 	bl	8000fd0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fd f8f8 	bl	8000fd0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e167      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e01b      	b.n	8003e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd f8e5 	bl	8000fd0 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e00e      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd f8e1 	bl	8000fd0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d907      	bls.n	8003e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e150      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470000 	.word	0x42470000
 8003e24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ea      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8097 	beq.w	8003f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b81      	ldr	r3, [pc, #516]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b7d      	ldr	r3, [pc, #500]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e62:	4b7a      	ldr	r3, [pc, #488]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b77      	ldr	r3, [pc, #476]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d118      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b74      	ldr	r3, [pc, #464]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a73      	ldr	r2, [pc, #460]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fd f8a1 	bl	8000fd0 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e92:	f7fd f89d 	bl	8000fd0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e10c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2ea>
 8003eb8:	4b64      	ldr	r3, [pc, #400]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebc:	4a63      	ldr	r2, [pc, #396]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x30c>
 8003ece:	4b5f      	ldr	r3, [pc, #380]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eda:	4b5c      	ldr	r3, [pc, #368]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	4a5b      	ldr	r2, [pc, #364]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ee8:	4b58      	ldr	r3, [pc, #352]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a57      	ldr	r2, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	4b55      	ldr	r3, [pc, #340]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef8:	4a54      	ldr	r2, [pc, #336]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd f862 	bl	8000fd0 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd f85e 	bl	8000fd0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0cb      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b49      	ldr	r3, [pc, #292]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCC_OscConfig+0x334>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fd f84c 	bl	8000fd0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd f848 	bl	8000fd0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0b5      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ee      	bne.n	8003f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	4a38      	ldr	r2, [pc, #224]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a1 	beq.w	80040bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d05c      	beq.n	8004040 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d141      	bne.n	8004012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <HAL_RCC_OscConfig+0x478>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd f81c 	bl	8000fd0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd f818 	bl	8000fd0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e087      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b27      	ldr	r3, [pc, #156]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	491b      	ldr	r1, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_RCC_OscConfig+0x478>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fc fff1 	bl	8000fd0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fc ffed 	bl	8000fd0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e05c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x416>
 8004010:	e054      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCC_OscConfig+0x478>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fc ffda 	bl	8000fd0 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fc ffd6 	bl	8000fd0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x444>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e038      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004058:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d121      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800408e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cc      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b68      	ldr	r3, [pc, #416]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d90c      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b65      	ldr	r3, [pc, #404]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d044      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3b      	ldr	r3, [pc, #236]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e067      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b37      	ldr	r3, [pc, #220]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4934      	ldr	r1, [pc, #208]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fc ff08 	bl	8000fd0 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fc ff04 	bl	8000fd0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2b      	ldr	r3, [pc, #172]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b22      	ldr	r3, [pc, #136]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423e:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fe68 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	08008920 	.word	0x08008920
 8004290:	20000000 	.word	0x20000000
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b094      	sub	sp, #80	@ 0x50
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b79      	ldr	r3, [pc, #484]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80e1 	bhi.w	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e0db      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b73      	ldr	r3, [pc, #460]	@ (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 80042ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d0:	e0db      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b73      	ldr	r3, [pc, #460]	@ (80044a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d6:	e0d8      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	633b      	str	r3, [r7, #48]	@ 0x30
 8004302:	2300      	movs	r3, #0
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
 8004306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	0159      	lsls	r1, r3, #5
 8004318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431c:	0150      	lsls	r0, r2, #5
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4621      	mov	r1, r4
 8004324:	1a51      	subs	r1, r2, r1
 8004326:	6139      	str	r1, [r7, #16]
 8004328:	4629      	mov	r1, r5
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800433c:	4659      	mov	r1, fp
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004346:	4651      	mov	r1, sl
 8004348:	018a      	lsls	r2, r1, #6
 800434a:	4651      	mov	r1, sl
 800434c:	ebb2 0801 	subs.w	r8, r2, r1
 8004350:	4659      	mov	r1, fp
 8004352:	eb63 0901 	sbc.w	r9, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb18 0303 	adds.w	r3, r8, r3
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	462b      	mov	r3, r5
 8004378:	eb49 0303 	adc.w	r3, r9, r3
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800438a:	4629      	mov	r1, r5
 800438c:	024b      	lsls	r3, r1, #9
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004394:	4621      	mov	r1, r4
 8004396:	024a      	lsls	r2, r1, #9
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439e:	2200      	movs	r2, #0
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043a8:	f7fb ff20 	bl	80001ec <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b4:	e058      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b38      	ldr	r3, [pc, #224]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	2200      	movs	r2, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	4611      	mov	r1, r2
 80043c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80043cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	0159      	lsls	r1, r3, #5
 80043de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e2:	0150      	lsls	r0, r2, #5
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4641      	mov	r1, r8
 80043ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ee:	4649      	mov	r1, r9
 80043f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004408:	ebb2 040a 	subs.w	r4, r2, sl
 800440c:	eb63 050b 	sbc.w	r5, r3, fp
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	00eb      	lsls	r3, r5, #3
 800441a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441e:	00e2      	lsls	r2, r4, #3
 8004420:	4614      	mov	r4, r2
 8004422:	461d      	mov	r5, r3
 8004424:	4643      	mov	r3, r8
 8004426:	18e3      	adds	r3, r4, r3
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	464b      	mov	r3, r9
 800442c:	eb45 0303 	adc.w	r3, r5, r3
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443e:	4629      	mov	r1, r5
 8004440:	028b      	lsls	r3, r1, #10
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004448:	4621      	mov	r1, r4
 800444a:	028a      	lsls	r2, r1, #10
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fb fec6 	bl	80001ec <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004478:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800447a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004482:	e002      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800448c:	4618      	mov	r0, r3
 800448e:	3750      	adds	r7, #80	@ 0x50
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	@ (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000000 	.word	0x20000000

080044bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e041      	b.n	8004552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fc62 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 f95e 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d001      	beq.n	8004574 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e046      	b.n	8004602 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a23      	ldr	r2, [pc, #140]	@ (8004610 <HAL_TIM_Base_Start+0xb4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d022      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458e:	d01d      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1f      	ldr	r2, [pc, #124]	@ (8004614 <HAL_TIM_Base_Start+0xb8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d018      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <HAL_TIM_Base_Start+0xbc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <HAL_TIM_Base_Start+0xc0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <HAL_TIM_Base_Start+0xc4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a19      	ldr	r2, [pc, #100]	@ (8004624 <HAL_TIM_Base_Start+0xc8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_TIM_Base_Start+0xcc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d111      	bne.n	80045f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d010      	beq.n	8004600 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	e007      	b.n	8004600 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40010000 	.word	0x40010000
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40010400 	.word	0x40010400
 8004624:	40014000 	.word	0x40014000
 8004628:	40001800 	.word	0x40001800

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIM_ConfigClockSource+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e0b4      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x186>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004680:	d03e      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0xd4>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004686:	f200 8087 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	f000 8086 	beq.w	800479e <HAL_TIM_ConfigClockSource+0x172>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d87f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b70      	cmp	r3, #112	@ 0x70
 800469a:	d01a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xa6>
 800469c:	2b70      	cmp	r3, #112	@ 0x70
 800469e:	d87b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b60      	cmp	r3, #96	@ 0x60
 80046a2:	d050      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x11a>
 80046a4:	2b60      	cmp	r3, #96	@ 0x60
 80046a6:	d877      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b50      	cmp	r3, #80	@ 0x50
 80046aa:	d03c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xfa>
 80046ac:	2b50      	cmp	r3, #80	@ 0x50
 80046ae:	d873      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d058      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x13a>
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d86f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b30      	cmp	r3, #48	@ 0x30
 80046ba:	d064      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b30      	cmp	r3, #48	@ 0x30
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d867      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d05a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	e062      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	f000 f991 	bl	8004a08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04f      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	f000 f97a 	bl	8004a08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f8ee 	bl	8004914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	@ 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f947 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004744:	e02c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	461a      	mov	r2, r3
 8004754:	f000 f90d 	bl	8004972 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	@ 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f937 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004764:	e01c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f8ce 	bl	8004914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	@ 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f927 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 f91e 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a46      	ldr	r2, [pc, #280]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047da:	d00f      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a43      	ldr	r2, [pc, #268]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a42      	ldr	r2, [pc, #264]	@ (80048f0 <TIM_Base_SetConfig+0x134>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a41      	ldr	r2, [pc, #260]	@ (80048f4 <TIM_Base_SetConfig+0x138>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a40      	ldr	r2, [pc, #256]	@ (80048f8 <TIM_Base_SetConfig+0x13c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a35      	ldr	r2, [pc, #212]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d027      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a32      	ldr	r2, [pc, #200]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d023      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a31      	ldr	r2, [pc, #196]	@ (80048f0 <TIM_Base_SetConfig+0x134>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01f      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a30      	ldr	r2, [pc, #192]	@ (80048f4 <TIM_Base_SetConfig+0x138>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2f      	ldr	r2, [pc, #188]	@ (80048f8 <TIM_Base_SetConfig+0x13c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d017      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2e      	ldr	r2, [pc, #184]	@ (80048fc <TIM_Base_SetConfig+0x140>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2d      	ldr	r2, [pc, #180]	@ (8004900 <TIM_Base_SetConfig+0x144>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00f      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <TIM_Base_SetConfig+0x148>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <TIM_Base_SetConfig+0x14c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2a      	ldr	r2, [pc, #168]	@ (800490c <TIM_Base_SetConfig+0x150>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a29      	ldr	r2, [pc, #164]	@ (8004910 <TIM_Base_SetConfig+0x154>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a10      	ldr	r2, [pc, #64]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0xf8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a12      	ldr	r2, [pc, #72]	@ (80048f8 <TIM_Base_SetConfig+0x13c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
  }
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40014400 	.word	0x40014400
 8004904:	40014800 	.word	0x40014800
 8004908:	40001800 	.word	0x40001800
 800490c:	40001c00 	.word	0x40001c00
 8004910:	40002000 	.word	0x40002000

08004914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 030a 	bic.w	r3, r3, #10
 8004950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004972:	b480      	push	{r7}
 8004974:	b087      	sub	sp, #28
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0210 	bic.w	r2, r3, #16
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800499c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	031b      	lsls	r3, r3, #12
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f043 0307 	orr.w	r3, r3, #7
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	609a      	str	r2, [r3, #8]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	021a      	lsls	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e05a      	b.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a21      	ldr	r2, [pc, #132]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aac:	d01d      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10c      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40000c00 	.word	0x40000c00
 8004b34:	40010400 	.word	0x40010400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40001800 	.word	0x40001800

08004b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b40:	b084      	sub	sp, #16
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	f107 001c 	add.w	r0, r7, #28
 8004b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d123      	bne.n	8004ba2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f001 fae8 	bl	800616c <USB_CoreReset>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e01b      	b.n	8004bda <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 fadc 	bl	800616c <USB_CoreReset>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bcc:	e005      	b.n	8004bda <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bda:	7fbb      	ldrb	r3, [r7, #30]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10b      	bne.n	8004bf8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f043 0206 	orr.w	r2, r3, #6
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c04:	b004      	add	sp, #16
 8004c06:	4770      	bx	lr

08004c08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d165      	bne.n	8004ce8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a41      	ldr	r2, [pc, #260]	@ (8004d24 <USB_SetTurnaroundTime+0x11c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d906      	bls.n	8004c32 <USB_SetTurnaroundTime+0x2a>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a40      	ldr	r2, [pc, #256]	@ (8004d28 <USB_SetTurnaroundTime+0x120>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d202      	bcs.n	8004c32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c2c:	230f      	movs	r3, #15
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e062      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4a3c      	ldr	r2, [pc, #240]	@ (8004d28 <USB_SetTurnaroundTime+0x120>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d306      	bcc.n	8004c48 <USB_SetTurnaroundTime+0x40>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d2c <USB_SetTurnaroundTime+0x124>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d202      	bcs.n	8004c48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c42:	230e      	movs	r3, #14
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e057      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a38      	ldr	r2, [pc, #224]	@ (8004d2c <USB_SetTurnaroundTime+0x124>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d306      	bcc.n	8004c5e <USB_SetTurnaroundTime+0x56>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4a37      	ldr	r2, [pc, #220]	@ (8004d30 <USB_SetTurnaroundTime+0x128>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d202      	bcs.n	8004c5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c58:	230d      	movs	r3, #13
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e04c      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a33      	ldr	r2, [pc, #204]	@ (8004d30 <USB_SetTurnaroundTime+0x128>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d306      	bcc.n	8004c74 <USB_SetTurnaroundTime+0x6c>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4a32      	ldr	r2, [pc, #200]	@ (8004d34 <USB_SetTurnaroundTime+0x12c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d802      	bhi.n	8004c74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c6e:	230c      	movs	r3, #12
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e041      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	@ (8004d34 <USB_SetTurnaroundTime+0x12c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d906      	bls.n	8004c8a <USB_SetTurnaroundTime+0x82>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d38 <USB_SetTurnaroundTime+0x130>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d802      	bhi.n	8004c8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c84:	230b      	movs	r3, #11
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e036      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <USB_SetTurnaroundTime+0x130>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d906      	bls.n	8004ca0 <USB_SetTurnaroundTime+0x98>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4a29      	ldr	r2, [pc, #164]	@ (8004d3c <USB_SetTurnaroundTime+0x134>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d802      	bhi.n	8004ca0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e02b      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a26      	ldr	r2, [pc, #152]	@ (8004d3c <USB_SetTurnaroundTime+0x134>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d906      	bls.n	8004cb6 <USB_SetTurnaroundTime+0xae>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4a25      	ldr	r2, [pc, #148]	@ (8004d40 <USB_SetTurnaroundTime+0x138>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d202      	bcs.n	8004cb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cb0:	2309      	movs	r3, #9
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e020      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a21      	ldr	r2, [pc, #132]	@ (8004d40 <USB_SetTurnaroundTime+0x138>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d306      	bcc.n	8004ccc <USB_SetTurnaroundTime+0xc4>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4a20      	ldr	r2, [pc, #128]	@ (8004d44 <USB_SetTurnaroundTime+0x13c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d802      	bhi.n	8004ccc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e015      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <USB_SetTurnaroundTime+0x13c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d906      	bls.n	8004ce2 <USB_SetTurnaroundTime+0xda>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <USB_SetTurnaroundTime+0x140>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d202      	bcs.n	8004ce2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004cdc:	2307      	movs	r3, #7
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e00a      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ce2:	2306      	movs	r3, #6
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e007      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004cee:	2309      	movs	r3, #9
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	e001      	b.n	8004cf8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004cf4:	2309      	movs	r3, #9
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	029b      	lsls	r3, r3, #10
 8004d0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	00d8acbf 	.word	0x00d8acbf
 8004d28:	00e4e1c0 	.word	0x00e4e1c0
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	01067380 	.word	0x01067380
 8004d34:	011a499f 	.word	0x011a499f
 8004d38:	01312cff 	.word	0x01312cff
 8004d3c:	014ca43f 	.word	0x014ca43f
 8004d40:	016e3600 	.word	0x016e3600
 8004d44:	01a6ab1f 	.word	0x01a6ab1f
 8004d48:	01e84800 	.word	0x01e84800

08004d4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f043 0201 	orr.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0201 	bic.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d115      	bne.n	8004dde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dbe:	200a      	movs	r0, #10
 8004dc0:	f7fc f912 	bl	8000fe8 <HAL_Delay>
      ms += 10U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	330a      	adds	r3, #10
 8004dc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 f93f 	bl	800604e <USB_GetMode>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d01e      	beq.n	8004e14 <USB_SetCurrentMode+0x84>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dda:	d9f0      	bls.n	8004dbe <USB_SetCurrentMode+0x2e>
 8004ddc:	e01a      	b.n	8004e14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d115      	bne.n	8004e10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004df0:	200a      	movs	r0, #10
 8004df2:	f7fc f8f9 	bl	8000fe8 <HAL_Delay>
      ms += 10U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	330a      	adds	r3, #10
 8004dfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f926 	bl	800604e <USB_GetMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <USB_SetCurrentMode+0x84>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e0c:	d9f0      	bls.n	8004df0 <USB_SetCurrentMode+0x60>
 8004e0e:	e001      	b.n	8004e14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e005      	b.n	8004e20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e18:	d101      	bne.n	8004e1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e28:	b084      	sub	sp, #16
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	e009      	b.n	8004e5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3340      	adds	r3, #64	@ 0x40
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	2200      	movs	r2, #0
 8004e54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b0e      	cmp	r3, #14
 8004e60:	d9f2      	bls.n	8004e48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11c      	bne.n	8004ea4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ea2:	e00b      	b.n	8004ebc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ec8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10d      	bne.n	8004eec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ed8:	2100      	movs	r1, #0
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f968 	bl	80051b0 <USB_SetDevSpeed>
 8004ee0:	e008      	b.n	8004ef4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f963 	bl	80051b0 <USB_SetDevSpeed>
 8004eea:	e003      	b.n	8004ef4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004eec:	2103      	movs	r1, #3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f95e 	bl	80051b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8fa 	bl	80050f0 <USB_FlushTxFifo>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f924 	bl	8005154 <USB_FlushRxFifo>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f34:	461a      	mov	r2, r3
 8004f36:	2300      	movs	r3, #0
 8004f38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e043      	b.n	8004fc8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f56:	d118      	bne.n	8004f8a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e013      	b.n	8004f9c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f80:	461a      	mov	r2, r3
 8004f82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	e008      	b.n	8004f9c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f96:	461a      	mov	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2300      	movs	r3, #0
 8004fac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fcc:	461a      	mov	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d3b5      	bcc.n	8004f40 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	e043      	b.n	8005062 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ff0:	d118      	bne.n	8005024 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005004:	461a      	mov	r2, r3
 8005006:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e013      	b.n	8005036 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501a:	461a      	mov	r2, r3
 800501c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e008      	b.n	8005036 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005030:	461a      	mov	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005042:	461a      	mov	r2, r3
 8005044:	2300      	movs	r3, #0
 8005046:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005054:	461a      	mov	r2, r3
 8005056:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800505a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	3301      	adds	r3, #1
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005066:	461a      	mov	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4293      	cmp	r3, r2
 800506c:	d3b5      	bcc.n	8004fda <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800507c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005080:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800508e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005090:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f043 0210 	orr.w	r2, r3, #16
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	4b10      	ldr	r3, [pc, #64]	@ (80050ec <USB_DevInit+0x2c4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 0208 	orr.w	r2, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e8:	b004      	add	sp, #16
 80050ea:	4770      	bx	lr
 80050ec:	803c3800 	.word	0x803c3800

080050f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800510a:	d901      	bls.n	8005110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e01b      	b.n	8005148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	daf2      	bge.n	80050fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	019b      	lsls	r3, r3, #6
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005134:	d901      	bls.n	800513a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b20      	cmp	r3, #32
 8005144:	d0f0      	beq.n	8005128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800516c:	d901      	bls.n	8005172 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e018      	b.n	80051a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	daf2      	bge.n	8005160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2210      	movs	r2, #16
 8005182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005190:	d901      	bls.n	8005196 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e006      	b.n	80051a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d0f0      	beq.n	8005184 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0306 	and.w	r3, r3, #6
 80051fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]
 8005206:	e00a      	b.n	800521e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d002      	beq.n	8005214 <USB_GetDevSpeed+0x32>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b06      	cmp	r3, #6
 8005212:	d102      	bne.n	800521a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005214:	2302      	movs	r3, #2
 8005216:	75fb      	strb	r3, [r7, #23]
 8005218:	e001      	b.n	800521e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800521a:	230f      	movs	r3, #15
 800521c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005220:	4618      	mov	r0, r3
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d13a      	bne.n	80052be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	b29b      	uxth	r3, r3
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005266:	4313      	orrs	r3, r2
 8005268:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d155      	bne.n	800532c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	791b      	ldrb	r3, [r3, #4]
 800529a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800529c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	059b      	lsls	r3, r3, #22
 80052a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052a4:	4313      	orrs	r3, r2
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e036      	b.n	800532c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	2101      	movs	r1, #1
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052dc:	4313      	orrs	r3, r2
 80052de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11a      	bne.n	800532c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	791b      	ldrb	r3, [r3, #4]
 8005310:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005312:	430b      	orrs	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d161      	bne.n	800541c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800536a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800536e:	d11f      	bne.n	80053b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800538a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800538e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	43db      	mvns	r3, r3
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d0:	4013      	ands	r3, r2
 80053d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f4:	4013      	ands	r3, r2
 80053f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	0159      	lsls	r1, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	440b      	add	r3, r1
 800540e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005412:	4619      	mov	r1, r3
 8005414:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <USB_DeactivateEndpoint+0x1b0>)
 8005416:	4013      	ands	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
 800541a:	e060      	b.n	80054de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800542e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005432:	d11f      	bne.n	8005474 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800544e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005452:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800546e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	43db      	mvns	r3, r3
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005494:	4013      	ands	r3, r2
 8005496:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	2101      	movs	r1, #1
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	43db      	mvns	r3, r3
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054b8:	4013      	ands	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0159      	lsls	r1, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	440b      	add	r3, r1
 80054d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d6:	4619      	mov	r1, r3
 80054d8:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <USB_DeactivateEndpoint+0x1b4>)
 80054da:	4013      	ands	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	ec337800 	.word	0xec337800
 80054f0:	eff37800 	.word	0xeff37800

080054f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	@ 0x28
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	f040 817f 	bne.w	8005814 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d132      	bne.n	8005584 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005538:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800553c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800555c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800557c:	0cdb      	lsrs	r3, r3, #19
 800557e:	04db      	lsls	r3, r3, #19
 8005580:	6113      	str	r3, [r2, #16]
 8005582:	e097      	b.n	80056b4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559e:	0cdb      	lsrs	r3, r3, #19
 80055a0:	04db      	lsls	r3, r3, #19
 80055a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80055c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80055c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d11a      	bne.n	8005604 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005600:	6113      	str	r3, [r2, #16]
 8005602:	e044      	b.n	800568e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4413      	add	r3, r2
 800560e:	1e5a      	subs	r2, r3, #1
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	8afb      	ldrh	r3, [r7, #22]
 800562a:	04d9      	lsls	r1, r3, #19
 800562c:	4ba4      	ldr	r3, [pc, #656]	@ (80058c0 <USB_EPStartXfer+0x3cc>)
 800562e:	400b      	ands	r3, r1
 8005630:	69b9      	ldr	r1, [r7, #24]
 8005632:	0148      	lsls	r0, r1, #5
 8005634:	69f9      	ldr	r1, [r7, #28]
 8005636:	4401      	add	r1, r0
 8005638:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800563c:	4313      	orrs	r3, r2
 800563e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	791b      	ldrb	r3, [r3, #4]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d122      	bne.n	800568e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005662:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005666:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	8afb      	ldrh	r3, [r7, #22]
 8005678:	075b      	lsls	r3, r3, #29
 800567a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800567e:	69b9      	ldr	r1, [r7, #24]
 8005680:	0148      	lsls	r0, r1, #5
 8005682:	69f9      	ldr	r1, [r7, #28]
 8005684:	4401      	add	r1, r0
 8005686:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800568a:	4313      	orrs	r3, r2
 800568c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	0148      	lsls	r0, r1, #5
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	4401      	add	r1, r0
 80056ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80056b0:	4313      	orrs	r3, r2
 80056b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d14b      	bne.n	8005752 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ce:	461a      	mov	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	791b      	ldrb	r3, [r3, #4]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d128      	bne.n	8005730 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d110      	bne.n	8005710 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005708:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e00f      	b.n	8005730 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800572e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800574a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e166      	b.n	8005a20 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800576c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005770:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	791b      	ldrb	r3, [r3, #4]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d015      	beq.n	80057a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 814e 	beq.w	8005a20 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057a0:	4313      	orrs	r3, r2
 80057a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80057a4:	e13c      	b.n	8005a20 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d110      	bne.n	80057d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e00f      	b.n	80057f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	68d9      	ldr	r1, [r3, #12]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	b298      	uxth	r0, r3
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	4603      	mov	r3, r0
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f9b9 	bl	8005b84 <USB_WritePacket>
 8005812:	e105      	b.n	8005a20 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800582e:	0cdb      	lsrs	r3, r3, #19
 8005830:	04db      	lsls	r3, r3, #19
 8005832:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800584e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005852:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005856:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d132      	bne.n	80058c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	0148      	lsls	r0, r1, #5
 8005890:	69f9      	ldr	r1, [r7, #28]
 8005892:	4401      	add	r1, r0
 8005894:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005898:	4313      	orrs	r3, r2
 800589a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058ba:	6113      	str	r3, [r2, #16]
 80058bc:	e062      	b.n	8005984 <USB_EPStartXfer+0x490>
 80058be:	bf00      	nop
 80058c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d123      	bne.n	8005914 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	0148      	lsls	r0, r1, #5
 80058e6:	69f9      	ldr	r1, [r7, #28]
 80058e8:	4401      	add	r1, r0
 80058ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058ee:	4313      	orrs	r3, r2
 80058f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800590c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005910:	6113      	str	r3, [r2, #16]
 8005912:	e037      	b.n	8005984 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4413      	add	r3, r2
 800591e:	1e5a      	subs	r2, r3, #1
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	8afa      	ldrh	r2, [r7, #22]
 8005930:	fb03 f202 	mul.w	r2, r3, r2
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	8afb      	ldrh	r3, [r7, #22]
 8005948:	04d9      	lsls	r1, r3, #19
 800594a:	4b38      	ldr	r3, [pc, #224]	@ (8005a2c <USB_EPStartXfer+0x538>)
 800594c:	400b      	ands	r3, r1
 800594e:	69b9      	ldr	r1, [r7, #24]
 8005950:	0148      	lsls	r0, r1, #5
 8005952:	69f9      	ldr	r1, [r7, #28]
 8005954:	4401      	add	r1, r0
 8005956:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800595a:	4313      	orrs	r3, r2
 800595c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	0148      	lsls	r0, r1, #5
 8005978:	69f9      	ldr	r1, [r7, #28]
 800597a:	4401      	add	r1, r0
 800597c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005980:	4313      	orrs	r3, r2
 8005982:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d10d      	bne.n	80059a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	68d9      	ldr	r1, [r3, #12]
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	460a      	mov	r2, r1
 80059a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	791b      	ldrb	r3, [r3, #4]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d128      	bne.n	8005a00 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d110      	bne.n	80059e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e00f      	b.n	8005a00 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	1ff80000 	.word	0x1ff80000

08005a30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d14a      	bne.n	8005ae4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a66:	f040 8086 	bne.w	8005b76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	7812      	ldrb	r2, [r2, #0]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	7812      	ldrb	r2, [r2, #0]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ab0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d902      	bls.n	8005ac8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ac6:	e056      	b.n	8005b76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae0:	d0e7      	beq.n	8005ab2 <USB_EPStopXfer+0x82>
 8005ae2:	e048      	b.n	8005b76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005afc:	d13b      	bne.n	8005b76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d902      	bls.n	8005b5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75fb      	strb	r3, [r7, #23]
          break;
 8005b5a:	e00c      	b.n	8005b76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b74:	d0e7      	beq.n	8005b46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	@ 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	460b      	mov	r3, r1
 8005b94:	71fb      	strb	r3, [r7, #7]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d123      	bne.n	8005bf2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005baa:	88bb      	ldrh	r3, [r7, #4]
 8005bac:	3303      	adds	r3, #3
 8005bae:	089b      	lsrs	r3, r3, #2
 8005bb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	e018      	b.n	8005bea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	031a      	lsls	r2, r3, #12
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	3301      	adds	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	3301      	adds	r3, #1
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d3e2      	bcc.n	8005bb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3724      	adds	r7, #36	@ 0x24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b08b      	sub	sp, #44	@ 0x2c
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	623b      	str	r3, [r7, #32]
 8005c2a:	e014      	b.n	8005c56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	3301      	adds	r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	3301      	adds	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	3301      	adds	r3, #1
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d3e6      	bcc.n	8005c2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c5e:	8bfb      	ldrh	r3, [r7, #30]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01e      	beq.n	8005ca2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	701a      	strb	r2, [r3, #0]
      i++;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	3301      	adds	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c96:	8bfb      	ldrh	r3, [r7, #30]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c9c:	8bfb      	ldrh	r3, [r7, #30]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ea      	bne.n	8005c78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	372c      	adds	r7, #44	@ 0x2c
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d12c      	bne.n	8005d26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	db12      	blt.n	8005d04 <USB_EPSetStall+0x54>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00f      	beq.n	8005d04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e02b      	b.n	8005d7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db12      	blt.n	8005d5e <USB_EPSetStall+0xae>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d128      	bne.n	8005dfa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	791b      	ldrb	r3, [r3, #4]
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d003      	beq.n	8005dd8 <USB_EPClearStall+0x4c>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	791b      	ldrb	r3, [r3, #4]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d138      	bne.n	8005e4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e027      	b.n	8005e4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d003      	beq.n	8005e2a <USB_EPClearStall+0x9e>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	791b      	ldrb	r3, [r3, #4]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d10f      	bne.n	8005e4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e76:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e92:	4313      	orrs	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed2:	f023 0302 	bic.w	r3, r3, #2
 8005ed6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	0c1b      	lsrs	r3, r3, #16
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	b29b      	uxth	r3, r3
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b087      	sub	sp, #28
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006014:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	b2db      	uxtb	r3, r3
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4013      	ands	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006040:	68bb      	ldr	r3, [r7, #8]
}
 8006042:	4618      	mov	r0, r3
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0301 	and.w	r3, r3, #1
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006084:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006088:	f023 0307 	bic.w	r3, r3, #7
 800608c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800609c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	460b      	mov	r3, r1
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	333c      	adds	r3, #60	@ 0x3c
 80060c6:	3304      	adds	r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4a26      	ldr	r2, [pc, #152]	@ (8006168 <USB_EP0_OutStart+0xb8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d90a      	bls.n	80060ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060e4:	d101      	bne.n	80060ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e037      	b.n	800615a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006104:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006118:	f043 0318 	orr.w	r3, r3, #24
 800611c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800612c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006130:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006132:	7afb      	ldrb	r3, [r7, #11]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10f      	bne.n	8006158 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006152:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	4f54300a 	.word	0x4f54300a

0800616c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006184:	d901      	bls.n	800618a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e01b      	b.n	80061c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	daf2      	bge.n	8006178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ae:	d901      	bls.n	80061b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e006      	b.n	80061c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d0f0      	beq.n	80061a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80061dc:	2034      	movs	r0, #52	@ 0x34
 80061de:	f002 faf3 	bl	80087c8 <USBD_static_malloc>
 80061e2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	32b0      	adds	r2, #176	@ 0xb0
 80061f4:	2100      	movs	r1, #0
 80061f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061fa:	2302      	movs	r3, #2
 80061fc:	e08b      	b.n	8006316 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	32b0      	adds	r2, #176	@ 0xb0
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	32b0      	adds	r2, #176	@ 0xb0
 8006218:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7c1b      	ldrb	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d11b      	bne.n	8006262 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800622a:	4b3d      	ldr	r3, [pc, #244]	@ (8006320 <USBD_CUSTOM_HID_Init+0x150>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	3326      	adds	r3, #38	@ 0x26
 8006240:	2205      	movs	r2, #5
 8006242:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006244:	4b37      	ldr	r3, [pc, #220]	@ (8006324 <USBD_CUSTOM_HID_Init+0x154>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800625c:	2205      	movs	r2, #5
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e01a      	b.n	8006298 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006262:	4b2f      	ldr	r3, [pc, #188]	@ (8006320 <USBD_CUSTOM_HID_Init+0x150>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3326      	adds	r3, #38	@ 0x26
 8006278:	220a      	movs	r2, #10
 800627a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800627c:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <USBD_CUSTOM_HID_Init+0x154>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006294:	220a      	movs	r2, #10
 8006296:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006298:	4b21      	ldr	r3, [pc, #132]	@ (8006320 <USBD_CUSTOM_HID_Init+0x150>)
 800629a:	7819      	ldrb	r1, [r3, #0]
 800629c:	2302      	movs	r3, #2
 800629e:	2203      	movs	r2, #3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f002 f980 	bl	80085a6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80062a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006320 <USBD_CUSTOM_HID_Init+0x150>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	3324      	adds	r3, #36	@ 0x24
 80062bc:	2201      	movs	r2, #1
 80062be:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80062c0:	4b18      	ldr	r3, [pc, #96]	@ (8006324 <USBD_CUSTOM_HID_Init+0x154>)
 80062c2:	7819      	ldrb	r1, [r3, #0]
 80062c4:	2332      	movs	r3, #50	@ 0x32
 80062c6:	2203      	movs	r2, #3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f002 f96c 	bl	80085a6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80062ce:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <USBD_CUSTOM_HID_Init+0x154>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 020f 	and.w	r2, r3, #15
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062e6:	2201      	movs	r2, #1
 80062e8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	33b0      	adds	r3, #176	@ 0xb0
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006306:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <USBD_CUSTOM_HID_Init+0x154>)
 8006308:	7819      	ldrb	r1, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	2320      	movs	r3, #32
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f002 fa38 	bl	8008784 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000086 	.word	0x20000086
 8006324:	20000087 	.word	0x20000087

08006328 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006334:	4b37      	ldr	r3, [pc, #220]	@ (8006414 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 f959 	bl	80085f2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006340:	4b34      	ldr	r3, [pc, #208]	@ (8006414 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	3324      	adds	r3, #36	@ 0x24
 8006356:	2200      	movs	r2, #0
 8006358:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800635a:	4b2e      	ldr	r3, [pc, #184]	@ (8006414 <USBD_CUSTOM_HID_DeInit+0xec>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f003 020f 	and.w	r2, r3, #15
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	3326      	adds	r3, #38	@ 0x26
 8006370:	2200      	movs	r2, #0
 8006372:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006374:	4b28      	ldr	r3, [pc, #160]	@ (8006418 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 f939 	bl	80085f2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006380:	4b25      	ldr	r3, [pc, #148]	@ (8006418 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006398:	2200      	movs	r2, #0
 800639a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800639c:	4b1e      	ldr	r3, [pc, #120]	@ (8006418 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80063b4:	2200      	movs	r2, #0
 80063b6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32b0      	adds	r2, #176	@ 0xb0
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01f      	beq.n	800640a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	33b0      	adds	r3, #176	@ 0xb0
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	32b0      	adds	r2, #176	@ 0xb0
 80063e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f002 f9f9 	bl	80087e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	32b0      	adds	r2, #176	@ 0xb0
 80063fc:	2100      	movs	r1, #0
 80063fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000086 	.word	0x20000086
 8006418:	20000087 	.word	0x20000087

0800641c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	32b0      	adds	r2, #176	@ 0xb0
 8006430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006434:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	e102      	b.n	8006656 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006458:	2b00      	cmp	r3, #0
 800645a:	d056      	beq.n	800650a <USBD_CUSTOM_HID_Setup+0xee>
 800645c:	2b20      	cmp	r3, #32
 800645e:	f040 80f2 	bne.w	8006646 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	3b02      	subs	r3, #2
 8006468:	2b09      	cmp	r3, #9
 800646a:	d846      	bhi.n	80064fa <USBD_CUSTOM_HID_Setup+0xde>
 800646c:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <USBD_CUSTOM_HID_Setup+0x58>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064fb 	.word	0x080064fb
 8006480:	080064fb 	.word	0x080064fb
 8006484:	080064fb 	.word	0x080064fb
 8006488:	080064fb 	.word	0x080064fb
 800648c:	080064fb 	.word	0x080064fb
 8006490:	080064dd 	.word	0x080064dd
 8006494:	080064bb 	.word	0x080064bb
 8006498:	0800649d 	.word	0x0800649d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	885b      	ldrh	r3, [r3, #2]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	621a      	str	r2, [r3, #32]
          break;
 80064a8:	e02e      	b.n	8006508 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3320      	adds	r3, #32
 80064ae:	2201      	movs	r2, #1
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fce2 	bl	8007e7c <USBD_CtlSendData>
          break;
 80064b8:	e026      	b.n	8006508 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	625a      	str	r2, [r3, #36]	@ 0x24
          break;
 80064ca:	e01d      	b.n	8006508 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3324      	adds	r3, #36	@ 0x24
 80064d0:	2201      	movs	r2, #1
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fcd1 	bl	8007e7c <USBD_CtlSendData>
          break;
 80064da:	e015      	b.n	8006508 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2201      	movs	r2, #1
 80064e0:	62da      	str	r2, [r3, #44]	@ 0x2c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80064e2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	88db      	ldrh	r3, [r3, #6]
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	bf28      	it	cs
 80064ec:	2320      	movcs	r3, #32
 80064ee:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80064f0:	461a      	mov	r2, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 fcee 	bl	8007ed4 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80064f8:	e006      	b.n	8006508 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fc40 	bl	8007d82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006502:	2303      	movs	r3, #3
 8006504:	75fb      	strb	r3, [r7, #23]
          break;
 8006506:	bf00      	nop
      }
      break;
 8006508:	e0a4      	b.n	8006654 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b0b      	cmp	r3, #11
 8006510:	f200 8090 	bhi.w	8006634 <USBD_CUSTOM_HID_Setup+0x218>
 8006514:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <USBD_CUSTOM_HID_Setup+0x100>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	0800654d 	.word	0x0800654d
 8006520:	08006643 	.word	0x08006643
 8006524:	08006635 	.word	0x08006635
 8006528:	08006635 	.word	0x08006635
 800652c:	08006635 	.word	0x08006635
 8006530:	08006635 	.word	0x08006635
 8006534:	08006577 	.word	0x08006577
 8006538:	08006635 	.word	0x08006635
 800653c:	08006635 	.word	0x08006635
 8006540:	08006635 	.word	0x08006635
 8006544:	080065e3 	.word	0x080065e3
 8006548:	0800660d 	.word	0x0800660d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b03      	cmp	r3, #3
 8006556:	d107      	bne.n	8006568 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006558:	f107 030e 	add.w	r3, r7, #14
 800655c:	2202      	movs	r2, #2
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 fc8b 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006566:	e06d      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fc09 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	75fb      	strb	r3, [r7, #23]
          break;
 8006574:	e066      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b22      	cmp	r3, #34	@ 0x22
 8006580:	d110      	bne.n	80065a4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	2b37      	cmp	r3, #55	@ 0x37
 8006588:	bf28      	it	cs
 800658a:	2337      	movcs	r3, #55	@ 0x37
 800658c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	33b0      	adds	r3, #176	@ 0xb0
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e00d      	b.n	80065c0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	885b      	ldrh	r3, [r3, #2]
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b21      	cmp	r3, #33	@ 0x21
 80065ae:	d107      	bne.n	80065c0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80065b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006660 <USBD_CUSTOM_HID_Setup+0x244>)
 80065b2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	bf28      	it	cs
 80065bc:	2309      	movcs	r3, #9
 80065be:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80065c6:	8bfb      	ldrh	r3, [r7, #30]
 80065c8:	461a      	mov	r2, r3
 80065ca:	69b9      	ldr	r1, [r7, #24]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 fc55 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065d2:	e037      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fbd3 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	75fb      	strb	r3, [r7, #23]
          break;
 80065e0:	e030      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d107      	bne.n	80065fe <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3328      	adds	r3, #40	@ 0x28
 80065f2:	2201      	movs	r2, #1
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fc40 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065fc:	e022      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fbbe 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	75fb      	strb	r3, [r7, #23]
          break;
 800660a:	e01b      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b03      	cmp	r3, #3
 8006616:	d106      	bne.n	8006626 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006624:	e00e      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fbaa 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 800662e:	2303      	movs	r3, #3
 8006630:	75fb      	strb	r3, [r7, #23]
          break;
 8006632:	e007      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fba3 	bl	8007d82 <USBD_CtlError>
          ret = USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	75fb      	strb	r3, [r7, #23]
          break;
 8006640:	e000      	b.n	8006644 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 8006642:	bf00      	nop
      }
      break;
 8006644:	e006      	b.n	8006654 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fb9a 	bl	8007d82 <USBD_CtlError>
      ret = USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	75fb      	strb	r3, [r7, #23]
      break;
 8006652:	bf00      	nop
  }
  return (uint8_t)ret;
 8006654:	7dfb      	ldrb	r3, [r7, #23]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000070 	.word	0x20000070

08006664 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	32b0      	adds	r2, #176	@ 0xb0
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	e019      	b.n	80066c0 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b03      	cmp	r3, #3
 8006696:	d112      	bne.n	80066be <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80066aa:	4b07      	ldr	r3, [pc, #28]	@ (80066c8 <USBD_CUSTOM_HID_SendReport+0x64>)
 80066ac:	7819      	ldrb	r1, [r3, #0]
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f002 f845 	bl	8008742 <USBD_LL_Transmit>
 80066b8:	e001      	b.n	80066be <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000086 	.word	0x20000086

080066cc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80066d4:	2181      	movs	r1, #129	@ 0x81
 80066d6:	4815      	ldr	r0, [pc, #84]	@ (800672c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80066d8:	f000 fd1d 	bl	8007116 <USBD_GetEpDesc>
 80066dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80066de:	2101      	movs	r1, #1
 80066e0:	4812      	ldr	r0, [pc, #72]	@ (800672c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80066e2:	f000 fd18 	bl	8007116 <USBD_GetEpDesc>
 80066e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f042 0202 	orr.w	r2, r2, #2
 80066f6:	711a      	strb	r2, [r3, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	220a      	movs	r2, #10
 8006700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8006710:	711a      	strb	r2, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	220a      	movs	r2, #10
 800671a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2229      	movs	r2, #41	@ 0x29
 8006720:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006722:	4b02      	ldr	r3, [pc, #8]	@ (800672c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000044 	.word	0x20000044

08006730 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006738:	2181      	movs	r1, #129	@ 0x81
 800673a:	4815      	ldr	r0, [pc, #84]	@ (8006790 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800673c:	f000 fceb 	bl	8007116 <USBD_GetEpDesc>
 8006740:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006742:	2101      	movs	r1, #1
 8006744:	4812      	ldr	r0, [pc, #72]	@ (8006790 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006746:	f000 fce6 	bl	8007116 <USBD_GetEpDesc>
 800674a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f042 0202 	orr.w	r2, r2, #2
 800675a:	711a      	strb	r2, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2205      	movs	r2, #5
 8006764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8006774:	711a      	strb	r2, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2205      	movs	r2, #5
 800677e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2229      	movs	r2, #41	@ 0x29
 8006784:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006786:	4b02      	ldr	r3, [pc, #8]	@ (8006790 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20000044 	.word	0x20000044

08006794 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800679c:	2181      	movs	r1, #129	@ 0x81
 800679e:	4815      	ldr	r0, [pc, #84]	@ (80067f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80067a0:	f000 fcb9 	bl	8007116 <USBD_GetEpDesc>
 80067a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80067a6:	2101      	movs	r1, #1
 80067a8:	4812      	ldr	r0, [pc, #72]	@ (80067f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80067aa:	f000 fcb4 	bl	8007116 <USBD_GetEpDesc>
 80067ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f042 0202 	orr.w	r2, r2, #2
 80067be:	711a      	strb	r2, [r3, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	220a      	movs	r2, #10
 80067c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 80067d8:	711a      	strb	r2, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	220a      	movs	r2, #10
 80067e2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2229      	movs	r2, #41	@ 0x29
 80067e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80067ea:	4b02      	ldr	r3, [pc, #8]	@ (80067f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000044 	.word	0x20000044

080067f8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32b0      	adds	r2, #176	@ 0xb0
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return (uint8_t)USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	32b0      	adds	r2, #176	@ 0xb0
 800683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	e017      	b.n	8006878 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32b0      	adds	r2, #176	@ 0xb0
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	33b0      	adds	r3, #176	@ 0xb0
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	7810      	ldrb	r0, [r2, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	7852      	ldrb	r2, [r2, #1]
 8006872:	4611      	mov	r1, r2
 8006874:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32b0      	adds	r2, #176	@ 0xb0
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	e00f      	b.n	80068be <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	32b0      	adds	r2, #176	@ 0xb0
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80068ae:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80068b0:	7819      	ldrb	r1, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	2320      	movs	r3, #32
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 ff64 	bl	8008784 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000087 	.word	0x20000087

080068cc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32b0      	adds	r2, #176	@ 0xb0
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e016      	b.n	800691c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d111      	bne.n	800691a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	33b0      	adds	r3, #176	@ 0xb0
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	7810      	ldrb	r0, [r2, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	7852      	ldrb	r2, [r2, #1]
 8006910:	4611      	mov	r1, r2
 8006912:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return (uint8_t)USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	220a      	movs	r2, #10
 8006930:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006932:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	2000007c 	.word	0x2000007c

08006944 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006954:	2303      	movs	r3, #3
 8006956:	e009      	b.n	800696c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	33b0      	adds	r3, #176	@ 0xb0
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800698c:	2303      	movs	r3, #3
 800698e:	e01f      	b.n	80069d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	79fa      	ldrb	r2, [r7, #7]
 80069c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fd87 	bl	80084d8 <USBD_LL_Init>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e025      	b.n	8006a3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	32ae      	adds	r2, #174	@ 0xae
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00f      	beq.n	8006a2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	32ae      	adds	r2, #174	@ 0xae
 8006a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	f107 020e 	add.w	r2, r7, #14
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	4602      	mov	r2, r0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fd8f 	bl	8008570 <USBD_LL_Start>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	4611      	mov	r1, r2
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 f90c 	bl	8007d0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006b04:	461a      	mov	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d01a      	beq.n	8006b50 <USBD_LL_SetupStage+0x72>
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d822      	bhi.n	8006b64 <USBD_LL_SetupStage+0x86>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <USBD_LL_SetupStage+0x4a>
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d00a      	beq.n	8006b3c <USBD_LL_SetupStage+0x5e>
 8006b26:	e01d      	b.n	8006b64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fb63 	bl	80071fc <USBD_StdDevReq>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3a:	e020      	b.n	8006b7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fbcb 	bl	80072e0 <USBD_StdItfReq>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4e:	e016      	b.n	8006b7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fc2d 	bl	80073b8 <USBD_StdEPReq>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
      break;
 8006b62:	e00c      	b.n	8006b7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fd5c 	bl	8008630 <USBD_LL_StallEP>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7c:	bf00      	nop
  }

  return ret;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	460b      	mov	r3, r1
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d16e      	bne.n	8006c7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006ba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	f040 8098 	bne.w	8006ce4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d913      	bls.n	8006be8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	1ad2      	subs	r2, r2, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	bf28      	it	cs
 8006bda:	4613      	movcs	r3, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 f994 	bl	8007f0e <USBD_CtlContinueRx>
 8006be6:	e07d      	b.n	8006ce4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d014      	beq.n	8006c20 <USBD_LL_DataOutStage+0x98>
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d81d      	bhi.n	8006c36 <USBD_LL_DataOutStage+0xae>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <USBD_LL_DataOutStage+0x7c>
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d003      	beq.n	8006c0a <USBD_LL_DataOutStage+0x82>
 8006c02:	e018      	b.n	8006c36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75bb      	strb	r3, [r7, #22]
            break;
 8006c08:	e018      	b.n	8006c3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	4619      	mov	r1, r3
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fa64 	bl	80070e2 <USBD_CoreFindIF>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006c1e:	e00d      	b.n	8006c3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa66 	bl	80070fc <USBD_CoreFindEP>
 8006c30:	4603      	mov	r3, r0
 8006c32:	75bb      	strb	r3, [r7, #22]
            break;
 8006c34:	e002      	b.n	8006c3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75bb      	strb	r3, [r7, #22]
            break;
 8006c3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c3c:	7dbb      	ldrb	r3, [r7, #22]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d119      	bne.n	8006c76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d113      	bne.n	8006c76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c4e:	7dba      	ldrb	r2, [r7, #22]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	32ae      	adds	r2, #174	@ 0xae
 8006c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c5e:	7dba      	ldrb	r2, [r7, #22]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c66:	7dba      	ldrb	r2, [r7, #22]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	32ae      	adds	r2, #174	@ 0xae
 8006c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f001 f95a 	bl	8007f30 <USBD_CtlSendStatus>
 8006c7c:	e032      	b.n	8006ce4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fa37 	bl	80070fc <USBD_CoreFindEP>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c92:	7dbb      	ldrb	r3, [r7, #22]
 8006c94:	2bff      	cmp	r3, #255	@ 0xff
 8006c96:	d025      	beq.n	8006ce4 <USBD_LL_DataOutStage+0x15c>
 8006c98:	7dbb      	ldrb	r3, [r7, #22]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d122      	bne.n	8006ce4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d117      	bne.n	8006cda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006caa:	7dba      	ldrb	r2, [r7, #22]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	32ae      	adds	r2, #174	@ 0xae
 8006cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006cba:	7dba      	ldrb	r2, [r7, #22]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cc2:	7dba      	ldrb	r2, [r7, #22]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	32ae      	adds	r2, #174	@ 0xae
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	7afa      	ldrb	r2, [r7, #11]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	4798      	blx	r3
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	e000      	b.n	8006ce6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b086      	sub	sp, #24
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d16f      	bne.n	8006de2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3314      	adds	r3, #20
 8006d06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d15a      	bne.n	8006dc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d914      	bls.n	8006d48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f001 f8bc 	bl	8007eb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f001 fd1f 	bl	8008784 <USBD_LL_PrepareReceive>
 8006d46:	e03f      	b.n	8006dc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d11c      	bne.n	8006d8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d316      	bcc.n	8006d8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d20f      	bcs.n	8006d8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2100      	movs	r1, #0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f001 f89d 	bl	8007eb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d80:	2300      	movs	r3, #0
 8006d82:	2200      	movs	r2, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f001 fcfc 	bl	8008784 <USBD_LL_PrepareReceive>
 8006d8c:	e01c      	b.n	8006dc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d10f      	bne.n	8006dba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dba:	2180      	movs	r1, #128	@ 0x80
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 fc37 	bl	8008630 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f001 f8c7 	bl	8007f56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d03a      	beq.n	8006e48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fe42 	bl	8006a5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006de0:	e032      	b.n	8006e48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	4619      	mov	r1, r3
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f985 	bl	80070fc <USBD_CoreFindEP>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2bff      	cmp	r3, #255	@ 0xff
 8006dfa:	d025      	beq.n	8006e48 <USBD_LL_DataInStage+0x15a>
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d122      	bne.n	8006e48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d11c      	bne.n	8006e48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e0e:	7dfa      	ldrb	r2, [r7, #23]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	32ae      	adds	r2, #174	@ 0xae
 8006e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d014      	beq.n	8006e48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e1e:	7dfa      	ldrb	r2, [r7, #23]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e26:	7dfa      	ldrb	r2, [r7, #23]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	32ae      	adds	r2, #174	@ 0xae
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	7afa      	ldrb	r2, [r7, #11]
 8006e34:	4611      	mov	r1, r2
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	4798      	blx	r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e3e:	7dbb      	ldrb	r3, [r7, #22]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e44:	7dbb      	ldrb	r3, [r7, #22]
 8006e46:	e000      	b.n	8006e4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d014      	beq.n	8006eb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6852      	ldr	r2, [r2, #4]
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eb8:	2340      	movs	r3, #64	@ 0x40
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fb71 	bl	80085a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2240      	movs	r2, #64	@ 0x40
 8006ed0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ed4:	2340      	movs	r3, #64	@ 0x40
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2180      	movs	r1, #128	@ 0x80
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fb63 	bl	80085a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2240      	movs	r2, #64	@ 0x40
 8006eea:	621a      	str	r2, [r3, #32]

  return ret;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d006      	beq.n	8006f38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d106      	bne.n	8006f70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d110      	bne.n	8006fb4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	32ae      	adds	r2, #174	@ 0xae
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e01c      	b.n	800701a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d115      	bne.n	8007018 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	@ 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32ae      	adds	r2, #174	@ 0xae
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	4611      	mov	r1, r2
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	32ae      	adds	r2, #174	@ 0xae
 8007038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007040:	2303      	movs	r3, #3
 8007042:	e01c      	b.n	800707e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b03      	cmp	r3, #3
 800704e:	d115      	bne.n	800707c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32ae      	adds	r2, #174	@ 0xae
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32ae      	adds	r2, #174	@ 0xae
 800706e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	4611      	mov	r1, r2
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00e      	beq.n	80070d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6852      	ldr	r2, [r2, #4]
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	4611      	mov	r1, r2
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	460b      	mov	r3, r1
 80070ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007108:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	b29b      	uxth	r3, r3
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	7812      	ldrb	r2, [r2, #0]
 8007138:	4293      	cmp	r3, r2
 800713a:	d91f      	bls.n	800717c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007142:	e013      	b.n	800716c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007144:	f107 030a 	add.w	r3, r7, #10
 8007148:	4619      	mov	r1, r3
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f000 f81b 	bl	8007186 <USBD_GetNextDesc>
 8007150:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	785b      	ldrb	r3, [r3, #1]
 8007156:	2b05      	cmp	r3, #5
 8007158:	d108      	bne.n	800716c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	789b      	ldrb	r3, [r3, #2]
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	429a      	cmp	r2, r3
 8007166:	d008      	beq.n	800717a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007168:	2300      	movs	r3, #0
 800716a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	885b      	ldrh	r3, [r3, #2]
 8007170:	b29a      	uxth	r2, r3
 8007172:	897b      	ldrh	r3, [r7, #10]
 8007174:	429a      	cmp	r2, r3
 8007176:	d8e5      	bhi.n	8007144 <USBD_GetEpDesc+0x2e>
 8007178:	e000      	b.n	800717c <USBD_GetEpDesc+0x66>
          break;
 800717a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800717c:	693b      	ldr	r3, [r7, #16]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	4413      	add	r3, r2
 800719e:	b29a      	uxth	r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071be:	b480      	push	{r7}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	3301      	adds	r3, #1
 80071d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	b21a      	sxth	r2, r3
 80071e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	b21b      	sxth	r3, r3
 80071ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071ee:	89fb      	ldrh	r3, [r7, #14]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007212:	2b40      	cmp	r3, #64	@ 0x40
 8007214:	d005      	beq.n	8007222 <USBD_StdDevReq+0x26>
 8007216:	2b40      	cmp	r3, #64	@ 0x40
 8007218:	d857      	bhi.n	80072ca <USBD_StdDevReq+0xce>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <USBD_StdDevReq+0x42>
 800721e:	2b20      	cmp	r3, #32
 8007220:	d153      	bne.n	80072ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	32ae      	adds	r2, #174	@ 0xae
 800722c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
      break;
 800723c:	e04a      	b.n	80072d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	2b09      	cmp	r3, #9
 8007244:	d83b      	bhi.n	80072be <USBD_StdDevReq+0xc2>
 8007246:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <USBD_StdDevReq+0x50>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	080072a1 	.word	0x080072a1
 8007250:	080072b5 	.word	0x080072b5
 8007254:	080072bf 	.word	0x080072bf
 8007258:	080072ab 	.word	0x080072ab
 800725c:	080072bf 	.word	0x080072bf
 8007260:	0800727f 	.word	0x0800727f
 8007264:	08007275 	.word	0x08007275
 8007268:	080072bf 	.word	0x080072bf
 800726c:	08007297 	.word	0x08007297
 8007270:	08007289 	.word	0x08007289
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa3c 	bl	80076f4 <USBD_GetDescriptor>
          break;
 800727c:	e024      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fba1 	bl	80079c8 <USBD_SetAddress>
          break;
 8007286:	e01f      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fbe0 	bl	8007a50 <USBD_SetConfig>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
          break;
 8007294:	e018      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc83 	bl	8007ba4 <USBD_GetConfig>
          break;
 800729e:	e013      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcb4 	bl	8007c10 <USBD_GetStatus>
          break;
 80072a8:	e00e      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fce3 	bl	8007c78 <USBD_SetFeature>
          break;
 80072b2:	e009      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fd07 	bl	8007cca <USBD_ClrFeature>
          break;
 80072bc:	e004      	b.n	80072c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fd5e 	bl	8007d82 <USBD_CtlError>
          break;
 80072c6:	bf00      	nop
      }
      break;
 80072c8:	e004      	b.n	80072d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fd58 	bl	8007d82 <USBD_CtlError>
      break;
 80072d2:	bf00      	nop
  }

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop

080072e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072f6:	2b40      	cmp	r3, #64	@ 0x40
 80072f8:	d005      	beq.n	8007306 <USBD_StdItfReq+0x26>
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d852      	bhi.n	80073a4 <USBD_StdItfReq+0xc4>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <USBD_StdItfReq+0x26>
 8007302:	2b20      	cmp	r3, #32
 8007304:	d14e      	bne.n	80073a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730c:	b2db      	uxtb	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	2b02      	cmp	r3, #2
 8007312:	d840      	bhi.n	8007396 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	889b      	ldrh	r3, [r3, #4]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d836      	bhi.n	800738c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	889b      	ldrh	r3, [r3, #4]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fedb 	bl	80070e2 <USBD_CoreFindIF>
 800732c:	4603      	mov	r3, r0
 800732e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2bff      	cmp	r3, #255	@ 0xff
 8007334:	d01d      	beq.n	8007372 <USBD_StdItfReq+0x92>
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d11a      	bne.n	8007372 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800733c:	7bba      	ldrb	r2, [r7, #14]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	32ae      	adds	r2, #174	@ 0xae
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00f      	beq.n	800736c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800734c:	7bba      	ldrb	r2, [r7, #14]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007354:	7bba      	ldrb	r2, [r7, #14]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	@ 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800736a:	e004      	b.n	8007376 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007370:	e001      	b.n	8007376 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88db      	ldrh	r3, [r3, #6]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d110      	bne.n	80073a0 <USBD_StdItfReq+0xc0>
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10d      	bne.n	80073a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fdd3 	bl	8007f30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800738a:	e009      	b.n	80073a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fcf7 	bl	8007d82 <USBD_CtlError>
          break;
 8007394:	e004      	b.n	80073a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fcf2 	bl	8007d82 <USBD_CtlError>
          break;
 800739e:	e000      	b.n	80073a2 <USBD_StdItfReq+0xc2>
          break;
 80073a0:	bf00      	nop
      }
      break;
 80073a2:	e004      	b.n	80073ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fceb 	bl	8007d82 <USBD_CtlError>
      break;
 80073ac:	bf00      	nop
  }

  return ret;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073d4:	2b40      	cmp	r3, #64	@ 0x40
 80073d6:	d007      	beq.n	80073e8 <USBD_StdEPReq+0x30>
 80073d8:	2b40      	cmp	r3, #64	@ 0x40
 80073da:	f200 817f 	bhi.w	80076dc <USBD_StdEPReq+0x324>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d02a      	beq.n	8007438 <USBD_StdEPReq+0x80>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	f040 817a 	bne.w	80076dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fe85 	bl	80070fc <USBD_CoreFindEP>
 80073f2:	4603      	mov	r3, r0
 80073f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073f6:	7b7b      	ldrb	r3, [r7, #13]
 80073f8:	2bff      	cmp	r3, #255	@ 0xff
 80073fa:	f000 8174 	beq.w	80076e6 <USBD_StdEPReq+0x32e>
 80073fe:	7b7b      	ldrb	r3, [r7, #13]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8170 	bne.w	80076e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007406:	7b7a      	ldrb	r2, [r7, #13]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800740e:	7b7a      	ldrb	r2, [r7, #13]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	32ae      	adds	r2, #174	@ 0xae
 8007414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8163 	beq.w	80076e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007420:	7b7a      	ldrb	r2, [r7, #13]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	32ae      	adds	r2, #174	@ 0xae
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007436:	e156      	b.n	80076e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d008      	beq.n	8007452 <USBD_StdEPReq+0x9a>
 8007440:	2b03      	cmp	r3, #3
 8007442:	f300 8145 	bgt.w	80076d0 <USBD_StdEPReq+0x318>
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 809b 	beq.w	8007582 <USBD_StdEPReq+0x1ca>
 800744c:	2b01      	cmp	r3, #1
 800744e:	d03c      	beq.n	80074ca <USBD_StdEPReq+0x112>
 8007450:	e13e      	b.n	80076d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d002      	beq.n	8007464 <USBD_StdEPReq+0xac>
 800745e:	2b03      	cmp	r3, #3
 8007460:	d016      	beq.n	8007490 <USBD_StdEPReq+0xd8>
 8007462:	e02c      	b.n	80074be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <USBD_StdEPReq+0xce>
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d00a      	beq.n	8007486 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f8db 	bl	8008630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800747a:	2180      	movs	r1, #128	@ 0x80
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f8d7 	bl	8008630 <USBD_LL_StallEP>
 8007482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007484:	e020      	b.n	80074c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc7a 	bl	8007d82 <USBD_CtlError>
              break;
 800748e:	e01b      	b.n	80074c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	885b      	ldrh	r3, [r3, #2]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10e      	bne.n	80074b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <USBD_StdEPReq+0xfe>
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b80      	cmp	r3, #128	@ 0x80
 80074a2:	d008      	beq.n	80074b6 <USBD_StdEPReq+0xfe>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	88db      	ldrh	r3, [r3, #6]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f8bd 	bl	8008630 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fd3a 	bl	8007f30 <USBD_CtlSendStatus>

              break;
 80074bc:	e004      	b.n	80074c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fc5e 	bl	8007d82 <USBD_CtlError>
              break;
 80074c6:	bf00      	nop
          }
          break;
 80074c8:	e107      	b.n	80076da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d002      	beq.n	80074dc <USBD_StdEPReq+0x124>
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d016      	beq.n	8007508 <USBD_StdEPReq+0x150>
 80074da:	e04b      	b.n	8007574 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <USBD_StdEPReq+0x146>
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b80      	cmp	r3, #128	@ 0x80
 80074e6:	d00a      	beq.n	80074fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f89f 	bl	8008630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074f2:	2180      	movs	r1, #128	@ 0x80
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 f89b 	bl	8008630 <USBD_LL_StallEP>
 80074fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074fc:	e040      	b.n	8007580 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fc3e 	bl	8007d82 <USBD_CtlError>
              break;
 8007506:	e03b      	b.n	8007580 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	885b      	ldrh	r3, [r3, #2]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d136      	bne.n	800757e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f8a5 	bl	800866e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fd03 	bl	8007f30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fde4 	bl	80070fc <USBD_CoreFindEP>
 8007534:	4603      	mov	r3, r0
 8007536:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007538:	7b7b      	ldrb	r3, [r7, #13]
 800753a:	2bff      	cmp	r3, #255	@ 0xff
 800753c:	d01f      	beq.n	800757e <USBD_StdEPReq+0x1c6>
 800753e:	7b7b      	ldrb	r3, [r7, #13]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11c      	bne.n	800757e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007544:	7b7a      	ldrb	r2, [r7, #13]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800754c:	7b7a      	ldrb	r2, [r7, #13]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	@ 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d010      	beq.n	800757e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800755c:	7b7a      	ldrb	r2, [r7, #13]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32ae      	adds	r2, #174	@ 0xae
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007572:	e004      	b.n	800757e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fc03 	bl	8007d82 <USBD_CtlError>
              break;
 800757c:	e000      	b.n	8007580 <USBD_StdEPReq+0x1c8>
              break;
 800757e:	bf00      	nop
          }
          break;
 8007580:	e0ab      	b.n	80076da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d002      	beq.n	8007594 <USBD_StdEPReq+0x1dc>
 800758e:	2b03      	cmp	r3, #3
 8007590:	d032      	beq.n	80075f8 <USBD_StdEPReq+0x240>
 8007592:	e097      	b.n	80076c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <USBD_StdEPReq+0x1f2>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b80      	cmp	r3, #128	@ 0x80
 800759e:	d004      	beq.n	80075aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fbed 	bl	8007d82 <USBD_CtlError>
                break;
 80075a8:	e091      	b.n	80076ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da0b      	bge.n	80075ca <USBD_StdEPReq+0x212>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	3310      	adds	r3, #16
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	3304      	adds	r3, #4
 80075c8:	e00b      	b.n	80075e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2202      	movs	r2, #2
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fc43 	bl	8007e7c <USBD_CtlSendData>
              break;
 80075f6:	e06a      	b.n	80076ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da11      	bge.n	8007624 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	3324      	adds	r3, #36	@ 0x24
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d117      	bne.n	800764a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fbb0 	bl	8007d82 <USBD_CtlError>
                  break;
 8007622:	e054      	b.n	80076ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	f003 020f 	and.w	r2, r3, #15
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb9d 	bl	8007d82 <USBD_CtlError>
                  break;
 8007648:	e041      	b.n	80076ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800764a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	da0b      	bge.n	800766a <USBD_StdEPReq+0x2b2>
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	3310      	adds	r3, #16
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	4413      	add	r3, r2
 8007666:	3304      	adds	r3, #4
 8007668:	e00b      	b.n	8007682 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	3304      	adds	r3, #4
 8007682:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <USBD_StdEPReq+0x2d8>
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b80      	cmp	r3, #128	@ 0x80
 800768e:	d103      	bne.n	8007698 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e00e      	b.n	80076b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 f805 	bl	80086ac <USBD_LL_IsStallEP>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e002      	b.n	80076b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2202      	movs	r2, #2
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fbdd 	bl	8007e7c <USBD_CtlSendData>
              break;
 80076c2:	e004      	b.n	80076ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb5b 	bl	8007d82 <USBD_CtlError>
              break;
 80076cc:	bf00      	nop
          }
          break;
 80076ce:	e004      	b.n	80076da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fb55 	bl	8007d82 <USBD_CtlError>
          break;
 80076d8:	bf00      	nop
      }
      break;
 80076da:	e005      	b.n	80076e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fb4f 	bl	8007d82 <USBD_CtlError>
      break;
 80076e4:	e000      	b.n	80076e8 <USBD_StdEPReq+0x330>
      break;
 80076e6:	bf00      	nop
  }

  return ret;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	885b      	ldrh	r3, [r3, #2]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	2b06      	cmp	r3, #6
 8007716:	f200 8128 	bhi.w	800796a <USBD_GetDescriptor+0x276>
 800771a:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <USBD_GetDescriptor+0x2c>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	0800773d 	.word	0x0800773d
 8007724:	08007755 	.word	0x08007755
 8007728:	08007795 	.word	0x08007795
 800772c:	0800796b 	.word	0x0800796b
 8007730:	0800796b 	.word	0x0800796b
 8007734:	0800790b 	.word	0x0800790b
 8007738:	08007937 	.word	0x08007937
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
      break;
 8007752:	e112      	b.n	800797a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	7c1b      	ldrb	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10d      	bne.n	8007778 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007764:	f107 0208 	add.w	r2, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	2202      	movs	r2, #2
 8007774:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007776:	e100      	b.n	800797a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	f107 0208 	add.w	r2, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	2202      	movs	r2, #2
 8007790:	701a      	strb	r2, [r3, #0]
      break;
 8007792:	e0f2      	b.n	800797a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	885b      	ldrh	r3, [r3, #2]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b05      	cmp	r3, #5
 800779c:	f200 80ac 	bhi.w	80078f8 <USBD_GetDescriptor+0x204>
 80077a0:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <USBD_GetDescriptor+0xb4>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077f5 	.word	0x080077f5
 80077b0:	08007829 	.word	0x08007829
 80077b4:	0800785d 	.word	0x0800785d
 80077b8:	08007891 	.word	0x08007891
 80077bc:	080078c5 	.word	0x080078c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	7c12      	ldrb	r2, [r2, #16]
 80077d8:	f107 0108 	add.w	r1, r7, #8
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e2:	e091      	b.n	8007908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 facb 	bl	8007d82 <USBD_CtlError>
            err++;
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	3301      	adds	r3, #1
 80077f0:	72fb      	strb	r3, [r7, #11]
          break;
 80077f2:	e089      	b.n	8007908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007816:	e077      	b.n	8007908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fab1 	bl	8007d82 <USBD_CtlError>
            err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
          break;
 8007826:	e06f      	b.n	8007908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e05d      	b.n	8007908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa97 	bl	8007d82 <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e055      	b.n	8007908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e043      	b.n	8007908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa7d 	bl	8007d82 <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e03b      	b.n	8007908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e029      	b.n	8007908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa63 	bl	8007d82 <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e021      	b.n	8007908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e00f      	b.n	8007908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa49 	bl	8007d82 <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e007      	b.n	8007908 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa41 	bl	8007d82 <USBD_CtlError>
          err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007906:	bf00      	nop
      }
      break;
 8007908:	e037      	b.n	800797a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800791a:	f107 0208 	add.w	r2, r7, #8
 800791e:	4610      	mov	r0, r2
 8007920:	4798      	blx	r3
 8007922:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007924:	e029      	b.n	800797a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fa2a 	bl	8007d82 <USBD_CtlError>
        err++;
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	3301      	adds	r3, #1
 8007932:	72fb      	strb	r3, [r7, #11]
      break;
 8007934:	e021      	b.n	800797a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7c1b      	ldrb	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10d      	bne.n	800795a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	4610      	mov	r0, r2
 800794c:	4798      	blx	r3
 800794e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	2207      	movs	r2, #7
 8007956:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007958:	e00f      	b.n	800797a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa10 	bl	8007d82 <USBD_CtlError>
        err++;
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	3301      	adds	r3, #1
 8007966:	72fb      	strb	r3, [r7, #11]
      break;
 8007968:	e007      	b.n	800797a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa08 	bl	8007d82 <USBD_CtlError>
      err++;
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	3301      	adds	r3, #1
 8007976:	72fb      	strb	r3, [r7, #11]
      break;
 8007978:	bf00      	nop
  }

  if (err != 0U)
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11e      	bne.n	80079be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d016      	beq.n	80079b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00e      	beq.n	80079ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88da      	ldrh	r2, [r3, #6]
 8007992:	893b      	ldrh	r3, [r7, #8]
 8007994:	4293      	cmp	r3, r2
 8007996:	bf28      	it	cs
 8007998:	4613      	movcs	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800799e:	893b      	ldrh	r3, [r7, #8]
 80079a0:	461a      	mov	r2, r3
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa69 	bl	8007e7c <USBD_CtlSendData>
 80079aa:	e009      	b.n	80079c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f9e7 	bl	8007d82 <USBD_CtlError>
 80079b4:	e004      	b.n	80079c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 faba 	bl	8007f30 <USBD_CtlSendStatus>
 80079bc:	e000      	b.n	80079c0 <USBD_GetDescriptor+0x2cc>
    return;
 80079be:	bf00      	nop
  }
}
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop

080079c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	889b      	ldrh	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d131      	bne.n	8007a3e <USBD_SetAddress+0x76>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d12d      	bne.n	8007a3e <USBD_SetAddress+0x76>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	885b      	ldrh	r3, [r3, #2]
 80079e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80079e8:	d829      	bhi.n	8007a3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d104      	bne.n	8007a0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9bc 	bl	8007d82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0a:	e01d      	b.n	8007a48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7bfa      	ldrb	r2, [r7, #15]
 8007a10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fe73 	bl	8008704 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa86 	bl	8007f30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	e009      	b.n	8007a48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3c:	e004      	b.n	8007a48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f99e 	bl	8007d82 <USBD_CtlError>
  }
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b4e      	ldr	r3, [pc, #312]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007a66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a68:	4b4d      	ldr	r3, [pc, #308]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d905      	bls.n	8007a7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f985 	bl	8007d82 <USBD_CtlError>
    return USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e08c      	b.n	8007b96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d002      	beq.n	8007a8e <USBD_SetConfig+0x3e>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d029      	beq.n	8007ae0 <USBD_SetConfig+0x90>
 8007a8c:	e075      	b.n	8007b7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a8e:	4b44      	ldr	r3, [pc, #272]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a96:	4b42      	ldr	r3, [pc, #264]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fe ffe3 	bl	8006a72 <USBD_SetClassConfig>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d008      	beq.n	8007ac8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f962 	bl	8007d82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ac6:	e065      	b.n	8007b94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fa31 	bl	8007f30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ad6:	e05d      	b.n	8007b94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa29 	bl	8007f30 <USBD_CtlSendStatus>
      break;
 8007ade:	e059      	b.n	8007b94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d112      	bne.n	8007b0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007af0:	4b2b      	ldr	r3, [pc, #172]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007afa:	4b29      	ldr	r3, [pc, #164]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fe ffd2 	bl	8006aaa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa12 	bl	8007f30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b0c:	e042      	b.n	8007b94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b0e:	4b24      	ldr	r3, [pc, #144]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d02a      	beq.n	8007b72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fe ffc0 	bl	8006aaa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b34:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fe ff99 	bl	8006a72 <USBD_SetClassConfig>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00f      	beq.n	8007b6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f918 	bl	8007d82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fe ffa5 	bl	8006aaa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b68:	e014      	b.n	8007b94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9e0 	bl	8007f30 <USBD_CtlSendStatus>
      break;
 8007b70:	e010      	b.n	8007b94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f9dc 	bl	8007f30 <USBD_CtlSendStatus>
      break;
 8007b78:	e00c      	b.n	8007b94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f900 	bl	8007d82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b82:	4b07      	ldr	r3, [pc, #28]	@ (8007ba0 <USBD_SetConfig+0x150>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7fe ff8e 	bl	8006aaa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	bf00      	nop
  }

  return ret;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000248 	.word	0x20000248

08007ba4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	88db      	ldrh	r3, [r3, #6]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d004      	beq.n	8007bc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8e2 	bl	8007d82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bbe:	e023      	b.n	8007c08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	dc02      	bgt.n	8007bd2 <USBD_GetConfig+0x2e>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dc03      	bgt.n	8007bd8 <USBD_GetConfig+0x34>
 8007bd0:	e015      	b.n	8007bfe <USBD_GetConfig+0x5a>
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d00b      	beq.n	8007bee <USBD_GetConfig+0x4a>
 8007bd6:	e012      	b.n	8007bfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3308      	adds	r3, #8
 8007be2:	2201      	movs	r2, #1
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f948 	bl	8007e7c <USBD_CtlSendData>
        break;
 8007bec:	e00c      	b.n	8007c08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f940 	bl	8007e7c <USBD_CtlSendData>
        break;
 8007bfc:	e004      	b.n	8007c08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f8be 	bl	8007d82 <USBD_CtlError>
        break;
 8007c06:	bf00      	nop
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d81e      	bhi.n	8007c66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	88db      	ldrh	r3, [r3, #6]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d004      	beq.n	8007c3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f8a5 	bl	8007d82 <USBD_CtlError>
        break;
 8007c38:	e01a      	b.n	8007c70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f043 0202 	orr.w	r2, r3, #2
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f90c 	bl	8007e7c <USBD_CtlSendData>
      break;
 8007c64:	e004      	b.n	8007c70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f88a 	bl	8007d82 <USBD_CtlError>
      break;
 8007c6e:	bf00      	nop
  }
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d107      	bne.n	8007c9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f94c 	bl	8007f30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c98:	e013      	b.n	8007cc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d10b      	bne.n	8007cba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	889b      	ldrh	r3, [r3, #4]
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f93c 	bl	8007f30 <USBD_CtlSendStatus>
}
 8007cb8:	e003      	b.n	8007cc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f860 	bl	8007d82 <USBD_CtlError>
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d80b      	bhi.n	8007cfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	885b      	ldrh	r3, [r3, #2]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d10c      	bne.n	8007d04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f91c 	bl	8007f30 <USBD_CtlSendStatus>
      }
      break;
 8007cf8:	e004      	b.n	8007d04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f840 	bl	8007d82 <USBD_CtlError>
      break;
 8007d02:	e000      	b.n	8007d06 <USBD_ClrFeature+0x3c>
      break;
 8007d04:	bf00      	nop
  }
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff fa40 	bl	80071be <SWAPBYTE>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	461a      	mov	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff fa33 	bl	80071be <SWAPBYTE>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3301      	adds	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff fa26 	bl	80071be <SWAPBYTE>
 8007d72:	4603      	mov	r3, r0
 8007d74:	461a      	mov	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	80da      	strh	r2, [r3, #6]
}
 8007d7a:	bf00      	nop
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8c:	2180      	movs	r1, #128	@ 0x80
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fc4e 	bl	8008630 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d94:	2100      	movs	r1, #0
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc4a 	bl	8008630 <USBD_LL_StallEP>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d042      	beq.n	8007e40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007dbe:	6938      	ldr	r0, [r7, #16]
 8007dc0:	f000 f842 	bl	8007e48 <USBD_GetLen>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dce:	d808      	bhi.n	8007de2 <USBD_GetString+0x3e>
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	f000 f839 	bl	8007e48 <USBD_GetLen>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	e001      	b.n	8007de6 <USBD_GetString+0x42>
 8007de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	4413      	add	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7812      	ldrb	r2, [r2, #0]
 8007df4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4413      	add	r3, r2
 8007e02:	2203      	movs	r2, #3
 8007e04:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e0c:	e013      	b.n	8007e36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4413      	add	r3, r2
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]
    idx++;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	3301      	adds	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	3301      	adds	r3, #1
 8007e34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e7      	bne.n	8007e0e <USBD_GetString+0x6a>
 8007e3e:	e000      	b.n	8007e42 <USBD_GetString+0x9e>
    return;
 8007e40:	bf00      	nop
  }
}
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e58:	e005      	b.n	8007e66 <USBD_GetLen+0x1e>
  {
    len++;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f5      	bne.n	8007e5a <USBD_GetLen+0x12>
  }

  return len;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fc4d 	bl	8008742 <USBD_LL_Transmit>

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fc3c 	bl	8008742 <USBD_LL_Transmit>

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fc40 	bl	8008784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fc2f 	bl	8008784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f40:	2300      	movs	r3, #0
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fbfb 	bl	8008742 <USBD_LL_Transmit>

  return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2205      	movs	r2, #5
 8007f62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f66:	2300      	movs	r3, #0
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc09 	bl	8008784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f80:	2200      	movs	r2, #0
 8007f82:	4912      	ldr	r1, [pc, #72]	@ (8007fcc <MX_USB_DEVICE_Init+0x50>)
 8007f84:	4812      	ldr	r0, [pc, #72]	@ (8007fd0 <MX_USB_DEVICE_Init+0x54>)
 8007f86:	f7fe fcf7 	bl	8006978 <USBD_Init>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f90:	f7f8 fe26 	bl	8000be0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007f94:	490f      	ldr	r1, [pc, #60]	@ (8007fd4 <MX_USB_DEVICE_Init+0x58>)
 8007f96:	480e      	ldr	r0, [pc, #56]	@ (8007fd0 <MX_USB_DEVICE_Init+0x54>)
 8007f98:	f7fe fd1e 	bl	80069d8 <USBD_RegisterClass>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fa2:	f7f8 fe1d 	bl	8000be0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007fa6:	490c      	ldr	r1, [pc, #48]	@ (8007fd8 <MX_USB_DEVICE_Init+0x5c>)
 8007fa8:	4809      	ldr	r0, [pc, #36]	@ (8007fd0 <MX_USB_DEVICE_Init+0x54>)
 8007faa:	f7fe fccb 	bl	8006944 <USBD_CUSTOM_HID_RegisterInterface>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fb4:	f7f8 fe14 	bl	8000be0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fb8:	4805      	ldr	r0, [pc, #20]	@ (8007fd0 <MX_USB_DEVICE_Init+0x54>)
 8007fba:	f7fe fd43 	bl	8006a44 <USBD_Start>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fc4:	f7f8 fe0c 	bl	8000be0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fc8:	bf00      	nop
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	200000d0 	.word	0x200000d0
 8007fd0:	2000024c 	.word	0x2000024c
 8007fd4:	2000000c 	.word	0x2000000c
 8007fd8:	200000c0 	.word	0x200000c0

08007fdc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fe0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007ff0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	460a      	mov	r2, r1
 8008006:	71fb      	strb	r3, [r7, #7]
 8008008:	4613      	mov	r3, r2
 800800a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800800c:	4806      	ldr	r0, [pc, #24]	@ (8008028 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800800e:	f7fe fc37 	bl	8006880 <USBD_CUSTOM_HID_ReceivePacket>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	e000      	b.n	8008020 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800801e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	2000024c 	.word	0x2000024c

0800802c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2212      	movs	r2, #18
 800803c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800803e:	4b03      	ldr	r3, [pc, #12]	@ (800804c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	200000ec 	.word	0x200000ec

08008050 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2204      	movs	r2, #4
 8008060:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008062:	4b03      	ldr	r3, [pc, #12]	@ (8008070 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20000100 	.word	0x20000100

08008074 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d105      	bne.n	8008092 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4907      	ldr	r1, [pc, #28]	@ (80080a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800808a:	4808      	ldr	r0, [pc, #32]	@ (80080ac <USBD_FS_ProductStrDescriptor+0x38>)
 800808c:	f7ff fe8a 	bl	8007da4 <USBD_GetString>
 8008090:	e004      	b.n	800809c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4904      	ldr	r1, [pc, #16]	@ (80080a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008096:	4805      	ldr	r0, [pc, #20]	@ (80080ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008098:	f7ff fe84 	bl	8007da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800809c:	4b02      	ldr	r3, [pc, #8]	@ (80080a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000528 	.word	0x20000528
 80080ac:	080088c0 	.word	0x080088c0

080080b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	4904      	ldr	r1, [pc, #16]	@ (80080d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080c0:	4804      	ldr	r0, [pc, #16]	@ (80080d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080c2:	f7ff fe6f 	bl	8007da4 <USBD_GetString>
  return USBD_StrDesc;
 80080c6:	4b02      	ldr	r3, [pc, #8]	@ (80080d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20000528 	.word	0x20000528
 80080d4:	080088e0 	.word	0x080088e0

080080d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	221a      	movs	r2, #26
 80080e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080ea:	f000 f843 	bl	8008174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080ee:	4b02      	ldr	r3, [pc, #8]	@ (80080f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000104 	.word	0x20000104

080080fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4907      	ldr	r1, [pc, #28]	@ (8008130 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008112:	4808      	ldr	r0, [pc, #32]	@ (8008134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008114:	f7ff fe46 	bl	8007da4 <USBD_GetString>
 8008118:	e004      	b.n	8008124 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800811e:	4805      	ldr	r0, [pc, #20]	@ (8008134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008120:	f7ff fe40 	bl	8007da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008124:	4b02      	ldr	r3, [pc, #8]	@ (8008130 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000528 	.word	0x20000528
 8008134:	080088f4 	.word	0x080088f4

08008138 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d105      	bne.n	8008156 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	4907      	ldr	r1, [pc, #28]	@ (800816c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800814e:	4808      	ldr	r0, [pc, #32]	@ (8008170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008150:	f7ff fe28 	bl	8007da4 <USBD_GetString>
 8008154:	e004      	b.n	8008160 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	4904      	ldr	r1, [pc, #16]	@ (800816c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800815a:	4805      	ldr	r0, [pc, #20]	@ (8008170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800815c:	f7ff fe22 	bl	8007da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000528 	.word	0x20000528
 8008170:	08008908 	.word	0x08008908

08008174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800817a:	4b0f      	ldr	r3, [pc, #60]	@ (80081b8 <Get_SerialNum+0x44>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <Get_SerialNum+0x48>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008186:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <Get_SerialNum+0x4c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800819a:	2208      	movs	r2, #8
 800819c:	4909      	ldr	r1, [pc, #36]	@ (80081c4 <Get_SerialNum+0x50>)
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f814 	bl	80081cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081a4:	2204      	movs	r2, #4
 80081a6:	4908      	ldr	r1, [pc, #32]	@ (80081c8 <Get_SerialNum+0x54>)
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f000 f80f 	bl	80081cc <IntToUnicode>
  }
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	1fff7a10 	.word	0x1fff7a10
 80081bc:	1fff7a14 	.word	0x1fff7a14
 80081c0:	1fff7a18 	.word	0x1fff7a18
 80081c4:	20000106 	.word	0x20000106
 80081c8:	20000116 	.word	0x20000116

080081cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
 80081e2:	e027      	b.n	8008234 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0f1b      	lsrs	r3, r3, #28
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d80b      	bhi.n	8008204 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	0f1b      	lsrs	r3, r3, #28
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	4619      	mov	r1, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	440b      	add	r3, r1
 80081fc:	3230      	adds	r2, #48	@ 0x30
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e00a      	b.n	800821a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0f1b      	lsrs	r3, r3, #28
 8008208:	b2da      	uxtb	r2, r3
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	4619      	mov	r1, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	440b      	add	r3, r1
 8008214:	3237      	adds	r2, #55	@ 0x37
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	3301      	adds	r3, #1
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	3301      	adds	r3, #1
 8008232:	75fb      	strb	r3, [r7, #23]
 8008234:	7dfa      	ldrb	r2, [r7, #23]
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	429a      	cmp	r2, r3
 800823a:	d3d3      	bcc.n	80081e4 <IntToUnicode+0x18>
  }
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
	...

0800824c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	@ 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008254:	f107 0314 	add.w	r3, r7, #20
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	60da      	str	r2, [r3, #12]
 8008262:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800826c:	d13a      	bne.n	80082e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	4b1e      	ldr	r3, [pc, #120]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	4a1d      	ldr	r2, [pc, #116]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 8008278:	f043 0301 	orr.w	r3, r3, #1
 800827c:	6313      	str	r3, [r2, #48]	@ 0x30
 800827e:	4b1b      	ldr	r3, [pc, #108]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800828a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800828e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008290:	2302      	movs	r3, #2
 8008292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008298:	2303      	movs	r3, #3
 800829a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800829c:	230a      	movs	r3, #10
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4619      	mov	r1, r3
 80082a6:	4812      	ldr	r0, [pc, #72]	@ (80082f0 <HAL_PCD_MspInit+0xa4>)
 80082a8:	f7fa f880 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082ac:	4b0f      	ldr	r3, [pc, #60]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b0:	4a0e      	ldr	r2, [pc, #56]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c0:	4a0a      	ldr	r2, [pc, #40]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80082c8:	4b08      	ldr	r3, [pc, #32]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082d4:	2200      	movs	r2, #0
 80082d6:	2100      	movs	r1, #0
 80082d8:	2043      	movs	r0, #67	@ 0x43
 80082da:	f7f9 fcc0 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082de:	2043      	movs	r0, #67	@ 0x43
 80082e0:	f7f9 fcd9 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082e4:	bf00      	nop
 80082e6:	3728      	adds	r7, #40	@ 0x28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40020000 	.word	0x40020000

080082f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fbe7 	bl	8006ade <USBD_LL_SetupStage>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	4619      	mov	r1, r3
 8008342:	f7fe fc21 	bl	8006b88 <USBD_LL_DataOutStage>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	3320      	adds	r3, #32
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	4619      	mov	r1, r3
 8008376:	f7fe fcba 	bl	8006cee <USBD_LL_DataInStage>
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fdf4 	bl	8006f7e <USBD_LL_SOF>
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083a6:	2301      	movs	r3, #1
 80083a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	79db      	ldrb	r3, [r3, #7]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
 80083b6:	e008      	b.n	80083ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	79db      	ldrb	r3, [r3, #7]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d102      	bne.n	80083c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
 80083c4:	e001      	b.n	80083ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083c6:	f7f8 fc0b 	bl	8000be0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083d0:	7bfa      	ldrb	r2, [r7, #15]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe fd8e 	bl	8006ef6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fd36 	bl	8006e52 <USBD_LL_Reset>
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fd89 	bl	8006f16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008416:	f043 0301 	orr.w	r3, r3, #1
 800841a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7adb      	ldrb	r3, [r3, #11]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008424:	4b04      	ldr	r3, [pc, #16]	@ (8008438 <HAL_PCD_SuspendCallback+0x48>)
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	4a03      	ldr	r2, [pc, #12]	@ (8008438 <HAL_PCD_SuspendCallback+0x48>)
 800842a:	f043 0306 	orr.w	r3, r3, #6
 800842e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fd7f 	bl	8006f4e <USBD_LL_Resume>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fdd7 	bl	8007022 <USBD_LL_IsoOUTIncomplete>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fd93 	bl	8006fbe <USBD_LL_IsoINIncomplete>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fde9 	bl	8007086 <USBD_LL_DevConnected>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fde6 	bl	800709c <USBD_LL_DevDisconnected>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d13c      	bne.n	8008562 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084e8:	4a20      	ldr	r2, [pc, #128]	@ (800856c <USBD_LL_Init+0x94>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a1e      	ldr	r2, [pc, #120]	@ (800856c <USBD_LL_Init+0x94>)
 80084f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084f8:	4b1c      	ldr	r3, [pc, #112]	@ (800856c <USBD_LL_Init+0x94>)
 80084fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008500:	4b1a      	ldr	r3, [pc, #104]	@ (800856c <USBD_LL_Init+0x94>)
 8008502:	2204      	movs	r2, #4
 8008504:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008506:	4b19      	ldr	r3, [pc, #100]	@ (800856c <USBD_LL_Init+0x94>)
 8008508:	2202      	movs	r2, #2
 800850a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800850c:	4b17      	ldr	r3, [pc, #92]	@ (800856c <USBD_LL_Init+0x94>)
 800850e:	2200      	movs	r2, #0
 8008510:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008512:	4b16      	ldr	r3, [pc, #88]	@ (800856c <USBD_LL_Init+0x94>)
 8008514:	2202      	movs	r2, #2
 8008516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008518:	4b14      	ldr	r3, [pc, #80]	@ (800856c <USBD_LL_Init+0x94>)
 800851a:	2200      	movs	r2, #0
 800851c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800851e:	4b13      	ldr	r3, [pc, #76]	@ (800856c <USBD_LL_Init+0x94>)
 8008520:	2200      	movs	r2, #0
 8008522:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008524:	4b11      	ldr	r3, [pc, #68]	@ (800856c <USBD_LL_Init+0x94>)
 8008526:	2200      	movs	r2, #0
 8008528:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800852a:	4b10      	ldr	r3, [pc, #64]	@ (800856c <USBD_LL_Init+0x94>)
 800852c:	2200      	movs	r2, #0
 800852e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008530:	4b0e      	ldr	r3, [pc, #56]	@ (800856c <USBD_LL_Init+0x94>)
 8008532:	2200      	movs	r2, #0
 8008534:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008536:	480d      	ldr	r0, [pc, #52]	@ (800856c <USBD_LL_Init+0x94>)
 8008538:	f7fa f915 	bl	8002766 <HAL_PCD_Init>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008542:	f7f8 fb4d 	bl	8000be0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008546:	2180      	movs	r1, #128	@ 0x80
 8008548:	4808      	ldr	r0, [pc, #32]	@ (800856c <USBD_LL_Init+0x94>)
 800854a:	f7fb fb2a 	bl	8003ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800854e:	2240      	movs	r2, #64	@ 0x40
 8008550:	2100      	movs	r1, #0
 8008552:	4806      	ldr	r0, [pc, #24]	@ (800856c <USBD_LL_Init+0x94>)
 8008554:	f7fb fade 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008558:	2280      	movs	r2, #128	@ 0x80
 800855a:	2101      	movs	r1, #1
 800855c:	4803      	ldr	r0, [pc, #12]	@ (800856c <USBD_LL_Init+0x94>)
 800855e:	f7fb fad9 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000728 	.word	0x20000728

08008570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008586:	4618      	mov	r0, r3
 8008588:	f7fa f9fc 	bl	8002984 <HAL_PCD_Start>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f930 	bl	80087f8 <USBD_Get_USB_Status>
 8008598:	4603      	mov	r3, r0
 800859a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800859c:	7bbb      	ldrb	r3, [r7, #14]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	4608      	mov	r0, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	461a      	mov	r2, r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	70fb      	strb	r3, [r7, #3]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70bb      	strb	r3, [r7, #2]
 80085bc:	4613      	mov	r3, r2
 80085be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085ce:	78bb      	ldrb	r3, [r7, #2]
 80085d0:	883a      	ldrh	r2, [r7, #0]
 80085d2:	78f9      	ldrb	r1, [r7, #3]
 80085d4:	f7fa fed0 	bl	8003378 <HAL_PCD_EP_Open>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f90a 	bl	80087f8 <USBD_Get_USB_Status>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7fa ff1b 	bl	800344c <HAL_PCD_EP_Close>
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	4618      	mov	r0, r3
 800861e:	f000 f8eb 	bl	80087f8 <USBD_Get_USB_Status>
 8008622:	4603      	mov	r3, r0
 8008624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008626:	7bbb      	ldrb	r3, [r7, #14]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7fa ffbb 	bl	80035ca <HAL_PCD_EP_SetStall>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f8cc 	bl	80087f8 <USBD_Get_USB_Status>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7fa ffff 	bl	8003690 <HAL_PCD_EP_ClrStall>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f8ad 	bl	80087f8 <USBD_Get_USB_Status>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da0b      	bge.n	80086e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	4613      	mov	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	3316      	adds	r3, #22
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	e00b      	b.n	80086f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80086f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800871e:	78fa      	ldrb	r2, [r7, #3]
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fa fe04 	bl	8003330 <HAL_PCD_SetAddress>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f862 	bl	80087f8 <USBD_Get_USB_Status>
 8008734:	4603      	mov	r3, r0
 8008736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008738:	7bbb      	ldrb	r3, [r7, #14]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b086      	sub	sp, #24
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
 800874e:	460b      	mov	r3, r1
 8008750:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008760:	7af9      	ldrb	r1, [r7, #11]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f7fa fef6 	bl	8003556 <HAL_PCD_EP_Transmit>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f841 	bl	80087f8 <USBD_Get_USB_Status>
 8008776:	4603      	mov	r3, r0
 8008778:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800877a:	7dbb      	ldrb	r3, [r7, #22]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	460b      	mov	r3, r1
 8008792:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80087a2:	7af9      	ldrb	r1, [r7, #11]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	f7fa fe9a 	bl	80034e0 <HAL_PCD_EP_Receive>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f820 	bl	80087f8 <USBD_Get_USB_Status>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80087d0:	4b03      	ldr	r3, [pc, #12]	@ (80087e0 <USBD_static_malloc+0x18>)
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20000c0c 	.word	0x20000c0c

080087e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	2b03      	cmp	r3, #3
 800880a:	d817      	bhi.n	800883c <USBD_Get_USB_Status+0x44>
 800880c:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <USBD_Get_USB_Status+0x1c>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008825 	.word	0x08008825
 8008818:	0800882b 	.word	0x0800882b
 800881c:	08008831 	.word	0x08008831
 8008820:	08008837 	.word	0x08008837
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	e00b      	b.n	8008842 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800882a:	2303      	movs	r3, #3
 800882c:	73fb      	strb	r3, [r7, #15]
    break;
 800882e:	e008      	b.n	8008842 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	e005      	b.n	8008842 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008836:	2303      	movs	r3, #3
 8008838:	73fb      	strb	r3, [r7, #15]
    break;
 800883a:	e002      	b.n	8008842 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800883c:	2303      	movs	r3, #3
 800883e:	73fb      	strb	r3, [r7, #15]
    break;
 8008840:	bf00      	nop
  }
  return usb_status;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <__libc_init_array>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	4d0d      	ldr	r5, [pc, #52]	@ (8008898 <__libc_init_array+0x38>)
 8008864:	4c0d      	ldr	r4, [pc, #52]	@ (800889c <__libc_init_array+0x3c>)
 8008866:	1b64      	subs	r4, r4, r5
 8008868:	10a4      	asrs	r4, r4, #2
 800886a:	2600      	movs	r6, #0
 800886c:	42a6      	cmp	r6, r4
 800886e:	d109      	bne.n	8008884 <__libc_init_array+0x24>
 8008870:	4d0b      	ldr	r5, [pc, #44]	@ (80088a0 <__libc_init_array+0x40>)
 8008872:	4c0c      	ldr	r4, [pc, #48]	@ (80088a4 <__libc_init_array+0x44>)
 8008874:	f000 f818 	bl	80088a8 <_init>
 8008878:	1b64      	subs	r4, r4, r5
 800887a:	10a4      	asrs	r4, r4, #2
 800887c:	2600      	movs	r6, #0
 800887e:	42a6      	cmp	r6, r4
 8008880:	d105      	bne.n	800888e <__libc_init_array+0x2e>
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	f855 3b04 	ldr.w	r3, [r5], #4
 8008888:	4798      	blx	r3
 800888a:	3601      	adds	r6, #1
 800888c:	e7ee      	b.n	800886c <__libc_init_array+0xc>
 800888e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008892:	4798      	blx	r3
 8008894:	3601      	adds	r6, #1
 8008896:	e7f2      	b.n	800887e <__libc_init_array+0x1e>
 8008898:	08008940 	.word	0x08008940
 800889c:	08008940 	.word	0x08008940
 80088a0:	08008940 	.word	0x08008940
 80088a4:	08008944 	.word	0x08008944

080088a8 <_init>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr

080088b4 <_fini>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr
